const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testLiveCron() {
  console.log('üöÄ Test du syst√®me de cron job en direct...\n');

  try {
    // 1. Cr√©er une assignation de test qui devrait √™tre activ√©e dans 10 secondes
    const now = new Date();
    const startDate = new Date(now.getTime() + 10000); // 10 secondes dans le futur
    const endDate = new Date(now.getTime() + 3600000); // 1 heure dans le futur

    console.log('üìÖ Dates de test:');
    console.log(`   Maintenant: ${now.toISOString()}`);
    console.log(`   Date de d√©but (dans 10s): ${startDate.toISOString()}`);
    console.log(`   Date de fin: ${endDate.toISOString()}\n`);

    // 2. Trouver une zone et un commercial existants
    const zone = await prisma.zone.findFirst();
    const commercial = await prisma.commercial.findFirst();

    if (!zone || !commercial) {
      console.log('‚ùå Aucune zone ou commercial trouv√© dans la base de donn√©es');
      return;
    }

    console.log(`üè¢ Zone de test: ${zone.nom} (ID: ${zone.id})`);
    console.log(`üë§ Commercial de test: ${commercial.prenom} ${commercial.nom} (ID: ${commercial.id})\n`);

    // 3. Cr√©er une assignation de test
    const testAssignment = await prisma.zoneAssignmentHistory.create({
      data: {
        zoneId: zone.id,
        assignedToType: 'COMMERCIAL',
        assignedToId: commercial.id,
        startDate: startDate,
        endDate: endDate,
        assignedByUserName: 'Test Live Cron'
      }
    });

    console.log(`‚úÖ Assignation de test cr√©√©e (ID: ${testAssignment.id})`);

    // 4. S'assurer qu'il y a un ZoneCommercial inactif
    let zoneCommercial = await prisma.zoneCommercial.findFirst({
      where: {
        zoneId: zone.id,
        commercialId: commercial.id
      }
    });

    if (zoneCommercial) {
      zoneCommercial = await prisma.zoneCommercial.update({
        where: { id: zoneCommercial.id },
        data: { isActive: false }
      });
      console.log(`‚úÖ ZoneCommercial mis √† jour (ID: ${zoneCommercial.id}) - isActive: false`);
    } else {
      zoneCommercial = await prisma.zoneCommercial.create({
        data: {
          zoneId: zone.id,
          commercialId: commercial.id,
          isActive: false,
          assignedBy: 'Test Live Cron'
        }
      });
      console.log(`‚úÖ ZoneCommercial cr√©√© (ID: ${zoneCommercial.id}) - isActive: false`);
    }

    console.log('\n‚è∞ Attente de 15 secondes pour que le cron job s\'ex√©cute...');
    console.log('   (Le cron job s\'ex√©cute toutes les minutes, mais nous attendons un peu plus)');
    
    // Attendre 15 secondes
    await new Promise(resolve => setTimeout(resolve, 15000));

    // 5. V√©rifier l'√©tat apr√®s l'attente
    const finalState = await prisma.zoneCommercial.findUnique({
      where: { id: zoneCommercial.id }
    });

    console.log(`\nüìä √âtat apr√®s attente: isActive = ${finalState.isActive}`);

    if (finalState.isActive) {
      console.log('üéâ Succ√®s ! Le cron job a activ√© l\'assignation automatiquement.');
    } else {
      console.log('‚è≥ L\'assignation n\'a pas encore √©t√© activ√©e. Cela peut √™tre normal si:');
      console.log('   - Le serveur NestJS n\'est pas d√©marr√©');
      console.log('   - Le cron job n\'a pas encore eu le temps de s\'ex√©cuter');
      console.log('   - Il y a un probl√®me avec la configuration du cron job');
    }

    // 6. Nettoyage
    console.log('\nüßπ Nettoyage des donn√©es de test...');
    await prisma.zoneCommercial.delete({ where: { id: zoneCommercial.id } });
    await prisma.zoneAssignmentHistory.delete({ where: { id: testAssignment.id } });
    console.log('‚úÖ Donn√©es de test supprim√©es');

    console.log('\nüí° Pour tester compl√®tement le syst√®me:');
    console.log('   1. D√©marrez le serveur NestJS: npm run start:dev');
    console.log('   2. Relancez ce script');
    console.log('   3. Observez les logs du serveur pour voir les messages du cron job');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testLiveCron();