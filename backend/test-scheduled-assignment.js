const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testScheduledAssignment() {
  try {
    console.log('üß™ Test d\'assignation programm√©e');
    console.log('üìÖ Heure actuelle:', new Date().toISOString());
    
    // 1. Trouver une zone existante
    const zones = await prisma.zone.findMany({ take: 1 });
    if (zones.length === 0) {
      console.log('‚ùå Aucune zone trouv√©e');
      return;
    }
    const zone = zones[0];
    console.log('üéØ Zone trouv√©e:', zone.nom);
    
    // 2. Trouver un commercial existant
    const commerciaux = await prisma.commercial.findMany({ take: 1 });
    if (commerciaux.length === 0) {
      console.log('‚ùå Aucun commercial trouv√©');
      return;
    }
    const commercial = commerciaux[0];
    console.log('üë§ Commercial trouv√©:', commercial.nom, commercial.prenom);
    
    // 3. Cr√©er une assignation programm√©e avec date de d√©but dans 1 minute
    const startDate = new Date(Date.now() + 60 * 1000); // +1 minute
    const endDate = new Date(Date.now() + 5 * 60 * 1000); // +5 minutes
    
    console.log('‚è∞ Date de d√©but programm√©e:', startDate.toISOString());
    console.log('‚è∞ Date de fin programm√©e:', endDate.toISOString());
    
    const assignment = await prisma.zoneAssignmentHistory.create({
      data: {
        zoneId: zone.id,
        assignedToType: 'COMMERCIAL',
        assignedToId: commercial.id,
        assignedByUserId: 'test-user',
        assignedByUserName: 'Test User',
        startDate: startDate,
        endDate: endDate,
      }
    });
    
    console.log('‚úÖ Assignation programm√©e cr√©√©e avec ID:', assignment.id);
    
    // 4. V√©rifier l'√©tat initial
    console.log('\nüìã √âtat initial:');
    const initialActiveAssignments = await prisma.zoneCommercial.findMany({
      where: {
        zoneId: zone.id,
        commercialId: commercial.id,
        isActive: true
      }
    });
    console.log('üîç Assignations actives:', initialActiveAssignments.length);
    
    // 5. Simuler l'activation imm√©diate (pour le test)
    console.log('\nüöÄ Test d\'activation imm√©diate...');
    const now = new Date();
    const futureAssignments = await prisma.zoneAssignmentHistory.findMany({
      where: {
        startDate: { lte: now }, // Devrait √™tre vide maintenant
        endDate: { gt: now },
      }
    });
    console.log('üìä Assignations futures √† activer:', futureAssignments.length);
    
    // 6. Forcer l'activation pour le test en modifiant la date
    await prisma.zoneAssignmentHistory.update({
      where: { id: assignment.id },
      data: { startDate: new Date(Date.now() - 1000) } // -1 seconde
    });
    
    console.log('‚ö° Date de d√©but modifi√©e pour activation imm√©diate');
    
    // 7. R√©ex√©cuter la v√©rification
    const updatedFutureAssignments = await prisma.zoneAssignmentHistory.findMany({
      where: {
        startDate: { lte: now },
        endDate: { gt: now },
      }
    });
    console.log('üìä Assignations futures √† activer (apr√®s modification):', updatedFutureAssignments.length);
    
    // 8. Simuler la logique d'activation
    if (updatedFutureAssignments.length > 0) {
      for (const futureAssignment of updatedFutureAssignments) {
        if (futureAssignment.assignedToType === 'COMMERCIAL') {
          // Cr√©er ou r√©activer l'assignation
          await prisma.zoneCommercial.upsert({
            where: {
              zoneId_commercialId: {
                zoneId: futureAssignment.zoneId,
                commercialId: futureAssignment.assignedToId
              }
            },
            update: { isActive: true, endedAt: null },
            create: {
              zoneId: futureAssignment.zoneId,
              commercialId: futureAssignment.assignedToId,
              assignedBy: futureAssignment.assignedByUserId,
              isActive: true
            }
          });
          console.log('‚úÖ Assignation activ√©e pour commercial:', futureAssignment.assignedToId);
        }
      }
    }
    
    // 9. V√©rifier l'√©tat final
    console.log('\nüìã √âtat final:');
    const finalActiveAssignments = await prisma.zoneCommercial.findMany({
      where: {
        zoneId: zone.id,
        commercialId: commercial.id,
        isActive: true
      }
    });
    console.log('üîç Assignations actives:', finalActiveAssignments.length);
    
    console.log('\nüéâ Test termin√© avec succ√®s!');
    console.log('üí° R√©sultat: L\'assignation programm√©e', finalActiveAssignments.length > initialActiveAssignments.length ? 'FONCTIONNE ‚úÖ' : 'NE FONCTIONNE PAS ‚ùå');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testScheduledAssignment();