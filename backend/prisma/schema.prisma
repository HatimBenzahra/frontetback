generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manager {
  id        String   @id @default(uuid())
  nom       String
  prenom    String
  email     String   @unique
  telephone String?
  equipes   Equipe[]
  zones     Zone[]   @relation("ManagerZones")

  @@map("managers")
}

model Equipe {
  id          String       @id @default(uuid())
  nom         String
  managerId   String
  commerciaux Commercial[]
  manager     Manager      @relation(fields: [managerId], references: [id])
  zones       Zone[]       @relation("EquipeZones")

  @@unique([nom, managerId])
  @@map("equipes")
}

model Commercial {
  id                 String                  @id @default(uuid())
  nom                String
  prenom             String
  email              String                  @unique
  telephone          String?
  equipeId           String?
  managerId          String
  currentMonthlyGoal Int?
  equipe             Equipe?                 @relation(fields: [equipeId], references: [id])
  historiques        HistoriqueProspection[]
  zones              Zone[]                  @relation("CommercialZones")
  immeubles          Immeuble[]              @relation("ImmeubleProspectors")

  @@map("commerciaux")
}

model Zone {
  id              String         @id @default(uuid())
  nom             String
  latitude        Float
  longitude       Float
  rayonMetres     Float
  couleur         String
  createdAt       DateTime       @default(now())
  typeAssignation AssignmentType
  equipeId        String?
  managerId       String?
  commercialId    String?
  immeubles       Immeuble[]
  commercial      Commercial?    @relation("CommercialZones", fields: [commercialId], references: [id])
  equipe          Equipe?        @relation("EquipeZones", fields: [equipeId], references: [id])
  manager         Manager?       @relation("ManagerZones", fields: [managerId], references: [id])

  @@unique([nom, typeAssignation])
  @@map("zones")
}

model Immeuble {
  id                 String                  @id @default(uuid())
  adresse            String
  ville              String
  codePostal         String
  status             ImmeubleStatus          @default(A_VISITER)
  nbPortesTotal      Int
  prospectingMode    ProspectingMode
  dateDerniereVisite DateTime?
  zoneId             String?
  latitude           Float?
  longitude          Float?
  hasElevator        Boolean
  digicode           String?
  historiques        HistoriqueProspection[]
  zone               Zone?                   @relation(fields: [zoneId], references: [id])
  portes             Porte[]
  prospectors        Commercial[]            @relation("ImmeubleProspectors")

  @@map("immeubles")
}

model Porte {
  id          String      @id @default(uuid())
  numeroPorte String
  statut      PorteStatut @default(NON_VISITE)
  passage     Int
  commentaire String?
  immeubleId  String
  immeuble    Immeuble    @relation(fields: [immeubleId], references: [id])

  @@map("portes")
}

model HistoriqueProspection {
  id               String     @id @default(uuid())
  dateProspection  DateTime   @default(now())
  commercialId     String
  immeubleId       String
  nbPortesVisitees Int
  nbContratsSignes Int
  nbRdvPris        Int
  nbRefus          Int
  nbAbsents        Int
  commentaire      String?
  commercial       Commercial @relation(fields: [commercialId], references: [id])
  immeuble         Immeuble   @relation(fields: [immeubleId], references: [id])

  @@map("historiques_prospection")
}

enum ImmeubleStatus {
  A_VISITER
  VISITE
  RDV_PRIS
  INACCESSIBLE
}

enum ProspectingMode {
  SOLO
  DUO
}

enum PorteStatut {
  NON_VISITE
  VISITE
  ABSENT
  REFUS
  CURIEUX
  CONTRAT_SIGNE
}

enum PeriodType {
  WEEKLY
  MONTHLY
  YEARLY
}

enum StatEntityType {
  COMMERCIAL
  EQUIPE
  MANAGER
}

enum AssignmentType {
  EQUIPE
  MANAGER
  COMMERCIAL
}
