import { Injectable, Logger } from '@nestjs/common';

@Injectable()
export class GeminiService {
  private readonly logger = new Logger(GeminiService.name);
  private localLLMUrl: string;

  constructor() {
    // Utiliser l'URL du LLM local depuis les variables d'environnement
    this.localLLMUrl = process.env.LOCAL_LLM_URL || 'http://192.168.1.120:1234';
    this.logger.log(`ü§ñ LLM local configur√©: ${this.localLLMUrl}`);
  }

  async restructureDialogue(transcription: string): Promise<string> {
    const maxRetries = 3;
    let lastError: any;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        this.logger.log(`D√©but de la restructuration du dialogue avec LLM local (tentative ${attempt}/${maxRetries})`);
        
        const prompt = `
Tu es un expert en restructuration de transcriptions commerciales.
Ta mission : identifier les interlocuteurs et corriger le texte, SANS EXPLICATION.

R√àGLES D'IDENTIFICATION AUTOMATIQUE :
‚Ä¢ COMMERCIAL : vocabulaire professionnel ("je vous propose", "notre offre", "je vous envoie", "confirmation", "comme convenu", "parfait")
‚Ä¢ PROSPECT/CLIENT : r√©actions ("√ßa m'int√©resse", "je r√©fl√©chis", "d'accord", questions sur le produit)
‚Ä¢ Si incertain, la personne qui structure/pr√©sente = COMMERCIAL

INSTRUCTIONS :
1. Identifie automatiquement qui parle
2. Corrige les erreurs de transcription 
3. Compl√®te les phrases incompl√®tes
4. Supprime les h√©sitations (euh, hmm)
5. Am√©liore la ponctuation
6. AUCUN commentaire ni explication
7. Il faut que la phrase soit coh√©rente avec le contexte de la conversation
8. OBLIGATOIRE : Un retour √† la ligne vide entre chaque interlocuteur

FORMAT STRICT - RESPECTER EXACTEMENT :
**Commercial :** [texte corrig√©]

**Prospect :** [texte corrig√©]

**Commercial :** [texte corrig√©]

R√àGLES DE FORMATAGE OBLIGATOIRES :
- TOUJOURS une ligne vide entre chaque interlocuteur
- JAMAIS de dialogue cons√©cutif sans ligne vide
- Chaque changement d'interlocuteur = nouvelle ligne vide
- FORMAT EXACT √Ä RESPECTER :

**Commercial :** Bonjour, comment allez-vous ?

**Prospect :** Tr√®s bien, merci.

**Commercial :** Parfait, je vous propose notre offre.

**Prospect :** √áa m'int√©resse.

IMPORTANT : Chaque interlocuteur doit √™tre sur sa propre ligne avec une ligne vide entre eux.

TRANSCRIPTION √Ä TRAITER :
${transcription}

R√âSULTAT (avec retours √† la ligne obligatoires) :`;

        // Appel √† l'API locale
        const response = await fetch(`${this.localLLMUrl}/v1/chat/completions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'qwen/qwen3-4b-2507', // mod√®le local d√©tect√©
            messages: [
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: 0.7,
            max_tokens: 2000
          })
        });

        if (!response.ok) {
          throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        const restructuredText = data.choices[0]?.message?.content;

        if (!restructuredText) {
          throw new Error('R√©ponse vide du LLM local');
        }

        // Nettoyage post-traitement pour s'assurer des retours √† la ligne
        const cleanedText = this.cleanAndFormatDialogue(restructuredText);

        this.logger.log('Restructuration termin√©e avec succ√®s');
        return cleanedText;

      } catch (error: any) {
        lastError = error;
        
        // Gestion des erreurs r√©seau
        if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
          const retryDelay = Math.min(1000 * Math.pow(2, attempt - 1), 5000);
          this.logger.warn(`Erreur de connexion au LLM local, nouvelle tentative dans ${retryDelay}ms (${attempt}/${maxRetries})`);
          
          if (attempt < maxRetries) {
            await new Promise(resolve => setTimeout(resolve, retryDelay));
            continue;
          }
        }
        
        // Pour les autres erreurs ou apr√®s max tentatives
        this.logger.error(`Erreur lors de la restructuration (tentative ${attempt}/${maxRetries}):`, error);
        throw new Error(`Erreur de restructuration: ${error.message}`);
      }
    }
    
    throw new Error(`√âchec apr√®s ${maxRetries} tentatives: ${lastError.message}`);
  }

  /**
   * Nettoie et formate le dialogue pour s'assurer des retours √† la ligne
   */
  private cleanAndFormatDialogue(text: string): string {
    if (!text) return text;

    // 1. Nettoyer les espaces multiples et retours √† la ligne
    let cleaned = text
      .replace(/\r\n/g, '\n')
      .replace(/\r/g, '\n')
      .replace(/\n\s*\n\s*\n/g, '\n\n') // Supprimer les lignes vides multiples
      .trim();

    // 2. FOR√áER les retours √† la ligne entre interlocuteurs - m√©thode plus agressive
    // Remplacer tous les patterns **Commercial :** ou **Prospect :** suivis directement d'un autre interlocuteur
    cleaned = cleaned.replace(/(\*\*Commercial\s*:\*\*[^]*?)(\*\*Prospect\s*:\*\*)/g, '$1\n\n$2');
    cleaned = cleaned.replace(/(\*\*Prospect\s*:\*\*[^]*?)(\*\*Commercial\s*:\*\*)/g, '$1\n\n$2');

    // 3. Si le texte ne contient pas de retours √† la ligne, les forcer
    if (!cleaned.includes('\n\n')) {
      // Diviser le texte en segments d'interlocuteurs
      const segments = cleaned.split(/(\*\*[^*]+\*\*)/);
      const formattedSegments: string[] = [];
      
      for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        if (segment.includes('**')) {
          // C'est un marqueur d'interlocuteur
          formattedSegments.push(segment);
        } else if (segment.trim()) {
          // C'est du contenu, l'ajouter
          formattedSegments.push(segment.trim());
        }
      }
      
      // Reconstruire avec des retours √† la ligne
      cleaned = '';
      for (let i = 0; i < formattedSegments.length; i += 2) {
        if (i + 1 < formattedSegments.length) {
          cleaned += formattedSegments[i] + ' ' + formattedSegments[i + 1];
        } else {
          cleaned += formattedSegments[i];
        }
        
        // Ajouter un retour √† la ligne si ce n'est pas le dernier segment
        if (i + 2 < formattedSegments.length) {
          cleaned += '\n\n';
        }
      }
    }

    // 4. Nettoyer les espaces en d√©but/fin de chaque ligne
    cleaned = cleaned
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0) // Supprimer les lignes vides
      .join('\n');

    // 5. Ajouter un retour √† la ligne entre chaque interlocuteur (m√©thode finale)
    const lines = cleaned.split('\n');
    const formattedLines: string[] = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const nextLine = lines[i + 1];
      
      formattedLines.push(line);
      
      // Si la ligne actuelle contient un interlocuteur et la suivante aussi, ajouter une ligne vide
      if (line.includes('**') && nextLine && nextLine.includes('**')) {
        formattedLines.push('');
      }
    }

    return formattedLines.join('\n');
  }
}