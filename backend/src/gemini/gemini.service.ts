import { Injectable, Logger } from '@nestjs/common';
import { GoogleGenerativeAI } from '@google/generative-ai';

@Injectable()
export class GeminiService {
  private readonly logger = new Logger(GeminiService.name);
  private genAI: GoogleGenerativeAI;

  constructor() {
    // Utiliser la cl√© API fournie
    this.genAI = new GoogleGenerativeAI('AIzaSyBg0L2VNRFAWcCnc1pj_tndLiaDrBQXm6I');
  }

  async restructureDialogue(transcription: string): Promise<string> {
    try {
      this.logger.log('ü§ñ D√©but de la restructuration du dialogue avec Gemini');
      
      const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

      const prompt = `
Tu es un expert en restructuration de transcriptions commerciales.
Ta mission : identifier les interlocuteurs et corriger le texte, SANS EXPLICATION.

R√àGLES D'IDENTIFICATION AUTOMATIQUE :
‚Ä¢ COMMERCIAL : vocabulaire professionnel ("je vous propose", "notre offre", "je vous envoie", "confirmation", "comme convenu", "parfait")
‚Ä¢ PROSPECT/CLIENT : r√©actions ("√ßa m'int√©resse", "je r√©fl√©chis", "d'accord", questions sur le produit)
‚Ä¢ Si incertain, la personne qui structure/pr√©sente = COMMERCIAL

INSTRUCTIONS :
1. Identifie automatiquement qui parle
2. Corrige les erreurs de transcription 
3. Compl√®te les phrases incompl√®tes
4. Supprime les h√©sitations (euh, hmm)
5. Am√©liore la ponctuation
6. AUCUN commentaire ni explication

FORMAT STRICT :
**Commercial :** [texte corrig√©]
**Prospect :** [texte corrig√©]

TRANSCRIPTION √Ä TRAITER :
${transcription}

R√âSULTAT :`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const restructuredText = response.text();

      this.logger.log('‚úÖ Restructuration termin√©e avec succ√®s');
      return restructuredText;

    } catch (error) {
      this.logger.error('‚ùå Erreur lors de la restructuration:', error);
      throw new Error(`Erreur de restructuration: ${error.message}`);
    }
  }

  async enhanceTranscription(transcription: string, context?: string): Promise<string> {
    try {
      this.logger.log('‚ú® Am√©lioration de la transcription avec contexte');
      
      const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

      const contextPrompt = context ? `CONTEXTE : ${context}\n\n` : '';

      const prompt = `
Tu es un expert en am√©lioration de transcriptions commerciales.
Ta mission est d'am√©liorer la qualit√© d'une transcription tout en pr√©servant son authenticit√©.

${contextPrompt}T√ÇCHES :
1. Corriger les erreurs de transcription automatique
2. Am√©liorer la ponctuation et la grammaire
3. Structurer les phrases de mani√®re claire
4. Pr√©server le ton et le style de chaque interlocuteur
5. Maintenir tous les d√©tails importants de la conversation

TRANSCRIPTION ORIGINALE :
${transcription}

TRANSCRIPTION AM√âLIOR√âE :`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const enhancedText = response.text();

      this.logger.log('‚úÖ Am√©lioration termin√©e avec succ√®s');
      return enhancedText;

    } catch (error) {
      this.logger.error('‚ùå Erreur lors de l\'am√©lioration:', error);
      throw new Error(`Erreur d'am√©lioration: ${error.message}`);
    }
  }

  async generateSummary(transcription: string): Promise<string> {
    try {
      this.logger.log('üìù G√©n√©ration du r√©sum√© de conversation');
      
      const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

      const prompt = `
G√©n√®re un r√©sum√© professionnel de cette conversation commerciale.

STRUCTURE DU R√âSUM√â :
## Points cl√©s abord√©s
- [Point 1]
- [Point 2]

## Int√©r√™ts du prospect
- [Int√©r√™t 1]
- [Int√©r√™t 2]

## Actions √† retenir
- [Action 1]
- [Action 2]

## Prochaines √©tapes sugg√©r√©es
- [√âtape 1]
- [√âtape 2]

CONVERSATION :
${transcription}

R√âSUM√â :`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const summary = response.text();

      this.logger.log('‚úÖ R√©sum√© g√©n√©r√© avec succ√®s');
      return summary;

    } catch (error) {
      this.logger.error('‚ùå Erreur lors de la g√©n√©ration du r√©sum√©:', error);
      throw new Error(`Erreur de g√©n√©ration de r√©sum√©: ${error.message}`);
    }
  }
}