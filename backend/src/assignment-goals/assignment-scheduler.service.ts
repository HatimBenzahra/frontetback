import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { PrismaService } from '../prisma/prisma.service';

@Injectable()
export class AssignmentSchedulerService {
  private readonly logger = new Logger(AssignmentSchedulerService.name);

  constructor(private prisma: PrismaService) {}

  /**
   * Cron job qui s'ex√©cute toutes les minutes pour v√©rifier et activer 
   * les assignations programm√©es dont la date de d√©but est arriv√©e
   */
  @Cron(CronExpression.EVERY_MINUTE)
  async activateScheduledAssignments() {
    try {
      const now = new Date();
      
      this.logger.debug('üîÑ V√©rification des assignations programm√©es...');

                // Trouver toutes les assignations futures qui devraient maintenant √™tre actives
          const assignmentsToActivate = await this.prisma.zoneAssignmentHistory.findMany({
            where: {
              startDate: {
                lte: now // Date de d√©but <= maintenant
              },
              endDate: {
                gt: now // Date de fin > maintenant (pas encore expir√©es)
              }
            }
          });

      if (assignmentsToActivate.length === 0) {
        this.logger.debug('üìù Aucune assignation √† activer');
        return;
      }

      let totalActivated = 0;

      for (const assignment of assignmentsToActivate) {
        // R√©cup√©rer les commerciaux √† activer pour cette assignation
        const commerciauxToActivate = await this.getCommercialsForAssignment(
          assignment.assignedToId,
          assignment.assignedToType,
          assignment.zoneId
        );

        if (commerciauxToActivate.length > 0) {
          // V√©rifier s'il y a des ZoneCommercial inactifs √† activer
          const inactiveZoneCommercials = await this.prisma.zoneCommercial.findMany({
            where: {
              zoneId: assignment.zoneId,
              commercialId: {
                in: commerciauxToActivate
              },
              isActive: false
            }
          });

          if (inactiveZoneCommercials.length > 0) {
            // Activer les ZoneCommercial correspondants
            const updateResult = await this.prisma.zoneCommercial.updateMany({
              where: {
                zoneId: assignment.zoneId,
                commercialId: {
                  in: commerciauxToActivate
                },
                isActive: false
              },
              data: {
                isActive: true
              }
            });

            totalActivated += updateResult.count;

            this.logger.log(
              `‚úÖ Assignation activ√©e: Zone ${assignment.zoneId} ‚Üí ${assignment.assignedToType} ${assignment.assignedToId} (${updateResult.count} commerciaux)`
            );
          }
        }
      }

      if (totalActivated > 0) {
        this.logger.log(`üéâ ${totalActivated} assignation(s) activ√©e(s) automatiquement`);
      }

    } catch (error) {
      this.logger.error('‚ùå Erreur lors de l\'activation des assignations programm√©es:', error);
    }
  }

  /**
   * Cron job qui s'ex√©cute toutes les heures pour d√©sactiver 
   * les assignations expir√©es
   */
  @Cron(CronExpression.EVERY_HOUR)
  async deactivateExpiredAssignments() {
    try {
      const now = new Date();
      
      this.logger.debug('üîÑ V√©rification des assignations expir√©es...');

      // Trouver toutes les assignations expir√©es
      const expiredAssignments = await this.prisma.zoneAssignmentHistory.findMany({
        where: {
          endDate: {
            lte: now // Date de fin <= maintenant
          }
        }
      });

      if (expiredAssignments.length === 0) {
        this.logger.debug('üìù Aucune assignation expir√©e √† d√©sactiver');
        return;
      }

      let totalDeactivated = 0;

      for (const assignment of expiredAssignments) {
        // R√©cup√©rer les commerciaux concern√©s par cette assignation expir√©e
        const commerciauxToDeactivate = await this.getCommercialsForAssignment(
          assignment.assignedToId,
          assignment.assignedToType,
          assignment.zoneId
        );

        if (commerciauxToDeactivate.length > 0) {
          // D√©sactiver tous les ZoneCommercial li√©s √† cette assignation
          const updateResult = await this.prisma.zoneCommercial.updateMany({
            where: {
              zoneId: assignment.zoneId,
              commercialId: {
                in: commerciauxToDeactivate
              },
              isActive: true
            },
            data: {
              isActive: false
            }
          });

          totalDeactivated += updateResult.count;

          this.logger.log(
            `‚è∞ Assignation expir√©e d√©sactiv√©e: Zone ${assignment.zoneId} ‚Üí ${assignment.assignedToType} ${assignment.assignedToId} (${updateResult.count} commerciaux)`
          );
        }
      }

      if (totalDeactivated > 0) {
        this.logger.log(`üïê ${totalDeactivated} assignation(s) expir√©e(s) d√©sactiv√©e(s) automatiquement`);
      }

    } catch (error) {
      this.logger.error('‚ùå Erreur lors de la d√©sactivation des assignations expir√©es:', error);
    }
  }

  /**
   * R√©cup√®re les IDs des commerciaux concern√©s par une assignation
   */
  private async getCommercialsForAssignment(
    assignedToId: string,
    assignedToType: string,
    zoneId: string
  ): Promise<string[]> {
    switch (assignedToType) {
      case 'COMMERCIAL':
        return [assignedToId];

      case 'EQUIPE':
        const equipe = await this.prisma.equipe.findUnique({
          where: { id: assignedToId },
          include: { commerciaux: true }
        });
        return equipe?.commerciaux.map(c => c.id) || [];

      case 'MANAGER':
        const manager = await this.prisma.manager.findUnique({
          where: { id: assignedToId },
          include: {
            equipes: {
              include: { commerciaux: true }
            }
          }
        });
        return manager?.equipes.flatMap(equipe => 
          equipe.commerciaux.map(c => c.id)
        ) || [];

      default:
        return [];
    }
  }

  /**
   * M√©thode utilitaire pour forcer l'activation manuelle des assignations
   * (utile pour les tests)
   */
  async forceActivateAssignments(): Promise<void> {
    this.logger.log('üîß Activation forc√©e des assignations programm√©es...');
    await this.activateScheduledAssignments();
  }

  /**
   * M√©thode utilitaire pour forcer la d√©sactivation des assignations expir√©es
   * (utile pour les tests)
   */
  async forceDeactivateExpired(): Promise<void> {
    this.logger.log('üîß D√©sactivation forc√©e des assignations expir√©es...');
    await this.deactivateExpiredAssignments();
  }
}