

# --- pages/admin/Dashboard/DashboardAdmin.tsx ---


import React, { useState, useEffect } from 'react';
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { cn } from '@/lib/utils';

// --- Imports des Composants ---
import StatCard from '@/components/ui-admin/StatCard';

import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { GenericBarChart } from '@/components/charts/GenericBarChart';
import { GenericRadialBarChart } from '@/components/ui-admin/GenericRadialBarChart';
import { Button } from '@/components/ui-admin/button';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover";
import { Calendar } from "@/components/ui-admin/calendar";
import { Badge } from "@/components/ui-admin/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Table, TableBody, TableCell, TableRow } from "@/components/ui-admin/table";

// --- Imports des Icônes ---
import { 
    BarChart3, Briefcase, FileSignature, Sparkles, Target, Calendar as CalendarIcon,
    Award, ClipboardCheck, Percent, UserCheck
} from 'lucide-react';

// --- Types pour les données du tableau de bord ---
type ActiviteRecenteItem = {
  id: number;
  commercial: string;
  action: string;
  type: string;
  temps: string;
};

interface DashboardStats {
  portesVisitees: number;
  rdvPris: number;
  contratsSignes: number;
  tauxOuverture: number;
  tauxRdv: number;
  tauxSignature: number;
  perfMoyenne: number;
  commerciauxActifs: number;
  heuresProspect: number;
}

interface ManagerStats {
  meilleurManager: string;
  tauxConclusionMoyen: number;
  rdvMoyen: number;
  effectifTotal: number;
}

interface ObjectifMensuel {
  value: number;
  total: number;
  title: string;
}

interface ChartData {
  name: string;
  [key: string]: string | number;
}

interface DashboardPeriodData {
  stats: DashboardStats;
  managerStats: ManagerStats;
  objectifMensuel: ObjectifMensuel;
  activiteRecente: ActiviteRecenteItem[];
  portesTopeesData: ChartData[];
  repartitionManagersData: ChartData[];
  classementManagersGraphData: ChartData[];
}

interface DashboardDataType {
  week: DashboardPeriodData;
  month: DashboardPeriodData;
  last_month: DashboardPeriodData;
  year_to_date: DashboardPeriodData;
  last_week: DashboardPeriodData;
  [key: string]: DashboardPeriodData; // Pour l'accès dynamique
}

// --- Données simulées enrichies ---
const dashboardData: DashboardDataType = {
  week: {
    stats: { portesVisitees: 82, rdvPris: 15, contratsSignes: 7, tauxOuverture: 18, tauxRdv: 18.3, tauxSignature: 46.7, perfMoyenne: 78, commerciauxActifs: 23, heuresProspect: 312 },
    managerStats: { meilleurManager: "Mme Martin", tauxConclusionMoyen: 42, rdvMoyen: 18, effectifTotal: 3 },
    objectifMensuel: { value: 7, total: 30, title: "Objectif Contrats (semaine)" },
    activiteRecente: [ { id: 1, commercial: "Alice Leroy", action: "Nouveau contrat", type: "CONTRAT", temps: "il y a 5 min" }, { id: 2, commercial: "Paul Girard", action: "RDV pris", type: "RDV", temps: "il y a 22 min" }, { id: 3, commercial: "Emma Bonnet", action: "Refus client", type: "REFUS", temps: "il y a 1h" }, { id: 4, commercial: "Hugo Moreau", action: "Nouveau contrat", type: "CONTRAT", temps: "il y a 2h" }, ],
    portesTopeesData: [{ name: 'Lun', Visites: 15, RDV: 3, Refus: 2 }, { name: 'Mar', Visites: 20, RDV: 4, Refus: 1 }, { name: 'Mer', Visites: 18, RDV: 2, Refus: 5 }, { name: 'Jeu', Visites: 25, RDV: 5, Refus: 3 }, { name: 'Ven', Visites: 4, RDV: 1, Refus: 1 }],
    repartitionManagersData: [{ name: 'M. Dupont', value: 40 }, { name: 'Mme Martin', value: 35 }, { name: 'M. Bernard', value: 25 }],
    classementManagersGraphData: [{ name: 'Dupont', value: 40 }, { name: 'Martin', value: 35 }, { name: 'Bernard', value: 32 }, { name: 'Robert', value: 28 }],
  },
  month: {
    stats: { portesVisitees: 450, rdvPris: 70, contratsSignes: 25, tauxOuverture: 15.5, tauxRdv: 15.5, tauxSignature: 35.7, perfMoyenne: 85, commerciauxActifs: 28, heuresProspect: 1248 },
    managerStats: { meilleurManager: "M. Dupont", tauxConclusionMoyen: 38, rdvMoyen: 85, effectifTotal: 5 },
    objectifMensuel: { value: 25, total: 100, title: "Objectif Contrats (mois)"},
    activiteRecente: [ { id: 1, commercial: "Sophie Marchand", action: "Nouveau contrat", type: "CONTRAT", temps: "hier" }, { id: 2, commercial: "Nicolas Blanc", action: "RDV pris", type: "RDV", temps: "hier" }, { id: 3, commercial: "Camille Picard", action: "RDV pris", type: "RDV", temps: "mardi" }, { id: 4, commercial: "Axel Garnier", action: "Refus client", type: "REFUS", temps: "mardi" }, ],
    portesTopeesData: [{ name: 'S1', Visites: 100, RDV: 15, Refus: 10 }, { name: 'S2', Visites: 120, RDV: 20, Refus: 15 }, { name: 'S3', Visites: 90, RDV: 18, Refus: 8 }, { name: 'S4', Visites: 140, RDV: 17, Refus: 12 }],
    repartitionManagersData: [{ name: 'M. Dupont', value: 150 }, { name: 'Mme Martin', value: 180 }, { name: 'M. Bernard', value: 120 }],
    classementManagersGraphData: [{ name: 'Martin', value: 180 }, { name: 'Dupont', value: 150 }, { name: 'Bernard', value: 120 }, { name: 'Robert', value: 110 }],
  },
  last_month: {} as DashboardPeriodData, 
  year_to_date: {} as DashboardPeriodData,
  last_week: {} as DashboardPeriodData,
};

dashboardData.last_month = dashboardData.month;
dashboardData.year_to_date = dashboardData.month;
dashboardData.last_week = dashboardData.week;

const ActivityBadge = ({ type }: { type: string }) => {
    switch (type) {
        case 'CONTRAT': return <Badge className="bg-emerald-100 text-emerald-800 border-emerald-300">Contrat</Badge>;
        case 'RDV': return <Badge className="bg-sky-100 text-sky-800 border-sky-300">RDV</Badge>;
        case 'REFUS': return <Badge className="bg-red-100 text-red-800 border-red-300">Refus</Badge>;
        default: return <Badge variant="secondary">{type}</Badge>;
    }
};

const CustomDatePicker = ({ onCancel, onValidate }: { onCancel: () => void; onValidate: (range: {from: Date, to: Date}) => void; }) => {
    const [startDate, setStartDate] = React.useState<Date | undefined>();
    const [endDate, setEndDate] = React.useState<Date | undefined>();
    return (
        <div className="flex flex-wrap items-center gap-2 rounded-lg border p-2 bg-background shadow-sm">
            <Popover>
                <PopoverTrigger asChild><Button variant="outline" className="w-[200px] font-normal justify-start text-left"><CalendarIcon className="mr-2 h-4 w-4" />{startDate ? format(startDate, 'd LLL y', { locale: fr }) : <span>Date de début</span>}</Button></PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={startDate} onSelect={setStartDate} initialFocus /></PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild><Button variant="outline" className="w-[200px] font-normal justify-start text-left"><CalendarIcon className="mr-2 h-4 w-4" />{endDate ? format(endDate, 'd LLL y', { locale: fr }) : <span>Date de fin</span>}</Button></PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={endDate} onSelect={setEndDate} initialFocus /></PopoverContent>
            </Popover>
            <Button className="bg-green-600 hover:bg-green-700" onClick={() => onValidate({ from: startDate!, to: endDate! })} disabled={!startDate || !endDate}>Valider</Button>
            <Button variant="ghost" onClick={onCancel}>Annuler</Button>
        </div>
    );
};

const TextStatCard = ({ title, value, Icon, color }: { title: string; value: string; Icon: React.ElementType; color?: string; }) => {
    return (
      <Card className="transition-transform duration-300 hover:scale-[1.03] hover:shadow-lg">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">{title}</CardTitle>
          <Icon className={cn("h-4 w-4 text-muted-foreground", color)} />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{value}</div>
        </CardContent>
      </Card>
    );
};


const DashboardAdmin = () => {
    const [timeFilter, setTimeFilter] = useState<keyof DashboardDataType>('week');
    const [activePreset, setActivePreset] = useState<keyof DashboardDataType | 'custom'>('week');
    const [isCustomMode, setIsCustomMode] = useState(false);
    const [displayRangeLabel, setDisplayRangeLabel] = useState<string | null>(null);

    const handleTimeFilterChange = (filterKey: keyof DashboardDataType) => {
        setActivePreset(filterKey);
        setDisplayRangeLabel(null);
        setTimeFilter(dashboardData[filterKey] ? filterKey : 'week');
    };

    const handleCustomValidate = (range: {from: Date, to: Date}) => {
        const newLabel = `${format(range.from, "d LLL y", { locale: fr })} - ${format(range.to, "d LLL y", { locale: fr })}`;
        setDisplayRangeLabel(newLabel);
        handleTimeFilterChange("year_to_date");
        setIsCustomMode(false);
        setActivePreset("custom");
    };

    useEffect(() => {
        const timer = setTimeout(() => {}, 1000);
        return () => clearTimeout(timer);
    }, []);

    const currentData = dashboardData[timeFilter] || dashboardData.week;

    return (
        <div className="space-y-8 bg-zinc-50/50 p-4 sm:p-6 rounded-xl">
            <div className="flex flex-wrap gap-4 justify-between items-center animate-in fade-in duration-500 border-b pb-4">
                <h2 className="text-2xl font-semibold flex items-baseline gap-3 text-zinc-900">
                    <BarChart3 className="h-6 w-6 text-primary self-center"/>
                    <span>Statistiques d'ensemble</span>
                    {displayRangeLabel && <span className="text-lg font-normal text-muted-foreground tracking-tight">({displayRangeLabel})</span>}
                </h2>
                {!isCustomMode ? (
                     <div className="flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'week' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair)))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('week')}>Cette semaine</Button>
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'month' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair)))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('month')}>Ce mois</Button>
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'last_month' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair)))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('last_month')}>Mois dernier</Button>
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'year_to_date' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair)))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('year_to_date')}>Cette année</Button>
                        <Button variant="ghost" className="border-l rounded-l-none" onClick={() => setIsCustomMode(true)}>Personnalisé</Button>
                     </div>
                ) : ( <CustomDatePicker onCancel={() => { setIsCustomMode(false); setActivePreset(timeFilter); }} onValidate={handleCustomValidate} /> )}
            </div>

            <section>
                <h3 className="text-lg font-semibold mb-4 text-zinc-900">Indicateurs Commerciaux</h3>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 animate-in fade-in-0 [animation-delay:100ms] duration-500">
                    <StatCard title="Contrats Signés" value={currentData.stats.contratsSignes} Icon={FileSignature} color="text-emerald-500" />
                    <StatCard title="RDV Pris" value={currentData.stats.rdvPris} Icon={Briefcase} color="text-sky-500" />
                    <StatCard title="Taux de Signature" value={currentData.stats.tauxSignature} Icon={Sparkles} suffix="%" color="text-violet-500" />
                    <StatCard title="Performance Moyenne" value={currentData.stats.perfMoyenne} Icon={Target} suffix="%" color="text-amber-500" />
                </div>
            </section>
            
            <section>
                <h3 className="text-lg font-semibold mb-4 text-zinc-900">Indicateurs Managers</h3>
                 <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 animate-in fade-in-0 [animation-delay:200ms] duration-500">
                    <TextStatCard title="Meilleur Manager" value={currentData.managerStats.meilleurManager} Icon={Award} color="text-yellow-500" />
                    <StatCard title="Taux Conclusion Moyen" value={currentData.managerStats.tauxConclusionMoyen} Icon={Percent} suffix="%" color="text-green-500" />
                    <StatCard title="RDV Moyen / Manager" value={currentData.managerStats.rdvMoyen} Icon={ClipboardCheck} color="text-blue-500" />
                    <StatCard title="Effectif total des managers" value={currentData.managerStats.effectifTotal} Icon={UserCheck} color="text-indigo-500" />
                </div>
            </section>

            <section className="grid grid-cols-1 lg:grid-cols-3 gap-6 animate-in fade-in-0 [animation-delay:300ms] duration-500">
                <GenericRadialBarChart title={currentData.objectifMensuel.title} value={currentData.objectifMensuel.value} total={currentData.objectifMensuel.total} color="fill-emerald-500" />
                <div className="lg:col-span-2">
                    <Card className="h-full"><CardHeader><CardTitle>Flux d'activité récent</CardTitle><CardDescription>Les dernières actions importantes enregistrées.</CardDescription></CardHeader>
                        <CardContent><Table><TableBody>
                            {currentData.activiteRecente.map((item: ActiviteRecenteItem) => (
                                <TableRow key={item.id} className="animate-in fade-in slide-in-from-bottom-2 duration-700">
                                    <TableCell><div className="font-medium">{item.commercial}</div></TableCell>
                                    <TableCell><ActivityBadge type={item.type} /></TableCell>
                                    <TableCell className="text-right text-muted-foreground">{item.temps}</TableCell>
                                </TableRow>
                            ))}
                        </TableBody></Table></CardContent>
                    </Card>
                </div>
            </section>
            
            <section className="animate-in fade-in-0 [animation-delay:400ms] duration-500">
                 <GenericBarChart title="Performances par Manager (Portes Prospectées)" data={currentData.classementManagersGraphData} xAxisDataKey="name" barDataKey="value" fillColor={() => 'hsl(var(--chart-1))'}/>
            </section>

            <section className="grid gap-6 md:grid-cols-2 lg:grid-cols-7 animate-in fade-in-0 [animation-delay:500ms] duration-500">
                <div className="lg:col-span-4">
                  <GenericLineChart title="Activité de prospection" data={currentData.portesTopeesData} xAxisDataKey="name" lines={[ { dataKey: 'Visites', name: "Visites", stroke: 'hsl(var(--chart-1))' }, { dataKey: 'RDV', name: "RDV", stroke: 'hsl(var(--chart-2))' }, { dataKey: 'Refus', name: "Refus", stroke: 'hsl(var(--chart-3))' } ]}/>
                </div>
                <div className="lg:col-span-3">
                  <GenericPieChart title="Répartition des Visites par Manager" data={currentData.repartitionManagersData} dataKey="value" nameKey="name" colors={['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-4))']}/>
                </div>
            </section>
        </div>
    );
};

export default DashboardAdmin;


# --- pages/commercial/prospection/ProspectingDoorsPage.tsx ---
// src/pages/commercial/ProspectingDoorsPage.tsx
import { useState, useMemo, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui-admin/card';
import { DataTable } from '@/components/data-table/DataTable';
import { createDoorsColumns, type Porte, statusConfig, statusList, type PorteStatus } from './doors-columns';
import { ArrowLeft, Building } from 'lucide-react';
import { Input } from '@/components/ui-admin/input';
import { Button } from '@/components/ui-admin/button';
import { Skeleton } from '@/components/ui-admin/skeleton';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from '@/components/ui-admin/dialog';
import { Label } from '@/components/ui-admin/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui-admin/select';
import { Checkbox } from '@/components/ui-admin/checkbox';
import { immeubleService, type ImmeubleDetailsFromApi } from '@/services/immeuble.service';
import { porteService } from '@/services/porte.service';
import { cn } from '@/lib/utils';


const LoadingSkeleton = () => (
    <div className="container mx-auto py-8">
        <Skeleton className="h-10 w-48 mb-4" />
        <Card>
            <CardHeader>
                <Skeleton className="h-8 w-3/4" />
                <Skeleton className="h-4 w-1/2 mt-2" />
            </CardHeader>
            <CardContent>
                <div className="space-y-2">
                    <Skeleton className="h-12 w-full" />
                    <Skeleton className="h-12 w-full" />
                    <Skeleton className="h-12 w-full" />
                </div>
            </CardContent>
        </Card>
    </div>
);

const ProspectingDoorsPage = () => {
    const { buildingId } = useParams<{ buildingId: string }>();
    const navigate = useNavigate();
    const [building, setBuilding] = useState<ImmeubleDetailsFromApi | null>(null);
    const [portes, setPortes] = useState<Porte[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingDoor, setEditingDoor] = useState<Porte | null>(null);
    const [isSaving, setIsSaving] = useState(false);
    const [saveError, setSaveError] = useState<string | null>(null);

    useEffect(() => {
        if (!buildingId) return;
        immeubleService.getImmeubleDetails(buildingId).then(details => {
            if (details) {
                setBuilding(details);
                const portesFromAPI = details.portes.map(p => ({
                    id: p.id,
                    numero: p.numeroPorte,
                    statut: p.statut as PorteStatus,
                    commentaire: p.commentaire || "",
                    repassage: p.passage > 0, // Ou une autre logique si nécessaire
                    passage: p.passage,
                    nbPassages: p.nbPassages,
                }));
                setPortes(portesFromAPI);
            }
            setIsLoading(false);
        }).catch(error => {
            console.error("Erreur lors du chargement des détails de l'immeuble:", error);
            setIsLoading(false);
        });
    }, [buildingId]);

    const handleEdit = (doorId: string) => {
        const doorToEdit = portes.find(p => p.id === doorId);
        if (doorToEdit) {
            setEditingDoor(doorToEdit);
            setIsModalOpen(true);
        }
    };

    const handleSaveDoor = async (updatedDoor: Porte) => {
        setIsSaving(true);
        setSaveError(null);
        try {
            await porteService.updatePorte(updatedDoor.id, {
                status: updatedDoor.statut,
                commentaire: updatedDoor.commentaire,
                nbPassages: updatedDoor.nbPassages,
                repassage: updatedDoor.repassage,
            });
            setPortes(portes.map(p => p.id === updatedDoor.id ? updatedDoor : p));
            setIsModalOpen(false);
            setEditingDoor(null);
        } catch (error) {
            setSaveError("Erreur lors de la sauvegarde. Veuillez réessayer.");
            console.error("Erreur lors de la mise à jour de la porte:", error);
        } finally {
            setIsSaving(false);
        }
    };

    const columns = useMemo(() => createDoorsColumns(handleEdit), []);

    if (isLoading) {
        return <LoadingSkeleton />;
    }

    if (!building) {
        return (
            <div className="container mx-auto py-8 text-center">
                <h2 className="text-xl font-semibold">Immeuble non trouvé</h2>
                <p className="text-muted-foreground mt-2">Impossible de charger les détails pour cet immeuble.</p>
                <Button variant="outline" onClick={() => navigate('/commercial/prospecting')} className="mt-4">
                    Retour à la sélection
                </Button>
            </div>
        );
    }

    return (
        <div className="container mx-auto py-8">
            <Button variant="outline" onClick={() => navigate(`/commercial/prospecting/setup/${buildingId}`)} className="mb-4">
                <ArrowLeft className="mr-2 h-4 w-4" /> Retour au choix du mode
            </Button>
            <Card>
                <CardHeader>
                    <CardTitle className="text-2xl flex items-center gap-3">
                        <Building className="h-6 w-6 text-primary" />
                        Prospection : {building.adresse}
                    </CardTitle>
                    <CardDescription>
                        Voici la liste des {building.nbPortesTotal} portes à prospecter. Mettez à jour leur statut au fur et à mesure.
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <DataTable
                        title="Portes"
                        columns={columns}
                        data={portes}
                        filterColumnId="numero"
                        filterPlaceholder="Rechercher un n° de porte..."
                        isDeleteMode={false}
                        onAddEntity={() => {}}
                        onConfirmDelete={() => {}}
                        onToggleDeleteMode={() => {}}
                        rowSelection={{}}
                        setRowSelection={() => {}}
                    />
                </CardContent>
            </Card>

            {editingDoor && (
                <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
                    <DialogContent className="sm:max-w-[425px] bg-white">
                        <DialogHeader>
                            <DialogTitle>Éditer la Porte n°{editingDoor.numero}</DialogTitle>
                            <CardDescription>
                                Mettez à jour les informations de cette porte.
                            </CardDescription>
                        </DialogHeader>
                        <div className="grid gap-6 py-4">
                            <div className="grid grid-cols-1 gap-3">
                                <Label htmlFor="statut">Statut</Label>
                                <Select
                                    value={editingDoor.statut}
                                    onValueChange={(value) => setEditingDoor({ ...editingDoor, statut: value as PorteStatus })}
                                >
                                    <SelectTrigger id="statut">
                                        <SelectValue>
                                            {editingDoor.statut ? (
                                                <div className="flex items-center gap-2">
                                                    <span className={cn("h-2 w-2 rounded-full", statusConfig[editingDoor.statut]?.className)} />
                                                    <span>{editingDoor.statut}</span>
                                                </div>
                                            ) : (
                                                "Sélectionner un statut"
                                            )}
                                        </SelectValue>
                                    </SelectTrigger>
                                    <SelectContent position="popper">
                                        {statusList.map((status) => {
                                            const config = statusConfig[status];
                                            const Icon = config.icon;
                                            return (
                                                <SelectItem key={status} value={status}>
                                                    <div className="flex items-center gap-2">
                                                        <Icon className={cn("h-4 w-4", config.className)} />
                                                        <span>{status}</span>
                                                    </div>
                                                </SelectItem>
                                            );
                                        })}
                                    </SelectContent>
                                </Select>
                            </div>
                            <div className="grid grid-cols-1 gap-3">
                                <Label htmlFor="commentaire">Commentaire</Label>
                                <Input
                                    id="commentaire"
                                    value={editingDoor.commentaire}
                                    onChange={(e) => setEditingDoor({ ...editingDoor, commentaire: e.target.value })}
                                    placeholder="Ajouter un commentaire..."
                                />
                            </div>
                            <div className="grid grid-cols-2 items-center gap-4">
                                <div className="flex items-center gap-2">
                                    <Checkbox
                                        id="repassage"
                                        checked={editingDoor.repassage}
                                        onCheckedChange={(checked) => setEditingDoor({ ...editingDoor, repassage: checked as boolean })}
                                    />
                                    <Label htmlFor="repassage" className="font-medium">À repasser</Label>
                                </div>
                                <div className="grid grid-cols-2 items-center gap-2">
                                    <Label htmlFor="nbPassages" className="text-right">Passages</Label>
                                    <Input
                                        id="nbPassages"
                                        type="number"
                                        min="0"
                                        value={editingDoor.nbPassages}
                                        onChange={(e) => setEditingDoor({ ...editingDoor, nbPassages: parseInt(e.target.value, 10) || 0 })}
                                        className="w-full"
                                    />
                                </div>
                            </div>
                        </div>
                        <DialogFooter>
                            <DialogClose asChild>
                                <Button type="button" variant="secondary" className="bg-gray-200 text-black hover:bg-gray-300">Annuler</Button>
                            </DialogClose>
                            <Button type="submit" onClick={() => handleSaveDoor(editingDoor)} className="bg-green-600 text-white hover:bg-green-700" disabled={isSaving}>
                                {isSaving ? "Enregistrement..." : "Enregistrer"}
                            </Button>
                        </DialogFooter>
                        {saveError && <p className="text-red-500 text-sm mt-2">{saveError}</p>}
                    </DialogContent>
                </Dialog>
            )}
        </div>
    );
};

export default ProspectingDoorsPage;


# --- pages/admin/zones/ZoneCreatorModal.tsx ---
// frontend-shadcn/src/pages/admin/zones/ZoneCreatorModal.tsx

import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Circle, Marker, useMapEvents, Popup, useMap, FeatureGroup } from 'react-leaflet';
import type { FeatureGroup as FeatureGroupType, LatLng } from 'leaflet';
import L from 'leaflet';
import 'leaflet-geosearch/dist/geosearch.css';
import { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Label } from '@/components/ui-admin/label';
import { Check, X, RotateCcw, MousePointerClick } from 'lucide-react';
import type { Zone as ZoneTableType } from './columns';

// --- Patch Leaflet et icônes ---
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});
const searchMarkerIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(206, 92%, 52%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search-code"><path d="M15.5 15.5 20 20"/><path d="M9 13a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z"/><path d="m14 14-2.5 2.5"/><path d="m14 6-2.5-2.5"/><path d="m6 14-2.5 2.5"/><path d="m6 6 2.5-2.5"/></svg>'),
    iconSize: [32, 32], iconAnchor: [16, 32], popupAnchor: [0, -32],
});
const zoneCenterIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(222.2 47.4% 11.2%)" stroke="white" stroke-width="2"><circle cx="12" cy="12" r="6"/></svg>'),
    iconSize: [16, 16], iconAnchor: [8, 8], popupAnchor: [0, -8],
});

interface ZoneCreatorModalProps {
  onValidate: (data: { id?: string; center: LatLng; radius: number; name: string; color: string; }) => void;
  onClose: () => void;
  existingZones: ZoneTableType[]; 
  zoneToEdit?: ZoneTableType | null;
}

const MapEventsHandler = ({ onMapClick, onMouseMove, step }: any) => {
    useMapEvents({
        click: (e) => { if (step === 1) onMapClick(e.latlng, 2); else if (step === 2) onMapClick(e.latlng, 3); },
        mousemove: (e) => { if (step === 2) onMouseMove(e.latlng); }
    });
    return null;
};
const SearchControl = () => {
    const map = useMap();
    useEffect(() => {
        const provider = new OpenStreetMapProvider({ params: { countrycodes: 'fr', 'accept-language': 'fr' } });
        // @ts-ignore
        const searchControl = new GeoSearchControl({ provider: provider, style: 'bar', marker: { icon: searchMarkerIcon, draggable: false, }, showPopup: false, autoClose: true, retainZoomLevel: false, animateZoom: true, keepResult: true, searchLabel: 'Entrez une adresse...', updateMap: false, });
        const onLocationFound = (event: any) => { if (event.location && event.location.y && event.location.x) { map.flyTo(new L.LatLng(event.location.y, event.location.x), 14, { animate: true, duration: 1.5 }); } };
        map.addControl(searchControl);
        map.on('geosearch/showlocation', onLocationFound);
        return () => { map.removeControl(searchControl); map.off('geosearch/showlocation', onLocationFound); };
    }, [map]);
    return null;
};

// MODIFICATION : Logique de centrage de la carte améliorée
const MapBoundsFitter = ({ featureGroupRef, zones, zoneToEdit }: { featureGroupRef: React.RefObject<FeatureGroupType | null>; zones: ZoneTableType[]; zoneToEdit: ZoneTableType | null; }) => {
    const map = useMap();
    useEffect(() => {
        // En mode édition, la carte est déjà centrée via le state `center` du composant parent.
        if (zoneToEdit) return;

        // En mode ajout, on centre sur les zones existantes.
        if (!featureGroupRef.current || zones.length === 0) {
            map.setView([48.8566, 2.3522], 12); // Fallback sur Paris si aucune zone
            return;
        }

        const bounds = featureGroupRef.current.getBounds();
        if (bounds.isValid()) {
            map.fitBounds(bounds, { padding: [50, 50] });
        } else if (zones.length > 0) {
            // Fallback si les limites ne sont pas valides (ex: 1 seule zone), on centre dessus.
            map.setView(zones[0].latlng, 13);
        }
    }, [zones, featureGroupRef, map, zoneToEdit]); 
    return null;
};

const ZoneMarker = ({ zone }: { zone: { latlng: L.LatLngExpression } }) => {
    const map = useMap();
    const handleDoubleClick = () => { map.flyTo(zone.latlng, 15, { animate: true, duration: 1.5 }); };
    return ( <Marker position={zone.latlng} icon={zoneCenterIcon} eventHandlers={{ dblclick: handleDoubleClick }} /> );
};

export const ZoneCreatorModal = ({ onValidate, onClose, existingZones, zoneToEdit }: ZoneCreatorModalProps) => {
    const isEditMode = !!zoneToEdit;

    const [center, setCenter] = useState<L.LatLng | null>(isEditMode ? L.latLng(zoneToEdit.latlng[0], zoneToEdit.latlng[1]) : null);
    const [radius, setRadius] = useState(isEditMode ? zoneToEdit.radius : 0);
    const [step, setStep] = useState(isEditMode ? 2 : 1);
    const [zoneName, setZoneName] = useState(isEditMode ? zoneToEdit.name : '');
    const [zoneColor, setZoneColor] = useState(isEditMode ? zoneToEdit.color : '#3388ff');
    
    const featureGroupRef = useRef<FeatureGroupType>(null);

    const handleMapClick = (latlng: L.LatLng, nextStep: number) => {
        if (step === 1) {
            setCenter(latlng);
        }
        setStep(nextStep);
    };

    const handleMouseMove = (latlng: L.LatLng) => { 
        if (center) {
            setRadius(center.distanceTo(latlng)); 
        }
    };
    
    const handleReset = () => { 
        setCenter(null); 
        setRadius(0); 
        setStep(1); 
        setZoneName(''); 
        setZoneColor('#3388ff'); 
    };

    const handleValidate = () => {
        if (center && zoneName && radius > 0) {
            onValidate({
                id: zoneToEdit?.id, center, radius, name: zoneName, color: zoneColor
            });
        }
    };
    
    return (
        <div className="fixed inset-0 z-[100] bg-black/80 flex flex-col p-4 animate-in fade-in-0">
             <div className="flex-1 w-full relative">
                <MapContainer center={center ? [center.lat, center.lng] : [48.8566, 2.3522]} zoom={13} style={{ height: '100%', width: '100%', borderRadius: '0.5rem', cursor: step < 3 ? 'crosshair' : 'default' }}>
                    <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution='© OpenStreetMap' />
                    <SearchControl />
                    <MapEventsHandler onMapClick={handleMapClick} onMouseMove={handleMouseMove} step={step} />
                    {/* MODIFICATION : On passe zoneToEdit pour une logique de centrage plus intelligente */}
                    <MapBoundsFitter featureGroupRef={featureGroupRef} zones={existingZones} zoneToEdit={zoneToEdit ?? null} />
                    <FeatureGroup ref={featureGroupRef}>
                        {/* Cette logique affiche bien les zones existantes, en excluant celle en cours d'édition */}
                        {existingZones.filter(z => z.id !== zoneToEdit?.id).map(zone => (
                            <React.Fragment key={`existing-${zone.id}`}>
                                <Circle center={zone.latlng} radius={zone.radius} pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2, weight: 2, dashArray: '5, 5' }} >
                                    <Popup><b>{zone.name}</b> (existante)</Popup>
                                </Circle>
                                <ZoneMarker zone={zone} />
                            </React.Fragment>
                        ))}
                    </FeatureGroup>
                    {center && <Marker position={center} />}
                    {center && radius > 0 && <Circle center={center} radius={radius} pathOptions={{ color: zoneColor, fillColor: zoneColor, fillOpacity: 0.35 }} />}
                </MapContainer>
                
                <div className="absolute top-4 left-4 z-[1000] bg-white p-4 rounded-lg shadow-xl w-full max-w-sm">
                    <div className="flex justify-between items-center mb-2">
                        <h3 className="font-semibold text-lg">
                            {isEditMode ? "Modifier la Zone" : step === 1 ? "Étape 1: Définir le centre" : step === 2 ? "Étape 2: Définir le rayon" : "Étape 3: Nommer la zone"}
                        </h3>
                        <Button variant="ghost" size="icon" onClick={handleReset} title="Recommencer le tracé"><RotateCcw className="h-4 w-4" /></Button>
                    </div>
                    {step < 3 && (
                        <p className="text-sm text-muted-foreground flex items-center gap-2"><MousePointerClick className="h-4 w-4"/>
                            {step === 1 ? 'Cliquez pour placer le centre.' : 'Déplacez pour ajuster, puis cliquez pour fixer le rayon.'}
                        </p>
                    )}
                    {step >= 2 && (
                        <div className="space-y-3 animate-in fade-in-0 pt-2">
                            <div className="space-y-1"><Label htmlFor="zone-name">Nom de la zone</Label><Input id="zone-name" value={zoneName} onChange={e => setZoneName(e.target.value)} placeholder="Ex: Zone Commerciale Nord"/></div>
                            <div className="space-y-1">
                                <Label htmlFor="zone-color">Couleur de la zone</Label>
                                <Input id="zone-color" type="color" value={zoneColor} onChange={e => setZoneColor(e.target.value)} />
                            </div>
                        </div>
                    )}
                </div>

                <div className="absolute top-4 right-4 z-[1000] flex flex-col gap-2">
                    <Button onClick={handleValidate} className="bg-green-600 text-white hover:bg-green-700" disabled={!center || radius <= 0 || !zoneName}>
                        <Check className="mr-2 h-4 w-4" />{isEditMode ? "Enregistrer" : "Valider"}
                    </Button>
                    <Button onClick={onClose} variant="secondary" className="bg-white hover:bg-zinc-100">
                        <X className="mr-2 h-4 w-4" />Fermer
                    </Button>
                </div>
            </div>
        </div>
    );
};


# --- components/data-table/DataTable.tsx ---
import * as React from "react"
import { useNavigate } from "react-router-dom"
import {
  type ColumnDef, type ColumnFiltersState, type SortingState, type RowSelectionState, type Row,
  flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel,
  getSortedRowModel, useReactTable,
} from "@tanstack/react-table"
import { PlusCircle, Search, Trash2, XCircle } from "lucide-react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui-admin/table"
import { Button } from "@/components/ui-admin/button"
import { Input } from "@/components/ui-admin/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui-admin/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select"
import { cn } from "@/lib/utils"

interface DataTableProps<TData extends { id: string }, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  filterColumnId: string
  filterPlaceholder: string
  title: string
  rowLinkBasePath?: string
  onRowClick?: (row: TData) => void
  addEntityButtonText?: string
  onAddEntity?: () => void
  isDeleteMode: boolean
  onToggleDeleteMode: () => void
  onConfirmDelete: (selectedRows: TData[]) => void
  rowSelection: RowSelectionState
  setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>>
  customHeaderContent?: React.ReactNode
  noCardWrapper?: boolean;
}

export function DataTable<TData extends { id: string }, TValue>({
  columns, data, filterColumnId, filterPlaceholder, title, rowLinkBasePath, onRowClick,
  addEntityButtonText, onAddEntity,
  isDeleteMode, onToggleDeleteMode, onConfirmDelete,
  rowSelection, setRowSelection,
  customHeaderContent,
  noCardWrapper = false,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])
  const [searchFocused, setSearchFocused] = React.useState(false)
  const navigate = useNavigate()

  const table = useReactTable({
    data, columns, onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters, onRowSelectionChange: setRowSelection,
    getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(), getFilteredRowModel: getFilteredRowModel(),
    state: { sorting, columnFilters, rowSelection },
  })

  const selectedRowsData = table.getFilteredSelectedRowModel().rows.map(row => row.original)
  const areRowsClickable = (onRowClick || rowLinkBasePath) && !isDeleteMode

  const handleRowClick = (row: Row<TData>) => {
    if (isDeleteMode) {
      row.toggleSelected()
    } else if (onRowClick) {
      onRowClick(row.original)
    } else if (rowLinkBasePath) {
      navigate(`${rowLinkBasePath}/${row.original.id}`)
    }
  }

  const tableContent = (
    <>
      {title && (
        <CardHeader>
          <CardTitle>{title}</CardTitle>
        </CardHeader>
      )}
      
      <CardContent className={!title ? "pt-6" : ""}>
        <div className="flex flex-wrap items-center justify-between gap-4 mb-4">
          <div className={cn(
            "relative w-full md:w-auto transition-all",
            searchFocused ? "ring-2 ring-primary/30 rounded-md" : "",
          )}>
            <Search className={cn(
              "absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 transition-all",
              searchFocused ? "text-primary" : "text-muted-foreground"
            )} />
            <Input
              placeholder={filterPlaceholder}
              value={(table.getColumn(filterColumnId)?.getFilterValue() as string) ?? ""}
              onChange={e=>table.getColumn(filterColumnId)?.setFilterValue(e.target.value)}
              className="pl-10 w-full min-w-[280px] md:min-w-[320px]"
              onFocus={()=>setSearchFocused(true)}
              onBlur={()=>setSearchFocused(false)}
              aria-label="Rechercher"
            />
          </div>

          <div className="flex flex-wrap items-center gap-2">
            {customHeaderContent}
            {!isDeleteMode ? (
              <>
                {addEntityButtonText && (
                  <Button onClick={onAddEntity} className="bg-black text-white hover:bg-zinc-800 focus:ring-2 focus:ring-black/40 focus:outline-none">
                    <PlusCircle className="mr-2 h-4 w-4" />{addEntityButtonText}
                  </Button>
                )}
                <Button variant="outline" onClick={onToggleDeleteMode} className="focus:ring-2 focus:ring-destructive/30 focus:outline-none">
                  <Trash2 className="mr-2 h-4 w-4" />Supprimer
                </Button>
              </>
            ) : (
              <>
                <Button variant="destructive" disabled={selectedRowsData.length===0} onClick={()=>onConfirmDelete(selectedRowsData)} className="bg-red-600 text-white hover:bg-red-700 border border-red-600 focus:ring-2 focus:ring-red-400 focus:outline-none">
                  <Trash2 className="mr-2 h-4 w-4" />Supprimer ({selectedRowsData.length})
                </Button>
                <Button variant="outline" onClick={onToggleDeleteMode} className="focus:ring-2 focus:ring-muted/30 focus:outline-none">
                  <XCircle className="mr-2 h-4 w-4" />Annuler
                </Button>
              </>
            )}
          </div>
        </div>
        
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map(headerGroup=>(
              <TableRow key={headerGroup.id} className="border-b-[#EFEDED] hover:bg-transparent">
                {headerGroup.headers.map(header=>(
                  <TableHead key={header.id} className={cn("h-12 px-4 text-base font-semibold text-gray-600 bg-muted/50", (header.column.columnDef.meta as { className?: string })?.className)}>
                    {header.isPlaceholder?null:flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows.length?table.getRowModel().rows.map((row,index)=>(
              <TableRow key={row.id} data-state={row.getIsSelected()&&"selected"} onClick={()=>handleRowClick(row)} className={cn(
                "group border-b-[#EFEDED] animate-in fade-in-0 slide-in-from-bottom-2 transition",
                areRowsClickable?"cursor-pointer":"select-none",
                row.getIsSelected()&&isDeleteMode?"bg-red-50":row.getIsSelected()?"bg-blue-50":""
              )} style={{animationDelay:`${index*30}ms`}}>
                {row.getVisibleCells().map(cell=>(
                  <TableCell key={cell.id} className={cn("group-hover:bg-zinc-100 transition-colors duration-150 py-4 px-4", (cell.column.columnDef.meta as { className?: string })?.className)}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            )):(
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center text-gray-400">
                  <span className="flex flex-col items-center justify-center gap-2">
                    <Search className="mx-auto h-8 w-8 opacity-30" />
                    <span>Aucun résultat trouvé.</span>
                  </span>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
        
        <div className="flex flex-col-reverse sm:flex-row items-center justify-between gap-4 pt-4">
          <div className="text-sm text-muted-foreground">
            {isDeleteMode?`${table.getFilteredSelectedRowModel().rows.length} sélectionné(s) sur ${table.getFilteredRowModel().rows.length} visible(s)`:
            `${table.getFilteredRowModel().rows.length} ligne(s) affichée(s)`}
          </div>
          <div className="flex items-center justify-center sm:justify-end flex-wrap gap-4">
            <Select value={`${table.getState().pagination.pageSize}`} onValueChange={v=>table.setPageSize(Number(v))}>
              <SelectTrigger className="w-[140px] md:w-[160px] min-w-[140px]"><SelectValue placeholder={`${table.getState().pagination.pageSize} par page`}/></SelectTrigger>
              <SelectContent>{[10,20,30,40,50].map(ps=><SelectItem key={ps} value={`${ps}`}>{ps} par page</SelectItem>)}</SelectContent>
            </Select>
            <div className="flex items-center space-x-2 rounded-lg border px-3 py-1 bg-gray-50 min-w-[180px]">
              <div className="text-sm font-medium">Page {table.getState().pagination.pageIndex+1} sur {table.getPageCount()}</div>
              <Button variant="outline" size="sm" onClick={()=>table.previousPage()} disabled={!table.getCanPreviousPage()}>Précédent</Button>
              <Button variant="outline" size="sm" onClick={()=>table.nextPage()} disabled={!table.getCanNextPage()}>Suivant</Button>
            </div>
          </div>
        </div>
      </CardContent>
    </>
  );

  if (noCardWrapper) {
    return tableContent;
  }
  
  return (
    <Card>
      {tableContent}
    </Card>
  )
}


# --- pages/admin/immeubles/portes/ImmeubleDetailsPage.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/portes/ImmeubleDetailsPage.tsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { 
    ArrowLeft, Building, Users, Check, MoveUpRight, KeyRound 
} from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Skeleton } from '@/components/ui-admin/skeleton';
import { DataTable } from '@/components/data-table/DataTable';
import type { Porte } from './portes-columns';
import { createPortesColumns } from './portes-columns';
import { GenericRadialBarChart } from '@/components/ui-admin/GenericRadialBarChart';
import { immeubleService } from '@/services/immeuble.service';

// Types locaux pour la clarté du composant
interface Prospector {
    id: string;
    nom: string;
}

interface ImmeubleDetails {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  prospectors: Prospector[];
  prospectingMode: 'SOLO' | 'DUO';
  hasElevator: boolean;
  digicode: string | null;
  nbPortesTotal: number;
  portes: Porte[];
  stats: {
    contratsSignes: number;
    rdvPris: number;
  };
}

// --- Composants UI ---
const ProspectorBadge = ({ Icon, label, prospectors }: { Icon: React.ElementType, label: string, prospectors: Prospector[] }) => (
    <div className="flex items-start gap-3 rounded-lg border bg-card p-3 h-full">
        <div className="bg-muted p-2 rounded-md"><Icon className="h-5 w-5 text-muted-foreground" /></div>
        <div className="flex flex-col gap-1.5">
            <div className="text-sm text-muted-foreground">{label}</div>
            <div className="text-base font-semibold flex flex-col items-start">
                {prospectors.map(p => (
                    <Link key={p.id} to={`/admin/commerciaux/${p.id}`} className="hover:underline hover:text-primary">
                        {p.nom}
                    </Link>
                ))}
            </div>
        </div>
    </div>
);

const InfoBadge = ({ Icon, label, value }: { Icon: React.ElementType, label: string, value: string | React.ReactNode }) => (
    <div className="flex items-center gap-3 rounded-lg border bg-card p-3 h-full">
        <div className="bg-muted p-2 rounded-md"><Icon className="h-5 w-5 text-muted-foreground" /></div>
        <div>
            <div className="text-sm text-muted-foreground">{label}</div>
            <div className="text-base font-semibold">{value}</div>
        </div>
    </div>
);


const ImmeubleDetailsPage = () => {
    const { immeubleId } = useParams<{ immeubleId: string }>();
    const navigate = useNavigate();
    const [immeuble, setImmeuble] = useState<ImmeubleDetails | null>(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (immeubleId) {
            fetchData(immeubleId);
        }
    }, [immeubleId]);

    const fetchData = async (id: string) => {
        setLoading(true);
        try {
            const detailsFromApi = await immeubleService.getImmeubleDetails(id);

            const formattedDetails: ImmeubleDetails = {
                id: detailsFromApi.id,
                adresse: detailsFromApi.adresse,
                ville: detailsFromApi.ville,
                codePostal: detailsFromApi.codePostal,
                prospectors: (detailsFromApi.prospectors || []).map(p => ({
                    id: p.id,
                    nom: `${p.prenom} ${p.nom}`
                })),
                prospectingMode: detailsFromApi.prospectingMode,
                hasElevator: detailsFromApi.hasElevator,
                digicode: detailsFromApi.digicode,
                nbPortesTotal: detailsFromApi.nbPortesTotal,
                portes: (detailsFromApi.portes || []).map(p => {
                    let statusText: Porte['statut'] = 'Non visité';
                    switch(p.statut) {
                        case 'VISITE': statusText = 'Visité'; break;
                        case 'ABSENT': statusText = 'Absent'; break;
                        case 'REFUS': statusText = 'Refus'; break;
                        case 'CURIEUX': statusText = 'Curieux'; break;
                        case 'CONTRAT_SIGNE': statusText = 'Contrat signé'; break;
                    }
                    return {
                        id: p.id,
                        numeroPorte: p.numeroPorte,
                        statut: statusText,
                        passage: p.passage,
                        commentaire: p.commentaire || '',
                    }
                }),
                stats: detailsFromApi.stats,
            };
            setImmeuble(formattedDetails);
        } catch (error) {
            console.error("Erreur de chargement des détails:", error);
            setImmeuble(null);
        } finally {
            setLoading(false);
        }
    };

    const portesData = useMemo(() => {
        if (!immeuble) return [];
        const visitesMap = new Map(immeuble.portes.map(p => [p.numeroPorte, p]));
        const allPortes: Porte[] = [];
        for (let i = 1; i <= immeuble.nbPortesTotal; i++) {
            const numeroPorteStr = String(i);
            if (immeuble.prospectingMode === 'DUO' && i % 2 !== 0) continue;

            const visiteExistante = visitesMap.get(numeroPorteStr);
            if (visiteExistante) {
                allPortes.push({ ...visiteExistante });
            } else {
                allPortes.push({ id: `porte-non-visitee-${i}`, numeroPorte: numeroPorteStr, statut: 'Non visité', passage: 0, commentaire: "" });
            }
        }
        return allPortes;
    }, [immeuble]);

    const portesColumns = useMemo(() => createPortesColumns(), []);

    if (loading) {
        return (
            <div className="space-y-6 animate-pulse">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-40 w-full" />
                <div className="grid lg:grid-cols-3 gap-6">
                    <Skeleton className="lg:col-span-2 h-96" />
                    <Skeleton className="lg:col-span-1 h-96" />
                </div>
            </div>
        )
    }
    
    if (!immeuble) {
        return (
          <div className="text-center p-8">
            <h2 className="text-xl font-semibold">Immeuble non trouvé</h2>
            <p className="text-muted-foreground mt-2">Les détails pour cet immeuble n'ont pas pu être chargés.</p>
            <Button variant="outline" onClick={() => navigate(-1)} className="mt-4">
                <ArrowLeft className="mr-2 h-4 w-4" /> Retour
            </Button>
          </div>
        );
    }

    const portesProspectees = immeuble.portes.length;
    
    return (
        <div className="space-y-6">
            <Button variant="outline" onClick={() => navigate(-1)}>
                <ArrowLeft className="mr-2 h-4 w-4" />
                Retour à la liste des immeubles
            </Button>
            
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-2xl">
                        <Building className="h-6 w-6" />
                        {immeuble.adresse}, {immeuble.codePostal} {immeuble.ville}
                    </CardTitle>
                    <CardDescription>Détails et informations sur la prospection de cet immeuble.</CardDescription>
                </CardHeader>
                <CardContent className="grid grid-cols-2 md:grid-cols-4 gap-4">
                   <ProspectorBadge Icon={Users} label={immeuble.prospectingMode === 'DUO' ? "Duo de Prospection" : "Prospecteur"} prospectors={immeuble.prospectors} />
                   <InfoBadge Icon={Check} label="Contrats Signés" value={immeuble.stats.contratsSignes} />
                   <InfoBadge Icon={MoveUpRight} label="RDV Pris" value={immeuble.stats.rdvPris} />
                   <InfoBadge Icon={KeyRound} label="Digicode" value={immeuble.digicode || "Aucun"} />
                </CardContent>
            </Card>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2">
                    <DataTable
                        columns={portesColumns}
                        data={portesData}
                        title="Détail des Portes"
                        filterColumnId="numeroPorte"
                        filterPlaceholder="Filtrer par n° de porte..."
                        isDeleteMode={false}
                        onToggleDeleteMode={() => {}}
                        rowSelection={{}}
                        setRowSelection={() => {}}
                        onConfirmDelete={() => {}}
                    />
                </div>
                <div className="lg:col-span-1">
                    <GenericRadialBarChart
                        title="Taux de Couverture"
                        value={portesProspectees}
                        total={immeuble.nbPortesTotal}
                        color="fill-sky-500"
                    />
                </div>
            </div>
        </div>
    );
};

export default ImmeubleDetailsPage;


# --- pages/admin/commerciaux/CommercialDetailsPage.tsx ---

import { useEffect, useState } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { statisticsService } from '@/services/statistics.service';
import StatCard from '@/components/ui-admin/StatCard';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import { Building, DoorOpen, Handshake, Target, ArrowLeft, User, Phone, Mail, UserCheck } from 'lucide-react';
import { Button } from '@/components/ui-admin/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui-admin/tooltip';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui-admin/table';
import { commercialService } from '@/services/commercial.service';

interface CommercialStats {
  commercialInfo: {
    nom: string;
    prenom: string;
    email: string;
  };
  kpis: {
    immeublesVisites: number;
    portesVisitees: number;
    contratsSignes: number;
    rdvPris: number;
    tauxDeConversion: number;
  };
  repartitionStatuts: {
    [key: string]: number;
  };
}

interface HistoryEntry {
  id: string;
  adresse: string;
  ville: string;
  dateProspection: string;
  nbPortesVisitees: number;
  nbContratsSignes: number;
  nbRdvPris: number;
  nbRefus: number;
  nbAbsents: number;
  commentaire: string;
  tauxCouverture: number;
}

interface CommercialDetails {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
  equipe: {
    id: string;
    nom: string;
    manager: {
      id: string;
      nom: string;
      prenom: string;
    };
  };
}

const CommercialDetailsPage = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const [stats, setStats] = useState<CommercialStats | null>(null);
  const [history, setHistory] = useState<HistoryEntry[]>([]);
  const [commercial, setCommercial] = useState<CommercialDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      const fetchData = async () => {
        try {
          setLoading(true);
          const [statsData, historyData, commercialData] = await Promise.all([
            statisticsService.getStatsForCommercial(id),
            statisticsService.getCommercialHistory(id),
            commercialService.getCommercialDetails(id),
          ]);
          setStats(statsData);
          setHistory(historyData);
          setCommercial(commercialData);
          setError(null);
        } catch (err) {
          setError('Erreur lors de la récupération des données.');
          console.error(err);
        } finally {
          setLoading(false);
        }
      };
      fetchData();
    }
  }, [id]);

  if (loading) {
    return <div>Chargement des données...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (!stats || !commercial) {
    return <div>Aucune statistique disponible pour ce commercial.</div>;
  }

  const pieData = Object.entries(stats.repartitionStatuts).map(([name, value]) => ({
    name,
    value: value as number,
  }));

  const handleBackClick = () => {
    const fromManager = location.state?.fromManager;
    if (fromManager) {
      navigate(`/admin/managers/${fromManager}`);
    } else {
      navigate('/admin/commerciaux');
    }
  };

  return (
    <div className="container mx-auto p-4 space-y-6">
      <div className="flex items-center">
        <Button variant="outline" size="icon" className="mr-4" onClick={handleBackClick}>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h1 className="text-2xl font-bold">
          Statistiques de {stats.commercialInfo.prenom} {stats.commercialInfo.nom}
        </h1>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Informations Personnelles</CardTitle>
        </CardHeader>
        <CardContent className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="flex items-center space-x-2">
            <User className="h-5 w-5 text-gray-500" />
            <span>{commercial.prenom} {commercial.nom}</span>
          </div>
          <div className="flex items-center space-x-2">
            <Phone className="h-5 w-5 text-gray-500" />
            <span>{commercial.telephone || 'N/A'}</span>
          </div>
          <div className="flex items-center space-x-2">
            <Mail className="h-5 w-5 text-gray-500" />
            <span>{commercial.email}</span>
          </div>
          <div className="flex items-center space-x-2">
            <UserCheck className="h-5 w-5 text-gray-500" />
            <span>{commercial.equipe ? `${commercial.equipe.manager.prenom} ${commercial.equipe.manager.nom}` : 'N/A'}</span>
          </div>
        </CardContent>
      </Card>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <StatCard title="Immeubles Visitées" value={stats.kpis.immeublesVisites} Icon={Building} />
        <StatCard title="Portes Visitées" value={stats.kpis.portesVisitees} Icon={DoorOpen} />
        <StatCard title="Contrats Signés" value={stats.kpis.contratsSignes} Icon={Handshake} />
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <div className="cursor-help">
                <StatCard title="Taux de Conversion" value={stats.kpis.tauxDeConversion} Icon={Target} suffix="%" />
              </div>
            </TooltipTrigger>
            <TooltipContent>
              <p>Le taux de conversion représente le rapport entre le nombre de contrats signés et le nombre total de portes visitées. Il mesure l’efficacité du commercial à conclure des ventes.</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Répartition des Statuts</CardTitle>
            <CardDescription>
              Proportion de chaque statut sur l'ensemble des portes prospectées.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div style={{ height: '350px' }}>
              <GenericPieChart
                title="Répartition des Statuts"
                data={pieData}
                dataKey="value"
                nameKey="name"
                colors={['#22c55e', '#f97316', '#f59e0b', '#ef4444', '#8b5cf6', '#3b82f6']}
              />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Historique de Prospection</CardTitle>
            <CardDescription>
              Détail des visites et performances par immeuble.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Immeuble</TableHead>
                  <TableHead>Date Visite</TableHead>
                  <TableHead className="text-center">Taux Couverture</TableHead>
                  <TableHead className="text-center">RDV Pris</TableHead>
                  <TableHead className="text-center">Contrats Signés</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {history.map((item) => (
                  <TableRow key={item.id}>
                    <TableCell className="font-medium">{item.adresse}, {item.ville}</TableCell>
                    <TableCell>{item.dateProspection ? new Date(item.dateProspection).toLocaleDateString() : 'N/A'}</TableCell>
                    <TableCell className="text-center">{item.tauxCouverture}%</TableCell>
                    <TableCell className="text-center">{item.nbRdvPris}</TableCell>
                    <TableCell className="text-center">{item.nbContratsSignes}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default CommercialDetailsPage;



# --- components/ui-admin/calendar.tsx ---
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui-admin/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "flex gap-4 flex-col md:flex-row relative",
          defaultClassNames.months
        ),
        month: cn("flex flex-col w-full gap-4", defaultClassNames.month),
        nav: cn(
          "flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn("absolute inset-0 opacity-0", defaultClassNames.dropdown),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none",
          defaultClassNames.weekday
        ),
        week: cn("flex w-full mt-2", defaultClassNames.week),
        week_number_header: cn(
          "select-none w-(--cell-size)",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-[0.8rem] select-none text-muted-foreground",
          defaultClassNames.week_number
        ),
        day: cn(
          "relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none",
          defaultClassNames.day
        ),
        range_start: cn(
          "rounded-l-md bg-accent",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("rounded-r-md bg-accent", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }



# --- pages/commercial/dashboard/DashboardCommercial.tsx ---
// src/pages/commercial/DashboardCommercial.tsx (MODIFIÉ)

import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { statisticsService } from '@/services/statistics.service';
import { assignmentGoalsService } from '@/services/assignment-goals.service';

// --- Composants UI ---
import StatCard from '@/components/ui-admin/StatCard';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { CheckCircle, DoorOpen, MapPin, ZapOff, Percent } from 'lucide-react';
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { ZoneFocusMap } from './ZoneFocusMap';
import { GoalProgressCard } from '@/components/ui-commercial/GoalProgressCard';
import { Skeleton } from '@/components/ui-admin/skeleton';

// --- Types ---
interface ZoneData {
    id: string;
    nom: string;
    latitude: number;
    longitude: number;
    rayonMetres: number;
    couleur: string;
}

// --- Composant Squelette ---
const DashboardSkeleton = () => (
    <div className="space-y-8 animate-pulse">
        <Skeleton className="h-10 w-1/3" />
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Skeleton className="h-[400px] w-full" />
            <Skeleton className="h-[400px] w-full" />
        </div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            {[...Array(4)].map((_, i) => <Skeleton key={i} className="h-28 w-full" />)}
        </div>
        <Skeleton className="h-96 w-full" />
    </div>
);

// --- Composant pour Zone non assignée ---
const NoZoneAssigned = () => (
    <Card className="h-full flex flex-col items-center justify-center text-center">
        <CardHeader>
            <ZapOff className="mx-auto h-16 w-16 text-muted-foreground" />
            <CardTitle>Aucune zone assignée</CardTitle>
        </CardHeader>
        <CardContent>
            <p className="text-muted-foreground">Aucune zone de prospection ne vous est actuellement assignée pour ce mois. <br /> Veuillez contacter votre manager.</p>
        </CardContent>
    </Card>
);


const CommercialDashboardPage = () => {
    const { user } = useAuth();
    const [stats, setStats] = useState<any>(null);
    const [history, setHistory] = useState<any[]>([]);
    const [assignedZone, setAssignedZone] = useState<ZoneData | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchData = async () => {
            if (!user || !user.id) {
                setError('ID du commercial non disponible.');
                setLoading(false);
                return;
            }

            setLoading(true);
            setError(null);

            try {
                const [statsData, historyData, zonesData] = await Promise.all([
                    statisticsService.getStatsForCommercial(user.id),
                    statisticsService.getCommercialHistory(user.id),
                    assignmentGoalsService.getAssignedZonesForCommercial(user.id),
                ]);
                setStats(statsData);
                setHistory(historyData);
                // On prend la première zone assignée pour l'affichage
                setAssignedZone(zonesData.length > 0 ? zonesData[0] : null);
            } catch (err) {
                console.error('Erreur lors du chargement des données du commercial:', err);
                setError('Erreur lors du chargement de vos données.');
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [user]);

    const activitePortesData = history.map((item: any) => ({
        name: new Date(item.dateProspection).toLocaleDateString('fr-FR', { day: '2-digit', month: 'short' }),
        "Portes Visitées": item.nbPortesVisitees,
        "RDV Pris": item.nbRdvPris,
        "Contrats Signés": item.nbContratsSignes,
    })).reverse();
    
    if (loading) return <DashboardSkeleton />;
    if (error) return <div className="text-center py-8 text-red-500">{error}</div>;

    const currentStats = stats?.kpis || {};

    return (
        <div className="space-y-8">
            <div>
                <h1 className="text-3xl font-bold">Tableau de Bord</h1>
                <p className="text-muted-foreground">Bienvenue, {user?.name} ! Voici un résumé de votre activité.</p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {assignedZone ? (
                    <ZoneFocusMap 
                        zone={{
                            nom: assignedZone.nom,
                            latlng: [assignedZone.latitude, assignedZone.longitude],
                            radius: assignedZone.rayonMetres,
                            color: assignedZone.couleur
                        }}
                        // Pour l'instant, pas d'immeubles sur cette carte simplifiée
                        immeubles={[]}
                    />
                ) : (
                    <NoZoneAssigned />
                )}
                
                <GoalProgressCard
                    title="Objectif du Mois"
                    description="Progression de votre objectif de contrats mensuel."
                    value={currentStats.contratsSignes || 0}
                    total={currentStats.objectifMensuel || 0}
                />
            </div>
            
            <div className="space-y-4">
                <h2 className="text-2xl font-semibold">Vos Performances Clés</h2>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    <StatCard title="Immeubles Visitées" value={currentStats.immeublesVisites || 0} Icon={MapPin} color="text-blue-500" />
                    <StatCard title="Portes Visitées" value={currentStats.portesVisitees || 0} Icon={DoorOpen} color="text-orange-500" />
                    <StatCard title="Contrats Signés" value={currentStats.contratsSignes || 0} Icon={CheckCircle} color="text-emerald-500" />
                    <StatCard title="Taux de Conversion" value={currentStats.tauxDeConversion || 0} Icon={Percent} color="text-violet-500" suffix="%" />
                </div>
            </div>
            
            <GenericLineChart 
                title="Activité de Prospection"
                data={activitePortesData} 
                xAxisDataKey="name" 
                lines={[
                    { dataKey: 'Portes Visitées', name: "Portes", stroke: 'hsl(var(--winvest-blue-profond))' },
                    { dataKey: 'RDV Pris', name: "RDV", stroke: 'hsl(var(--winvest-blue-moyen))' },
                    { dataKey: 'Contrats Signés', name: "Contrats", stroke: 'hsl(var(--emerald-500))' }
                ]}
            />
        </div>
    );
};

export default CommercialDashboardPage;


# --- pages/admin/immeubles/ImmeublesPage.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/ImmeublesPage.tsx

import { useState, useMemo, useEffect } from "react";
import type { Immeuble } from "./columns";
import { createColumns } from "./columns";
import type { Zone } from '../zones/columns';
import { DataTable } from "@/components/data-table/DataTable";
import { ImmeublesMap } from './ImmeublesMap';
import type { RowSelectionState } from "@tanstack/react-table";
import { ViewToggleContainer } from "@/components/ui-admin/ViewToggleContainer";
import { immeubleService } from "@/services/immeuble.service";
import { zoneService } from "@/services/zone.service";
import { Skeleton } from "@/components/ui-admin/skeleton";

const ImmeublesPage = () => {
    const [view, setView] = useState<'table' | 'map'>('table');
    const [immeubles, setImmeubles] = useState<Immeuble[]>([]);
    const [zones, setZones] = useState<Zone[]>([]);
    const [loading, setLoading] = useState(true);
    const [immeubleToFocusId, setImmeubleToFocusId] = useState<string | null>(null);
    const [zoneToFocusId, setZoneToFocusId] = useState<string | null>(null);
    const [isDeleteMode, setIsDeleteMode] = useState(false);
    const [rowSelection, setRowSelection] = useState<RowSelectionState>({});

    useEffect(() => {
        fetchData();
    }, []);

    const fetchData = async () => {
        setLoading(true);
        try {
            const [immeublesFromApi, zonesFromApi] = await Promise.all([
                immeubleService.getImmeubles(),
                zoneService.getZones()
            ]);
            
            const formattedImmeubles: Immeuble[] = immeublesFromApi.map(imm => {
                let statusText: Immeuble['status'] = 'À visiter';
                switch(imm.status) {
                    case 'VISITE': statusText = 'Visité'; break;
                    case 'RDV_PRIS': statusText = 'RDV Pris'; break;
                    case 'INACCESSIBLE': statusText = 'Inaccessible'; break;
                }
                
                const prospecteurs = Array.isArray(imm.prospectors) ? imm.prospectors : [];
                const portes = Array.isArray(imm.portes) ? imm.portes : [];
                const historiques = Array.isArray(imm.historiques) ? imm.historiques : [];
                
                return {
                    id: imm.id,
                    adresse: imm.adresse,
                    ville: imm.ville,
                    codePostal: imm.codePostal,
                    status: statusText,
                    nbPortes: portes.length,
                    nbPortesProspectees: historiques.reduce((acc: number, h: { nbPortesVisitees: number }) => acc + h.nbPortesVisitees, 0),
                    prospectingMode: prospecteurs.length > 1 ? "Duo" : "Solo",
                    prospectors: prospecteurs.map((p: { id: string; prenom: string; nom: string; }) => ({
                        id: p.id,
                        nom: `${p.prenom || ''} ${p.nom || ''}`.trim(),
                        avatarFallback: `${p.prenom?.[0] || ''}${p.nom?.[0] || ''}`.toUpperCase()
                    })),
                    dateVisite: historiques.length > 0 ? historiques[0].dateProspection : null,
                    zone: imm.zone?.nom || 'N/A',
                    zoneId: imm.zone?.id || '',
                    latlng: [imm.latitude, imm.longitude],
                };
            });
            
            const formattedZones: Zone[] = zonesFromApi.map(z => ({
                id: z.id, name: z.nom, assignedTo: 'N/A',
                color: z.couleur || 'grey', latlng: [z.latitude, z.longitude],
                radius: z.rayonMetres, dateCreation: z.createdAt,
            }));

            setImmeubles(formattedImmeubles);
            setZones(formattedZones);

        } catch (error) {
            console.error("Erreur de chargement des données:", error);
        } finally {
            setLoading(false);
        }
    };

    const handleSelectAndFocusImmeuble = (immeuble: Immeuble) => {
        setImmeubleToFocusId(immeuble.id);
        setZoneToFocusId(null);
        setView('map');
    };

    const handleSelectAndFocusZone = (zoneId: string) => {
        setZoneToFocusId(zoneId);
        setImmeubleToFocusId(null);
        setView('map');
    };
    
    const handleClearFocus = () => {
        setImmeubleToFocusId(null);
        setZoneToFocusId(null);
    };

    const toggleDeleteMode = () => {
        setIsDeleteMode(prev => !prev);
        setRowSelection({});
    };

    const handleConfirmDelete = async (selectedItems: Immeuble[]) => {
        try {
            await Promise.all(selectedItems.map(imm => immeubleService.deleteImmeuble(imm.id)));
            fetchData();
        } catch (error) {
            console.error("Erreur lors de la suppression:", error);
        }
        setIsDeleteMode(false);
        setRowSelection({});
    };

    const columns = useMemo(() => createColumns(isDeleteMode, handleSelectAndFocusImmeuble, handleSelectAndFocusZone), [isDeleteMode]);

    if (loading) {
        return (
            <div className="p-4 sm:p-6 lg:p-8 space-y-6">
                <div className="flex justify-between items-center">
                    <Skeleton className="h-10 w-1/3" />
                    <Skeleton className="h-10 w-32" />
                </div>
                <Skeleton className="h-96 w-full" />
            </div>
        )
    }

    const tableComponent = (
        <DataTable
            noCardWrapper
            columns={columns}
            data={immeubles}
            title=""
            filterColumnId="adresse"
            filterPlaceholder="Filtrer par adresse..."
            addEntityButtonText=""
            onAddEntity={() => {}}
            isDeleteMode={isDeleteMode}
            onToggleDeleteMode={toggleDeleteMode}
            rowSelection={rowSelection}
            setRowSelection={setRowSelection}
            onConfirmDelete={handleConfirmDelete}
            onRowClick={handleSelectAndFocusImmeuble}
        />
    );
    
    const mapComponent = (
        <ImmeublesMap 
            zones={zones} 
            immeubles={immeubles} 
            immeubleToFocusId={immeubleToFocusId}
            zoneToFocusId={zoneToFocusId}
            onFocusClear={handleClearFocus}
        />
    );

    return (
        <ViewToggleContainer
            title="Gestion des Immeubles"
            description="Basculez entre la vue tableau et la vue carte. Cliquez sur une adresse ou une zone pour la localiser."
            view={view}
            onViewChange={setView}
            tableComponent={tableComponent}
            mapComponent={mapComponent}
        />
    );
};

export default ImmeublesPage;


# --- pages/admin/commerciaux/commerciaux-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/commerciaux-table/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Mail, Eye, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"

export type Commercial = {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  manager: string;
  managerId: string;
  equipe: string;
  equipeId?: string;
  classement: number;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createColumns = (isDeleteMode: boolean, onEdit: (commercial: Commercial) => void, managerIdForBack?: string): ColumnDef<Commercial>[] => {
  const columns: ColumnDef<Commercial>[] = [
    // --- Colonne de sélection ---
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: any }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      cell: ({ row }: { row: any }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    }] : []),

    // --- Colonnes de données ---
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "prenom",
      header: () => <Header title="Prénom" />,
    },
    {
      accessorKey: "email",
      header: () => <Header title="Email" />,
      cell: ({ row }) => (
        <a href={`mailto:${row.getValue("email")}`} className="flex items-center gap-2 hover:underline">
          <Mail className="h-4 w-4 text-muted-foreground" />
          {row.getValue("email")}
        </a>
      )
    },
    {
      accessorKey: "manager",
      header: () => <Header title="Manager" />,
      cell: ({ row }) => {
        const managerName = row.original.manager;
        const managerId = row.original.managerId;
        return (
            <Link 
                to={`/admin/managers/${managerId}`} 
                className="hover:underline hover:text-primary transition-colors"
                onClick={(e) => e.stopPropagation()}
            >
                {managerName}
            </Link>
        )
      },
    },
    {
      accessorKey: "equipe",
      header: () => <Header title="Équipe" />,
    },
    {
      accessorKey: "classement",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classement") as number;
        // CORRECTION: Rétablissement des couleurs des badges
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300 hover:bg-yellow-200/80";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300 hover:bg-slate-300/80";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300 hover:bg-orange-300/80";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>{classement}</Badge>
          </div>
        );
      },
    },

    // --- Colonne d'Actions (améliorée) ---
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const commercial = row.original;
            return (
                // CORRECTION: Utilisation d'un TooltipProvider et ajout d'espace
                <TooltipProvider delayDuration={100}>
                    <div className="text-right space-x-2">
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button asChild variant="ghost" className="h-8 w-8 p-0">
                                    <Link to={`/admin/commerciaux/${commercial.id}`} state={{ fromManager: managerIdForBack }} onClick={(e) => { e.stopPropagation(); }}>
                                        <Eye className="h-4 w-4" />
                                        <span className="sr-only">Voir les détails</span>
                                    </Link>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Voir les détails</p></TooltipContent>
                        </Tooltip>

                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(commercial); }}>
                                    <Edit className="h-4 w-4" />
                                    <span className="sr-only">Modifier</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Modifier</p></TooltipContent>
                        </Tooltip>
                    </div>
                </TooltipProvider>
            )
        },
    },
  ]
  
  return columns;
}


# --- pages/admin/Managers/managers-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/Managers/managers-table/columns.tsx
"use client"

import type { ColumnDef, Column } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Mail, Phone, Eye, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"


export type Manager = {
  id: string
  nom: string
  prenom: string
  email: string
  telephone: string | null
  nbEquipes: number
  classement: number
  equipes: {
    id: string;
    nom: string;
    commerciaux: {
      id: string;
      nom: string;
      prenom: string;
      telephone: string;
      historiques: {
        nbContratsSignes: number;
      }[];
    }[];
  }[];
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: Column<Manager> }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const getColumns = (isDeleteMode: boolean, onEdit: (manager: Manager) => void): ColumnDef<Manager>[] => {
  const columns: ColumnDef<Manager>[] = [
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: import("@tanstack/react-table").Table<Manager> }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      cell: ({ row }: { row: import("@tanstack/react-table").Row<Manager> }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    }] : []),
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "prenom",
      header: () => <Header title="Prénom" />,
    },
    {
      accessorKey: "email",
      header: () => <Header title="Email" />,
      cell: ({ row }) => (
        <a href={`mailto:${row.getValue("email")}`} className="flex items-center gap-2 hover:underline">
          <Mail className="h-4 w-4 text-muted-foreground" />
          {row.getValue("email")}
        </a>
      ),
    },
    {
      accessorKey: "telephone",
      header: () => <Header title="Téléphone" />,
      cell: ({ row }) => (
        <a href={`tel:${row.getValue("telephone")}`} className="flex items-center gap-2 hover:underline">
          <Phone className="h-4 w-4 text-muted-foreground" />
          {row.getValue("telephone")}
        </a>
      ),
    },
    {
      accessorKey: "nbEquipes",
      header: () => <div className="text-center"><Header title="Nb. d'équipes" /></div>,
      cell: ({ row }) => <div className="text-center">{row.getValue("nbEquipes")}</div>,
      meta: { className: "text-center" }
    },
    {
      accessorKey: "classement",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classement") as number;
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300 hover:bg-yellow-200/80";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300 hover:bg-slate-300/80";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300 hover:bg-orange-300/80";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>{classement}</Badge>
          </div>
        );
      },
    },
    {
      id: "actions",
      header: () => <div className="text-right"><Header title="Actions" /></div>,
      cell: ({ row }) => {
        const manager = row.original;
        return (
          <TooltipProvider delayDuration={100}>
            <div className="text-right space-x-2">
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button asChild variant="ghost" className="h-8 w-8 p-0">
                    <Link to={`/admin/managers/${manager.id}`} onClick={(e) => e.stopPropagation()}>
                      <Eye className="h-4 w-4" />
                      <span className="sr-only">Voir les détails</span>
                    </Link>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Voir les détails</p></TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(manager); }}>
                    <Edit className="h-4 w-4" />
                    <span className="sr-only">Modifier</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Modifier</p></TooltipContent>
              </Tooltip>
            </div>
          </TooltipProvider>
        )
      }
    },
  ]
  
  return columns;
}


# --- pages/admin/Equipes/equipes-table/columns.tsx ---
import type { Column, ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Users as CommerciauxIcon, Eye, Award, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Avatar, AvatarFallback } from "@/components/ui-admin/avatar"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"

export type Equipe = {
  id: string;
  nom: string;
  manager: {
    id: string; 
    nom: string;
    avatarFallback: string;
  };
  nbCommerciaux: number;
  classementGeneral: number;
  totalContratsSignes: number;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)
const SortableHeader = ({ title, column }: { title: string, column: Column<Equipe, unknown> }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createEquipesColumns = (isDeleteMode: boolean, onEdit: (equipe: Equipe) => void): ColumnDef<Equipe>[] => {
  return [
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: import("@tanstack/react-table").Table<Equipe> }) => (
        <Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />
      ),
      cell: ({ row }: { row: import("@tanstack/react-table").Row<Equipe> }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" onClick={(e) => e.stopPropagation()} />
      ),
      enableSorting: false, enableHiding: false,
    }] : []),
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom de l'équipe" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "manager",
      header: () => <Header title="Manager responsable" />,
      cell: ({ row }) => {
        const manager = row.original.manager
        return (
          <Link to={`/admin/managers/${manager.id}`} className="flex items-center gap-2 group" onClick={(e) => e.stopPropagation()}>
            <Avatar className="h-8 w-8">
              <AvatarFallback>{manager.avatarFallback}</AvatarFallback>
            </Avatar>
            <span className="group-hover:underline group-hover:text-primary transition-colors">{manager.nom}</span>
          </Link>
        )
      },
      sortingFn: (rowA, rowB) => {
        return rowA.original.manager.nom.localeCompare(rowB.original.manager.nom);
      }
    },
    {
      accessorKey: "nbCommerciaux",
      header: () => <div className="text-center"><Header title="Effectif" /></div>,
      cell: ({ row }) => (
        <div className="flex items-center justify-center gap-2">
          <CommerciauxIcon className="h-4 w-4 text-muted-foreground" />
          <span>{row.getValue("nbCommerciaux")}</span>
        </div>
      )
    },
    {
      accessorKey: "classementGeneral",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classementGeneral") as number;
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>
              <Award className="mr-1 h-3 w-3" />
              {classement}
            </Badge>
          </div>
        );
      },
    },
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const equipe = row.original;
            return (
              <TooltipProvider delayDuration={100}>
                <div className="text-right space-x-2">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button asChild variant="ghost" className="h-8 w-8 p-0">
                            <Link to={`/admin/equipes/${equipe.id}`} onClick={(e) => { e.stopPropagation(); }}>
                                <Eye className="h-4 w-4" />
                                <span className="sr-only">Voir les détails de l'équipe</span>
                            </Link>
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent><p>Voir les détails</p></TooltipContent>
                    </Tooltip>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(equipe); }}>
                            <Edit className="h-4 w-4" />
                            <span className="sr-only">Modifier</span>
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent><p>Modifier</p></TooltipContent>
                    </Tooltip>
                </div>
              </TooltipProvider>
            )
        },
    },
  ]
}


# --- App.tsx ---
// src/App.tsx
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';

// --- Logique de Routage ---
import PrivateRoute from './routes/PrivateRoute';
import RoleBasedRedirect from './routes/RoleBasedRedirect';

// --- Layouts et Pages Publiques ---
import AdminLayout from './layout/AdminLayout';
import CommercialLayout from './layout/CommercialLayout';
import Login from './pages/auth/Login';
import SelectCommercialPage from './pages/auth/CommercialSelectionPage'; // <-- IMPORT NOUVEAU

// --- Pages Admin ---
// ... (imports admin inchangés) ...
import DashboardAdmin from './pages/admin/Dashboard/DashboardAdmin';
import ManagersPage from './pages/admin/Managers/ManagersPage';
import ManagerDetailsPage from './pages/admin/Managers/ManagerDetailsPage';
import CommerciauxPage from './pages/admin/commerciaux/CommerciauxPage';
import CommercialDetailsPage from './pages/admin/commerciaux/CommercialDetailsPage';
import EquipesPage from './pages/admin/Equipes/EquipesPage'; 
import EquipeDetailsPage from './pages/admin/Equipes/EquipeDetailsPage';
import StatistiquesPage from './pages/admin/statitistiques/StatistiquesPage';
import ZonesPage from './pages/admin/zones/ZonesPage';
import ZoneDetailsPage from './pages/admin/zones/ZoneDetailsPage'; 
import ImmeublesPage from './pages/admin/immeubles/ImmeublesPage';
import ImmeubleDetailsPage from './pages/admin/immeubles/portes/ImmeubleDetailsPage';
import SuiviPage from './pages/admin/suivi/SuiviPage';
import AssignmentGoalsPage from './pages/admin/assignment-goals/AssignmentGoalsPage';

// --- Pages Commercial ---
import CommercialDashboardPage from './pages/commercial/dashboard/DashboardCommercial';
import ProspectingSetupPage from './pages/commercial/prospection/ProspectingSetupPage'; 
import ProspectingDoorsPage from './pages/commercial/prospection/ProspectingDoorsPage';

const CommercialHistory = () => <div className="p-8"><h1 className="text-3xl font-bold">Historique de Prospection</h1></div>;
const CommercialStats = () => <div className="p-8"><h1 className="text-3xl font-bold">Mes Statistiques</h1></div>;
const CommercialProfile = () => <div className="p-8"><h1 className="text-3xl font-bold">Mon Profil</h1></div>;

// --- Pages des autres Rôles (pour l'exemple) ---
import DashboardManager from './pages/manager/DashboardManager';
import DashboardDirecteur from './pages/directeur/DashboardDirecteur';
import DashboardBackoffice from './pages/backoffice/DashboardBackoffice';

import { Toaster } from "sonner";
import SelectBuildingPage from './pages/commercial/prospection/SelectBuildingPage';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        {/* --- Routes Publiques --- */}
        <Route path="/login" element={<Login />} />
        {/* NOUVELLE ROUTE PUBLIQUE POUR LA SÉLECTION */}
        <Route path="/select-commercial" element={<SelectCommercialPage />} />


        {/* --- Routes Privées Protégées --- */}
        <Route element={<PrivateRoute />}>
          
          <Route path="/" element={<RoleBasedRedirect />} />
          
          {/* --- Layout pour les administrateurs --- */}
          <Route path="/admin" element={<AdminLayout />}>
            <Route index element={<DashboardAdmin />} />
            <Route path="managers" element={<ManagersPage />} />
            <Route path="managers/:managerId" element={<ManagerDetailsPage />} />
            <Route path="equipes" element={<EquipesPage />} /> 
            <Route path="equipes/:equipeId" element={<EquipeDetailsPage />} />
            <Route path="commerciaux" element={<CommerciauxPage />} />
            <Route path="commerciaux/:id" element={<CommercialDetailsPage />} />
            <Route path="statistiques" element={<StatistiquesPage />} />
            <Route path="zones" element={<ZonesPage />} /> 
            <Route path="zones/:zoneId" element={<ZoneDetailsPage />} /> 
            <Route path="immeubles" element={<ImmeublesPage />} />
            <Route path="immeubles/:immeubleId" element={<ImmeubleDetailsPage />} />
            <Route path="suivi" element={<SuiviPage />} />
            <Route path="assignations-objectifs" element={<AssignmentGoalsPage />} />
          </Route>

          {/* --- Layout pour les commerciaux --- */}
          <Route path="/commercial" element={<CommercialLayout />}>
            <Route index element={<Navigate to="/commercial/dashboard" replace />} /> 
            
            <Route path="dashboard" element={<CommercialDashboardPage />} /> 
            
            {/* Flow de prospection */}
            <Route path="prospecting" element={<SelectBuildingPage />} />
            <Route path="prospecting/setup/:buildingId" element={<ProspectingSetupPage />} />
            <Route path="prospecting/doors/:buildingId" element={<ProspectingDoorsPage />} />

            {/* Autres pages du commercial */}
            <Route path="history" element={<CommercialHistory />} />
            <Route path="stats" element={<CommercialStats />} />
            <Route path="profile" element={<CommercialProfile />} />
          </Route>
            
          {/* Routes pour les autres rôles */}
          <Route path="/manager" element={<DashboardManager />} />
          <Route path="/directeur" element={<DashboardDirecteur />} />
          <Route path="/backoffice" element={<DashboardBackoffice />} />

        </Route>

        <Route path="*" element={<div>Page non trouvée</div>} />
      </Routes>
      <Toaster richColors position="top-right" />
    </BrowserRouter>
  );
}

export default App;


# --- pages/admin/suivi/AudioPlayer.tsx ---
// src/pages/admin/suivi/AudioPlayer.tsx
import { useEffect, useRef, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { Slider } from '@/components/ui-admin/slider';
import { Volume2, BarChart, MicOff } from 'lucide-react';
import { type Commercial } from './types';
import { Badge } from '@/components/ui-admin/badge';

interface AudioPlayerProps {
  activeCommercial: Commercial | null;
  liveText: string;
  isProspecting: boolean;
  audioChunks: Blob[];
}

export const AudioPlayer = ({ activeCommercial, liveText, isProspecting, audioChunks }: AudioPlayerProps) => {
  const audioContextRef = useRef<AudioContext | null>(null);
  const audioQueueRef = useRef<Blob[]>([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [volume, setVolume] = useState(50);
  const gainNodeRef = useRef<GainNode | null>(null);

  // Initialise l'AudioContext
  useEffect(() => {
    if (!audioContextRef.current) {
      const context = new (window.AudioContext || (window as any).webkitAudioContext)();
      audioContextRef.current = context;
      const gainNode = context.createGain();
      gainNode.connect(context.destination);
      gainNodeRef.current = gainNode;
    }
  }, []);
  
  // Met à jour le volume
  useEffect(() => {
    if (gainNodeRef.current) {
      gainNodeRef.current.gain.value = volume / 100;
    }
  }, [volume]);


  const playNextInQueue = async () => {
    if (audioQueueRef.current.length === 0) {
      setIsPlaying(false);
      return;
    }
    
    setIsPlaying(true);
    const blob = audioQueueRef.current.shift();
    if (!blob || !audioContextRef.current || !gainNodeRef.current) return;

    try {
      const arrayBuffer = await blob.arrayBuffer();
      const audioBuffer = await audioContextRef.current.decodeAudioData(arrayBuffer);
      
      const source = audioContextRef.current.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(gainNodeRef.current);
      source.onended = playNextInQueue; // Joue le prochain morceau quand celui-ci est fini
      source.start();
    } catch (error) {
      console.error("Erreur de décodage audio, passage au suivant.", error);
      playNextInQueue(); // Tente de jouer le prochain
    }
  };

  // Ajoute les nouveaux chunks à la file d'attente et démarre la lecture si nécessaire
  useEffect(() => {
    if (audioChunks.length > 0) {
      audioQueueRef.current.push(...audioChunks);
      if (!isPlaying) {
        playNextInQueue();
      }
    }
  }, [audioChunks, isPlaying]);

  // Réinitialise la file d'attente si le commercial change
  useEffect(() => {
    audioQueueRef.current = [];
    setIsPlaying(false);
  }, [activeCommercial]);


  if (!activeCommercial) {
    return (
      <Card className="bg-white shadow-md">
        <CardHeader>
          <CardTitle>Lecteur Audio</CardTitle>
          <CardDescription>Aucun commercial sélectionné.</CardDescription>
        </CardHeader>
        <CardContent className="flex items-center justify-center h-48 text-muted-foreground">
          <MicOff className="h-12 w-12" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-white shadow-md">
      <CardHeader>
        <div className="flex items-center gap-4">
          <Avatar className="h-12 w-12">
            <AvatarFallback className="text-lg bg-zinc-200 text-zinc-700">{activeCommercial.avatarFallback}</AvatarFallback>
          </Avatar>
          <div>
            <CardTitle>{activeCommercial.name}</CardTitle>
            <CardDescription>Équipe {activeCommercial.equipe} - {isProspecting ? 'En ligne' : 'Hors ligne'}</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="bg-zinc-100 border border-zinc-200 p-3 rounded-lg min-h-[100px] max-h-[200px] overflow-y-auto text-sm text-zinc-700 transition-colors">
          {isProspecting ? (
            liveText || <span className="italic text-zinc-500">En attente de transcription...</span>
          ) : (
            <span className="italic text-zinc-500">Le commercial n'est pas en prospection.</span>
          )}
        </div>
        
        <div className="flex items-center gap-4">
          <div className="flex-1 flex items-center gap-2">
             <Badge variant="outline" className={isProspecting ? "bg-green-100 text-green-800 border-green-300" : "bg-gray-100 text-gray-800 border-gray-300"}>
                {isProspecting ? <BarChart className="h-4 w-4 mr-2 animate-pulse" /> : <MicOff className="h-4 w-4 mr-2" />}
                {isProspecting ? 'EN DIRECT' : 'HORS LIGNE'}
             </Badge>
          </div>
          <div className="flex items-center gap-2 w-[120px]">
            <Volume2 className="h-5 w-5 text-muted-foreground" />
            <Slider defaultValue={[volume]} max={100} step={1} onValueChange={(value) => setVolume(value[0])} />
          </div>
        </div>
      </CardContent>
    </Card>
  );
};


# --- pages/admin/assignment-goals/AssignmentGoalsPage.tsx ---
import { useState, useEffect } from 'react';
import { Loader2, AlertCircle } from 'lucide-react';
import { toast } from 'sonner';

// Services
import { commercialService } from '@/services/commercial.service';
import { zoneService } from '@/services/zone.service';
import { managerService } from '@/services/manager.service';
import { assignmentGoalsService } from '@/services/assignment-goals.service';

// Types (supposons qu'ils sont dans un fichier types.ts)
import { AssignmentType } from '@/types/enums';
import type { Commercial, Manager, Zone } from '@/types/types';

// Composants enfants (à créer dans les fichiers suivants)
import { ZoneAssignmentCard } from '@/components/page-components/ZoneAssignmentCard';
import { GoalSettingCard } from '@/components/page-components/GoalSettingCard';
import { ZoneMapViewer } from '@/components/page-components/ZoneMapViewer';


const AssignmentGoalsPage = () => {
  // --- STATE MANAGEMENT ---
  const [data, setData] = useState<{
    commercials: Commercial[];
    managers: Manager[];
    zones: Zone[];
  }>({ commercials: [], managers: [], zones: [] });
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const [selectedZone, setSelectedZone] = useState<Zone | null>(null);

  // --- DATA FETCHING ---
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const [commercialsData, zonesData, managersData] = await Promise.all([
          commercialService.getCommerciaux(),
          zoneService.getZones(),
          managerService.getManagers(),
        ]);
        setData({ commercials: commercialsData, zones: zonesData, managers: managersData });
      } catch (err) {
        console.error("Failed to fetch initial data:", err);
        setError("Impossible de charger les données. Veuillez rafraîchir la page.");
        toast.error("Erreur de chargement des données.");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  // --- HANDLERS ---
  const handleAssignZone = async (zoneId: string, assigneeId: string, assigneeType: AssignmentType) => {
    try {
      await assignmentGoalsService.assignZone(zoneId, assigneeId, assigneeType);
      toast.success('Zone assignée avec succès!', {
        description: `La zone a été assignée à l'${assigneeType}.`,
      });
    } catch (error) {
      console.error("Erreur lors de l'assignation de la zone:", error);
      toast.error("Erreur lors de l'assignation de la zone.");
    }
  };

  const handleSetGoal = async (commercialId: string, goal: number) => {
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    try {
      await assignmentGoalsService.setMonthlyGoal(commercialId, goal, currentMonth, currentYear);
      toast.success('Objectif mensuel défini avec succès!', {
        description: `L'objectif de ${goal} contrats a été fixé.`,
      });
    } catch (error) {
      console.error("Erreur lors de la définition de l'objectif:", error);
      toast.error("Erreur lors de la définition de l'objectif.");
    }
  };
  
  const handleSelectZone = (zoneId: string) => {
    const zone = data.zones.find(z => z.id === zoneId) || null;
    setSelectedZone(zone);
  }

  // --- RENDER LOGIC ---
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-16 w-16 animate-spin text-blue-500" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen text-red-500">
        <AlertCircle className="h-16 w-16 mb-4" />
        <h2 className="text-2xl font-semibold">Une erreur est survenue</h2>
        <p>{error}</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50/50 p-4 sm:p-6 lg:p-8">
      <header className="mb-8">
        <h1 className="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
          Assignations et Objectifs
        </h1>
        <p className="mt-2 text-lg text-gray-600">
          Gérez les zones de prospection et fixez les objectifs de vos équipes.
        </p>
      </header>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Colonne de gauche avec les formulaires */}
        <div className="lg:col-span-1 flex flex-col gap-8">
          <ZoneAssignmentCard
            zones={data.zones}
            commercials={data.commercials}
            managers={data.managers}
            onAssign={handleAssignZone}
            onZoneSelect={handleSelectZone}
          />
          <GoalSettingCard
            commercials={data.commercials}
            onSetGoal={handleSetGoal}
          />
        </div>
        
        {/* Colonne de droite avec la carte */}
        <div className="lg:col-span-2">
           <ZoneMapViewer zone={selectedZone} />
        </div>
      </div>
    </div>
  );
};

export default AssignmentGoalsPage;


# --- components/ui-admin/command.tsx ---
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui-admin/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  className,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
  className?: string
  showCloseButton?: boolean
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent
        className={cn("overflow-hidden p-0", className)}
        showCloseButton={showCloseButton}
      >
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



# --- components/page-components/ZoneAssignmentCard.tsx ---
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui-admin/select';
import { Button } from '@/components/ui-admin/button';
import { MapPin, Loader2 } from 'lucide-react';
import { AssignmentType } from '@/types/enums';
import type { Commercial, Manager, Zone } from '@/types/types';

interface ZoneAssignmentCardProps {
  zones: Zone[];
  commercials: Commercial[];
  managers: Manager[];
  onAssign: (zoneId: string, assigneeId: string, assigneeType: AssignmentType) => Promise<void>;
  onZoneSelect: (zoneId: string) => void;
}

export const ZoneAssignmentCard = ({ zones, commercials, managers, onAssign, onZoneSelect }: ZoneAssignmentCardProps) => {
  const [selectedZone, setSelectedZone] = useState('');
  const [assigneeType, setAssigneeType] = useState<AssignmentType>(AssignmentType.COMMERCIAL);
  const [assigneeId, setAssigneeId] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const assigneeOptions = assigneeType === AssignmentType.COMMERCIAL ? commercials : managers;
  const isFormValid = selectedZone && assigneeId && assigneeType;

  const handleSubmit = async () => {
    if (!isFormValid) return;
    setIsSubmitting(true);
    await onAssign(selectedZone, assigneeId, assigneeType);
    setIsSubmitting(false);
  };
  
  const handleZoneChange = (zoneId: string) => {
    setSelectedZone(zoneId);
    onZoneSelect(zoneId);
  }
  
  const handleTypeChange = (type: AssignmentType) => {
    setAssigneeType(type);
    setAssigneeId(''); // Reset assignee when type changes
  }

  return (
    <Card className="shadow-md hover:shadow-lg transition-shadow">
      <CardHeader>
        <CardTitle className="flex items-center text-blue-600">
          <MapPin className="mr-3 h-6 w-6" /> Assignation de Zone
        </CardTitle>
        <CardDescription>Assignez une zone à un commercial ou manager.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Sélecteur de Zone */}
        <div className="space-y-2">
            <label className="text-sm font-medium">Zone à assigner</label>
            <Select onValueChange={handleZoneChange} value={selectedZone}>
                <SelectTrigger><SelectValue placeholder="Sélectionner une zone" /></SelectTrigger>
                <SelectContent>
                    {zones.map(z => <SelectItem key={z.id} value={z.id}>{z.nom}</SelectItem>)}
                </SelectContent>
            </Select>
        </div>

        {/* Sélecteur de Type (Commercial/Manager) */}
        <div className="space-y-2">
            <label className="text-sm font-medium">Assigner à un</label>
            <Select onValueChange={handleTypeChange} value={assigneeType}>
                <SelectTrigger><SelectValue placeholder="Type d'assigné" /></SelectTrigger>
                <SelectContent>
                    <SelectItem value={AssignmentType.COMMERCIAL}>Commercial</SelectItem>
                    <SelectItem value={AssignmentType.MANAGER}>Manager</SelectItem>
                </SelectContent>
            </Select>
        </div>

        {/* Sélecteur de Personne */}
        <div className="space-y-2">
            <label className="text-sm font-medium">{assigneeType === AssignmentType.COMMERCIAL ? 'Commercial' : 'Manager'}</label>
            <Select onValueChange={setAssigneeId} value={assigneeId} disabled={!assigneeType}>
                <SelectTrigger><SelectValue placeholder={`Sélectionner un ${assigneeType.toLowerCase()}`} /></SelectTrigger>
                <SelectContent>
                    {assigneeOptions.map(p => <SelectItem key={p.id} value={p.id}>{p.prenom} {p.nom}</SelectItem>)}
                </SelectContent>
            </Select>
        </div>

        <Button onClick={handleSubmit} disabled={!isFormValid || isSubmitting} className="w-full bg-blue-600 hover:bg-blue-700">
          {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <MapPin className="mr-2 h-4 w-4" />}
          Assigner la Zone
        </Button>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/sheet.tsx ---
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



# --- pages/auth/CommercialSelectionPage.tsx ---
// src/pages/commercial/CommercialSelectionPage.tsx
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { commercialService } from '@/services/commercial.service';
import type { CommercialFromAPI } from '@/services/commercial.service';
import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { ScrollArea } from '@/components/ui-admin/scroll-area';
import { Skeleton } from '@/components/ui-admin/skeleton';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { User } from 'lucide-react';

const CommercialSelectionPage: React.FC = () => {
  const [commerciaux, setCommerciaux] = useState<CommercialFromAPI[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();
  const { login } = useAuth();

  useEffect(() => {
    const fetchCommerciaux = async () => {
      try {
        const data = await commercialService.getCommerciaux();
        setCommerciaux(data);
      } catch (err) {
        setError('Impossible de charger la liste des commerciaux.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchCommerciaux();
  }, []);

  const handleSelectCommercial = (commercial: CommercialFromAPI) => {
    login({
      id: commercial.id,
      name: `${commercial.prenom} ${commercial.nom}`,
      role: 'commercial',
      email: commercial.email,
    });
    navigate('/commercial/dashboard');
  };

  const renderContent = () => {
    if (loading) {
      return (
        <div className="space-y-4">
          {[...Array(5)].map((_, i) => <Skeleton key={i} className="h-12 w-full" />)}
        </div>
      );
    }

    if (error) {
      return <div className="text-center text-red-500">{error}</div>;
    }

    if (commerciaux.length === 0) {
      return <p className="text-center text-gray-500">Aucun profil de commercial disponible.</p>;
    }

    return (
      <ScrollArea className="h-72 w-full rounded-md border p-4">
        <div className="grid gap-4">
          {commerciaux.map((commercial) => (
            <Button
              key={commercial.id}
              variant="outline"
              className="w-full justify-start h-14 text-md"
              onClick={() => handleSelectCommercial(commercial)}
            >
              <Avatar className="mr-3 h-9 w-9">
                <AvatarFallback>{commercial.prenom[0]}{commercial.nom[0]}</AvatarFallback>
              </Avatar>
              <div className="flex flex-col items-start">
                  <span>{commercial.prenom} {commercial.nom}</span>
                  <span className="text-xs text-muted-foreground">{commercial.email}</span>
              </div>
            </Button>
          ))}
        </div>
      </ScrollArea>
    );
  };
  
  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100 p-4">
      <Card className="w-full max-w-md shadow-lg">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center flex items-center justify-center gap-2">
            <User className="h-6 w-6"/> Qui êtes-vous ?
          </CardTitle>
          <CardDescription className="text-center text-gray-600">
            Choisissez votre profil pour accéder à votre tableau de bord.
          </CardDescription>
        </CardHeader>
        <CardContent>
          {renderContent()}
        </CardContent>
      </Card>
    </div>
  );
};

export default CommercialSelectionPage;


# --- pages/admin/zones/ZoneDetailsPage.tsx ---
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { zoneService, type ZoneDetailsFromApi } from '@/services/zone.service';
import { Button } from '@/components/ui-admin/button';
import { ArrowLeft, MapPin, Building, CheckCircle, Briefcase } from 'lucide-react';
import { Skeleton } from '@/components/ui-admin/skeleton';
import StatCard from '@/components/ui-admin/StatCard';
import { ZoneMap } from './ZoneMap'; // Assurez-vous que ce composant peut être réutilisé ou adapté
import type { Zone as ZoneTableType } from './columns';

const ZoneDetailsPage = () => {
  const { zoneId } = useParams<{ zoneId: string }>();
  const navigate = useNavigate();
  const [zoneDetails, setZoneDetails] = useState<ZoneDetailsFromApi | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (zoneId) {
      setLoading(true);
      zoneService.getZoneDetails(zoneId)
        .then(data => {
          setZoneDetails(data);
        })
        .catch(error => {
          console.error('Erreur lors de la récupération des détails de la zone:', error);
          setZoneDetails(null);
        })
        .finally(() => {
          setLoading(false);
        });
    }
  }, [zoneId]);

  if (loading) {
    return (
      <div className="space-y-6 animate-pulse">
        <Skeleton className="h-10 w-48" />
        <Skeleton className="h-24 w-full" />
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[...Array(3)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}
        </div>
        <Skeleton className="h-96 w-full" />
      </div>
    );
  }

  if (!zoneDetails) {
    return <div>Zone non trouvée ou erreur de chargement.</div>;
  }

  return (
    <div className="h-full flex flex-col space-y-8">
      <Button variant="outline" onClick={() => navigate(-1)}>
        <ArrowLeft className="mr-2 h-4 w-4" />
        Retour à la liste des zones
      </Button>

      <div className="space-y-2">
        <h1 className="text-3xl font-bold flex items-center gap-3">
          <MapPin className="h-8 w-8 text-primary" />
          Zone: {zoneDetails.nom}
        </h1>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <StatCard title="Nombre d'immeubles" value={zoneDetails.stats.nbImmeubles} Icon={Building} color="text-blue-500" />
        <StatCard title="Contrats Signés" value={zoneDetails.stats.totalContratsSignes} Icon={CheckCircle} color="text-emerald-500" />
        <StatCard title="RDV Pris" value={zoneDetails.stats.totalRdvPris} Icon={Briefcase} color="text-sky-500" />
      </div>

      <div className="flex-grow flex flex-col">
        <h2 className="text-2xl font-bold mb-4">Carte de la Zone</h2>
        <div className="flex-grow w-full">
          <ZoneMap
            existingZones={[{
              id: zoneDetails.id,
              name: zoneDetails.nom,
              assignedTo: '', // L'assignation n'est pas nécessaire ici
              color: zoneDetails.couleur,
              latlng: [zoneDetails.latitude, zoneDetails.longitude],
              radius: zoneDetails.rayonMetres,
              dateCreation: zoneDetails.createdAt,
            } as ZoneTableType]}
            immeubles={zoneDetails.immeubles.map(imm => ({
              id: imm.id,
              adresse: imm.adresse,
              status: imm.status, // Le statut est déjà une chaîne de caractères
              latlng: [imm.latitude, imm.longitude],
            }))}
            zoneToFocus={zoneDetails.id}
          />
        </div>
      </div>
    </div>
  );
};

export default ZoneDetailsPage;



# --- pages/commercial/prospection/doors-columns.tsx ---
// src/pages/commercial/doors-columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Edit, MessageSquare, Repeat, Hash, Check, BellOff, User, Smile, Frown, Landmark } from "lucide-react"
import { cn } from "@/lib/utils"

export type PorteStatus = "Non visité" | "Absent" | "Refus" | "Curieux" | "RDV" | "Contrat";

export type Porte = {
  id: string; 
  numero: string;
  statut: PorteStatus;
  commentaire: string;
  repassage: boolean;
  nbPassages: number;
};

export const statusConfig: Record<PorteStatus, { className: string; icon: React.ElementType }> = {
    "Non visité": { className: "bg-gray-100 text-gray-800 border-gray-300", icon: BellOff },
    "Absent": { className: "bg-yellow-100 text-yellow-800 border-yellow-300", icon: User },
    "Curieux": { className: "bg-purple-100 text-purple-800 border-purple-300", icon: Smile },
    "Refus": { className: "bg-red-100 text-red-800 border-red-300", icon: Frown },
    "RDV": { className: "bg-sky-100 text-sky-800 border-sky-300", icon: Check },
    "Contrat": { className: "bg-emerald-100 text-emerald-800 border-emerald-300", icon: Landmark },
};

export const statusList = Object.keys(statusConfig) as PorteStatus[];

export const createDoorsColumns = (
    onEdit: (porteId: string) => void
): ColumnDef<Porte>[] => [
    {
      accessorKey: "numero",
      header: "Porte",
      cell: ({ row }) => (
        <div className="font-bold flex items-center gap-2">
            <Hash className="h-4 w-4 text-muted-foreground"/>
            {row.original.numero}
        </div>
      ),
      meta: { className: "w-[100px]" }
    },
    {
      accessorKey: "statut",
      header: "Statut",
      cell: ({ row }) => {
        const statut = row.original.statut;
        const config = statusConfig[statut];
        return <Badge variant="outline" className={cn("font-medium", config.className)}><config.icon className="mr-1.5 h-3 w-3"/>{statut}</Badge>;
      }
    },
    {
        accessorKey: "nbPassages",
        header: "Passages",
        cell: ({ row }) => {
            return <span>{row.original.nbPassages}</span>
        }
    },
    {
        accessorKey: "repassage",
        header: "Repassage",
        cell: ({ row }) => {
            if (!row.original.repassage) return <span className="text-muted-foreground">-</span>;
            return (
                <div className="flex items-center gap-2 text-yellow-600 font-semibold">
                    <Repeat className="h-4 w-4" />
                    <span>À revoir</span>
                </div>
            )
        }
    },
    {
      accessorKey: "commentaire",
      header: "Commentaire",
      cell: ({ row }) => {
        const commentaire = row.original.commentaire;
        if (!commentaire) return <span className="italic text-muted-foreground">Aucun commentaire</span>;
        return (
          <div className="flex items-start gap-2">
            <MessageSquare className="h-4 w-4 text-muted-foreground mt-1 shrink-0" />
            <span className="max-w-xs truncate">{commentaire}</span>
          </div>
        )
      },
    },
    {
        id: "actions",
        cell: ({ row }) => (
            <div className="text-right">
                <Button variant="ghost" size="icon" onClick={() => onEdit(row.original.id)}>
                    <Edit className="h-4 w-4" />
                </Button>
            </div>
        )
    }
];


# --- components/page-components/GoalSettingCard.tsx ---
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui-admin/select';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Target, Loader2 } from 'lucide-react';
import type { Commercial } from '@/types/types';

interface GoalSettingCardProps {
  commercials: Commercial[];
  onSetGoal: (commercialId: string, goal: number) => Promise<void>;
}

export const GoalSettingCard = ({ commercials, onSetGoal }: GoalSettingCardProps) => {
  const [commercialId, setCommercialId] = useState('');
  const [goal, setGoal] = useState<number | string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const isFormValid = commercialId && typeof goal === 'number' && goal > 0;

  const handleSubmit = async () => {
    if (!isFormValid) return;
    setIsSubmitting(true);
    await onSetGoal(commercialId, goal as number);
    setIsSubmitting(false);
  };
  
  return (
     <Card className="shadow-md hover:shadow-lg transition-shadow">
      <CardHeader>
        <CardTitle className="flex items-center text-green-600">
          <Target className="mr-3 h-6 w-6" /> Définir un Objectif
        </CardTitle>
        <CardDescription>Fixez l'objectif mensuel de contrats pour un commercial.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Sélecteur de Commercial */}
        <div className="space-y-2">
          <label className="text-sm font-medium">Commercial</label>
          <Select onValueChange={setCommercialId} value={commercialId}>
            <SelectTrigger><SelectValue placeholder="Sélectionner un commercial" /></SelectTrigger>
            <SelectContent>
              {commercials.map(c => <SelectItem key={c.id} value={c.id}>{c.prenom} {c.nom}</SelectItem>)}
            </SelectContent>
          </Select>
        </div>
        
        {/* Input de l'objectif */}
        <div className="space-y-2">
            <label htmlFor="monthly-goal" className="text-sm font-medium">Objectif (nombre de contrats)</label>
            <div className="relative">
                <Target className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                <Input 
                    id="monthly-goal" 
                    type="number" 
                    value={goal}
                    onChange={e => setGoal(e.target.value === '' ? '' : parseInt(e.target.value, 10))} 
                    min="1"
                    placeholder="Ex: 10" 
                    className="pl-10" 
                />
            </div>
        </div>

        <Button onClick={handleSubmit} disabled={!isFormValid || isSubmitting} className="w-full bg-green-600 hover:bg-green-700">
          {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Target className="mr-2 h-4 w-4" />}
          Définir l'Objectif
        </Button>
      </CardContent>
    </Card>
  );
}


# --- hooks/useSpeechRecognition.ts ---
import { useState, useEffect, useRef } from 'react';

// --- Définitions de types ---
interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  onresult: (event: SpeechRecognitionEvent) => void;
  onerror: (event: SpeechRecognitionErrorEvent) => void;
  onend: () => void;
  start: () => void;
  stop: () => void;
}
type SpeechRecognitionConstructor = new () => SpeechRecognition;
interface SpeechRecognitionEvent extends Event {
  resultIndex: number;
  results: SpeechRecognitionResultList;
}
interface SpeechRecognitionErrorEvent extends Event {
  error: string;
}
interface CustomWindow extends Window {
  SpeechRecognition?: SpeechRecognitionConstructor;
  webkitSpeechRecognition?: SpeechRecognitionConstructor;
}
declare const window: CustomWindow;
const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;

export const useSpeechRecognition = () => {
  const [text, setText] = useState('');
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const stopIntentionallyRef = useRef(false);
  const finalTranscriptRef = useRef('');

  useEffect(() => {
    if (!SpeechRecognitionAPI) {
      console.warn("L'API Web Speech n'est pas supportée par ce navigateur.");
      return;
    }
    const recognition = new SpeechRecognitionAPI();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'fr-FR';

    recognition.onresult = (event: SpeechRecognitionEvent) => {
      let interimTranscript = '';
      for (let i = event.resultIndex; i < event.results.length; ++i) {
        if (event.results[i].isFinal) {
          finalTranscriptRef.current += event.results[i][0].transcript;
        } else {
          interimTranscript += event.results[i][0].transcript;
        }
      }
      setText(finalTranscriptRef.current + interimTranscript);
    };

    recognition.onerror = (event: SpeechRecognitionErrorEvent) => {
      console.error('Erreur de reconnaissance vocale:', event.error);
      setIsListening(false);
    };
    
    recognition.onend = () => {
      if (!stopIntentionallyRef.current) {
        try { recognition.start(); } 
        catch { setIsListening(false); }
      } else {
        setIsListening(false);
      }
    };
    
    recognitionRef.current = recognition;
    return () => { recognitionRef.current?.stop(); };
  }, []);

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      finalTranscriptRef.current = ''; 
      setText('');
      stopIntentionallyRef.current = false;
      setIsListening(true);
      try { recognitionRef.current.start(); } 
      catch { setIsListening(false); }
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      stopIntentionallyRef.current = true;
      recognitionRef.current.stop();
    }
  };

  return { text, isListening, startListening, stopListening, hasSupport: !!SpeechRecognitionAPI };
};


# --- components/ui-admin/table.tsx ---
// frontend-shadcn/src/components/ui/table.tsx

import * as React from "react"
import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  // + Ajout du div wrapper pour le scroll horizontal
  <div className="relative w-full overflow-auto"> 
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

// ... le reste du fichier ne change pas ...
const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


# --- components/charts/GenericHorizontalBarChart.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LabelList, Legend } from 'recharts';

interface ChartDataItem {
  [key: string]: string | number;
}

interface GenericHorizontalBarChartProps {
  title: string;
  data: ChartDataItem[];
  yAxisDataKey: string;
  barDataKey: string;
  fillColor: string;
  barName?: string;
}

export const GenericHorizontalBarChart = ({ 
  title, 
  data, 
  yAxisDataKey, 
  barDataKey, 
  fillColor,
  barName 
}: GenericHorizontalBarChartProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={350}>
          <BarChart 
            layout="vertical" 
            data={data} 
            margin={{
              top: 5,
              right: 30, 
              left: 20,
              bottom: 20, 
            }}
          >
            <CartesianGrid strokeDasharray="3 3" horizontal={false} />
            
            <XAxis type="number" stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
            
            <YAxis 
              type="category" 
              dataKey={yAxisDataKey} 
              stroke="hsl(var(--muted-foreground))" 
              fontSize={12} 
              tickLine={false} 
              axisLine={false}
              width={80} 
              tick={{ fill: 'hsl(var(--foreground))' }}
            />
            
            <Tooltip 
              cursor={{ fill: 'hsl(var(--muted))' }} 
              contentStyle={{ 
                backgroundColor: 'hsl(var(--background))', 
                borderColor: 'hsl(var(--border))',
                borderRadius: '0.5rem',
                boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
              }} 
            />
            
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: '20px' }} />
            
            <Bar 
              dataKey={barDataKey} 
              name={barName || "Valeur"} 
              fill={fillColor} 
              radius={[0, 4, 4, 0]} 
            >
              <LabelList 
                dataKey={barDataKey} 
                position="right" 
                style={{ fill: 'hsl(var(--foreground))', fontSize: '12px' }} 
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- layout/UserNavMenu.tsx ---
// src/layout/UserNavMenu.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui-admin/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { ChevronsUpDown, LogOut } from 'lucide-react';
import { cn } from '@/lib/utils';

interface UserNavMenuProps {
  isCollapsed: boolean;
}

export function UserNavMenu({ isCollapsed }: UserNavMenuProps) {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };

  const initials = user.name.split(' ').map((n) => n[0]).join('').toUpperCase();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className={cn(
            `w-full h-auto px-2 py-2 transition-all duration-300 text-black hover:bg-zinc-100`,
            isCollapsed ? 'justify-center' : 'justify-between'
          )}
        >
          <div className="flex items-center gap-3">
            <Avatar className="h-8 w-8"><AvatarFallback>{initials}</AvatarFallback></Avatar>
            {!isCollapsed && (
              <div className="flex flex-col items-start truncate text-left">
                <span className="text-sm font-medium">{user.name}</span>
                <span className="text-xs text-muted-foreground">{user.role}</span>
              </div>
            )}
          </div>
          {!isCollapsed && <ChevronsUpDown className="h-4 w-4 text-muted-foreground" />}
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.name}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.role}@winvest.capital
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer text-red-600 focus:text-red-600 focus:bg-red-50">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Déconnexion</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


# --- components/charts/GenericBarChart.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LabelList, Cell } from 'recharts';

interface ChartDataItem {
  [key: string]: string | number;
}

interface GenericBarChartProps {
  title: string;
  data: ChartDataItem[];
  xAxisDataKey: string;
  barDataKey: string;
  fillColor: string | ((entry: ChartDataItem, index: number) => string);
}

const chartColors = [
    'hsl(var(--chart-1))',
    'hsl(var(--chart-2))',
    'hsl(var(--chart-3))',
    'hsl(var(--chart-4))',
    'hsl(var(--chart-5))',
];

export const GenericBarChart = ({ title, data, xAxisDataKey, barDataKey, fillColor }: GenericBarChartProps) => {
  return (
    <Card className="h-full">
      <CardHeader><CardTitle>{title}</CardTitle></CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={data} margin={{ top: 20, right: 10, left: -20, bottom: 40 }}>
            <CartesianGrid strokeDasharray="3 3" vertical={false} />
            
            <XAxis 
              dataKey={xAxisDataKey} 
              stroke="hsl(var(--foreground))"
              fontSize={13} 
              tickLine={false} 
              axisLine={false}
              interval={0}
              angle={-45}
              textAnchor="end"
              height={60} 
            />

            <YAxis 
              stroke="hsl(var(--muted-foreground))" 
              fontSize={12} 
              tickLine={false} 
              axisLine={false} 
            />
            <Tooltip 
              cursor={{ fill: 'hsl(var(--muted))' }} 
              contentStyle={{ backgroundColor: 'hsl(var(--background))', borderColor: 'hsl(var(--border))' }} 
            />
            <Bar dataKey={barDataKey} radius={[4, 4, 0, 0]} fill={typeof fillColor === 'string' ? fillColor : undefined}>
              {typeof fillColor === 'function'
                ? data.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={fillColor(entry, index)} />
                  ))
                : null}
              <LabelList dataKey={barDataKey} position="top" style={{ fill: 'hsl(var(--foreground))', fontSize: '12px' }} />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/Combobox.tsx ---
// frontend-shadcn/src/components/ui/Combobox.tsx
"use client"

import * as React from "react"
import { Check, ChevronsUpDown } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui-admin/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui-admin/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui-admin/popover"

interface ComboboxProps {
  options: { value: string; label: string }[];
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  emptyMessage?: string;
}

export function Combobox({ options, value, onChange, placeholder = "Sélectionner...", emptyMessage = "Aucun résultat." }: ComboboxProps) {
  const [open, setOpen] = React.useState(false)

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between h-8"
        >
          {value
            ? options.find((option) => option.value === value)?.label
            : placeholder}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-full p-0" style={{minWidth: "var(--radix-popover-trigger-width)"}}>
        <Command>
          <CommandInput placeholder="Rechercher..." />
          <CommandList>
            <CommandEmpty>{emptyMessage}</CommandEmpty>
            <CommandGroup>
              {options.map((option) => (
                <CommandItem
                  key={option.value}
                  value={option.value}
                  onSelect={(currentValue) => {
                    onChange(currentValue === value ? "" : currentValue)
                    setOpen(false)
                  }}
                >
                  <Check
                    className={cn(
                      "mr-2 h-4 w-4",
                      value === option.value ? "opacity-100" : "opacity-0"
                    )}
                  />
                  {option.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )
}


# --- layout/UserNav.tsx ---
// src/layout/UserNav.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuGroup,
} from '@/components/ui-admin/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { LogOut, User as UserIcon } from 'lucide-react';

export function UserNav() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };

  const initials = (user.name || '').split(' ').map((n) => n[0]).join('').toUpperCase();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-10 w-10 rounded-full hover:bg-black/10">
          <Avatar className="h-10 w-10 border-2 border-white/50">
            <AvatarFallback className="bg-transparent text-white font-bold">{initials}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.name}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.email || `${user.role}@winvest.capital`}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem className="cursor-pointer">
            <UserIcon className="mr-2 h-4 w-4" />
            <span>Profil</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer text-red-600 focus:text-red-600 focus:bg-red-50">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Déconnexion</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


# --- components/ui-admin/slider.tsx ---
// src/components/ui-admin/slider.tsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        {/* MODIFICATION: La barre de progression utilise la couleur primaire */}
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        // MODIFICATION: Le curseur utilise la couleur primaire
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-primary ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }


# --- layout/AdminHeader.tsx ---
// src/layout/AdminHeader.tsx
import { useState } from 'react'; // 'useEffect' a été retiré car non utilisé
import { Button } from '@/components/ui-admin/button';
import { Sheet, SheetContent, SheetHeader, SheetTrigger } from '@/components/ui-admin/sheet';
import { Menu } from 'lucide-react';
import { AdminNavContent } from './AdminNavContent';
import { BrandLogo } from '@/components/ui-commercial/BrandLogo';
import { DateTimeDisplay } from './DateTimeDisplay';
import { UserNav } from './UserNav';

const AdminHeader = () => {
  const [isSheetOpen, setIsSheetOpen] = useState(false);

  return (
    <header className="sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b border-b-[hsl(var(--winvest-blue-moyen))] bg-[hsl(var(--winvest-blue-moyen))] px-4 text-white sm:px-6">
      {/* Section de gauche : Titre et menu hamburger pour mobile */}
      <div className="flex items-center gap-4">
        <div className="lg:hidden">
          <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon" className="border-white/30 bg-transparent text-white hover:bg-black/10">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[250px] p-0 bg-white">
              <SheetHeader className='p-4 border-b'><BrandLogo /></SheetHeader>
              <div className="py-4">
                <AdminNavContent isCollapsed={false} onLinkClick={() => setIsSheetOpen(false)} />
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <h1 className="text-xl md:text-2xl font-bold">Espace Admin</h1>
      </div>
      
      {/* Section de droite : Date, Heure et Menu Utilisateur */}
      <div className="flex items-center gap-4">
        <DateTimeDisplay />
        <div className="border-l h-8"></div> {/* Votre séparateur est bien conservé */}
        <UserNav />
      </div>
    </header>
  );
};

export default AdminHeader;


# --- pages/auth/Login.tsx ---
// src/pages/auth/Login.tsx

import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';

const Login = () => {
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleLogin = (role: 'admin' | 'manager' | 'directeur' | 'backoffice' | 'commercial') => {
    if (role === 'commercial') {
      // Pour le commercial, on redirige vers la page de sélection
      navigate('/select-commercial');
      return;
    }

    // Pour les autres rôles, on simule une connexion avec un utilisateur générique
    const userData = { 
        id: `${role}-user-id`, 
        name: `${role.charAt(0).toUpperCase() + role.slice(1)} User`, 
        role 
    };
    login(userData);
    navigate('/');
  };

  return (
    <div className="flex items-center justify-center h-screen bg-secondary">
      <Card className="w-[400px]">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl">Finanssor</CardTitle>
          <CardDescription>Veuillez vous connecter en choisissant un rôle.</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={() => handleLogin('admin')}>Connexion Admin</Button>
          <Button variant="outline" onClick={() => handleLogin('manager')}>Connexion Manager</Button>
          <Button variant="outline" onClick={() => handleLogin('directeur')}>Connexion Directeur</Button>
          <Button variant="outline" onClick={() => handleLogin('backoffice')}>Connexion Back-office</Button>
          {/* Le bouton commercial redirige maintenant */}
          <Button variant="outline" onClick={() => handleLogin('commercial')}>Connexion Commercial</Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default Login;


# --- layout/AdminSidebar.tsx ---
// src/layout/AdminSidebar.tsx
import { Button } from '@/components/ui-admin/button';
import { PanelLeftClose, PanelLeftOpen } from 'lucide-react';
import { AdminNavContent } from './AdminNavContent';
import { UserNavMenu } from './UserNavMenu';
import logo from '@/assets/logo.png';

interface AdminSidebarProps {
  isCollapsed: boolean;
  toggleSidebar: () => void;
}

export const AdminSidebar = ({ isCollapsed, toggleSidebar }: AdminSidebarProps) => {
  return (
    <aside
      className={`hidden lg:flex flex-col bg-[#FAFAFA] transition-all duration-300 sticky top-0 h-screen ${
        isCollapsed ? 'w-20' : 'w-64'
      }`}
    >
      {/* HEADER CORRIGÉ */}
      <div
        className={`flex items-center h-20 px-4 shrink-0 ${ // shrink-0 empêche le header de se réduire
          isCollapsed ? 'justify-center' : 'justify-between'
        }`}
      >
        {/* Le logo n'est visible que si la sidebar est dépliée */}
        {!isCollapsed && (
          // Le logo est dans un conteneur pour ne pas perturber le flexbox
          <div className="flex-1"> 
            <img
              src={logo}
              alt="Logo Groupe Finanssor"
              className="h-30 w-auto object-contain -translate-x-6" // Votre style est conservé
            />
          </div>
        )}

        {/* Bouton pour plier/déplier */}
        <Button
          variant="ghost"
          size="icon"
          onClick={toggleSidebar}
        >
          {isCollapsed ? <PanelLeftOpen className="h-5 w-5" /> : <PanelLeftClose className="h-5 w-5" />}
        </Button>
      </div>

      {/* NAVIGATION */}
      <div className="flex-1 overflow-y-auto"> {/* Ajout de overflow-y-auto pour les petits écrans */}
        <AdminNavContent isCollapsed={isCollapsed} />
      </div>

      {/* USER MENU */}
      <div className="p-2 border-t mt-auto shrink-0">
        <UserNavMenu isCollapsed={isCollapsed} />
      </div>
    </aside>
  );
};


# --- components/ui-admin/card.tsx ---
// src/components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border border-[#EFEDED] bg-card text-card-foreground",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


# --- layout/CommercialHeader.tsx ---
// src/layout/CommercialHeader.tsx
import { useState } from 'react';
import { Button } from '@/components/ui-admin/button';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui-admin/sheet';
import { Menu } from 'lucide-react';
import { CommercialNavContent } from './CommercialNavContent';
import { BrandLogo } from '@/components/ui-commercial/BrandLogo';
import { DateTimeDisplay } from './DateTimeDisplay';
import { UserNav } from './UserNav';

const CommercialHeader = () => {
  const [isSheetOpen, setIsSheetOpen] = useState(false);

  return (
    <header className="sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b border-b-[hsl(var(--winvest-blue-moyen))] bg-[hsl(var(--winvest-blue-moyen))] px-4 text-white sm:px-6">
      
      {/* Section de gauche */}
      <div className="flex items-center gap-4">
        <div className="lg:hidden">
          <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon" className="border-white/30 bg-transparent text-white hover:bg-black/10">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[250px] p-0 bg-white">
              <div className="p-4 border-b"><BrandLogo /></div>
              <div className="py-4 px-2">
                <CommercialNavContent isCollapsed={false} onLinkClick={() => setIsSheetOpen(false)} />
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <h1 className="text-xl md:text-2xl font-bold">Espace Commercial</h1>
      </div>
      
      {/* Section de droite */}
      <div className="flex items-center gap-4">
        <DateTimeDisplay />
        <UserNav />
      </div>
    </header>
  );
};

export default CommercialHeader;


# --- components/ui-admin/GenericRadialBarChart.tsx ---
// src/components/charts/GenericRadialBarChart.tsx

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { ResponsiveContainer, PolarAngleAxis, RadialBarChart, RadialBar } from 'recharts';

interface GenericRadialChartProps {
  title: string;
  value: number;
  total: number;
  color: string;
}

export const GenericRadialBarChart = ({ title, value, total, color }: GenericRadialChartProps) => {
  const percentage = total > 0 ? (value / total) * 100 : 0;
  const data = [{ name: 'objectif', value: percentage }];

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent className="flex-1 flex justify-center items-center relative">
        <ResponsiveContainer width="100%" height={200}>
          <RadialBarChart
            innerRadius="80%"
            outerRadius="100%"
            data={data}
            startAngle={90}
            endAngle={-270}
            cx="50%"
            cy="50%"
            barSize={15}
          >
            <PolarAngleAxis
              type="number"
              domain={[0, 100]}
              angleAxisId={0}
              tick={false}
            />
            <RadialBar
              background
              dataKey="value"
              cornerRadius={10}
              angleAxisId={0}
              className={color} // Utilise la classe de couleur passée
            />
          </RadialBarChart>
        </ResponsiveContainer>
        <div className="absolute flex flex-col items-center justify-center">
          <span className="text-4xl font-bold">{Math.round(percentage)}%</span>
          <span className="text-sm text-muted-foreground">{value} / {total}</span>
        </div>
      </CardContent>
    </Card>
  );
};


# --- layout/DateTimeDisplay.tsx ---
    // src/layout/DateTimeDisplay.tsx
import { useState, useEffect } from 'react';

// Hook personnalisé pour formater la date et l'heure
const useDateTime = () => {
    const [date, setDate] = useState(new Date());

    useEffect(() => {
        const timerId = setInterval(() => setDate(new Date()), 1000);
        return () => clearInterval(timerId);
    }, []);

    const day = date.toLocaleDateString('fr-FR', { weekday: 'long' });
    const dayNumber = date.getDate();
    const month = date.toLocaleDateString('fr-FR', { month: 'long' });

    const time = date.toLocaleTimeString('fr-FR', {
        hour: '2-digit',
        minute: '2-digit',
    });
    const seconds = date.toLocaleTimeString('fr-FR', { second: '2-digit' });

    // Capitaliser la première lettre du jour et du mois
    const formattedDay = day.charAt(0).toUpperCase() + day.slice(1);
    const formattedMonth = month.charAt(0).toUpperCase() + month.slice(1);

    return {
        dateString: `${formattedDay} ${dayNumber} ${formattedMonth}`,
        timeString: time,
        secondsString: seconds,
    };
};


export const DateTimeDisplay = () => {
  const { dateString, timeString} = useDateTime();

  return (
    <div className="hidden md:flex items-center gap-4 bg-black/10 px-4 py-1.5 rounded-lg border border-white/90">
      {/* Section Date */}
      <div className="text-right">
        <span className="text-sm font-semibold tracking-wide">{dateString}</span>
      </div>

      {/* Séparateur */}
      <div className="h-6 w-px bg-white/30"></div>

      {/* Section Heure */}
      <div className="flex items-baseline gap-1.5">
        <span className="text-2xl font-bold tracking-tighter">{timeString}</span>
        {/* Les secondes clignotent avec une opacité variable */}
      </div>
    </div>
  );
};


# --- services/equipe.service.ts ---
// frontend-shadcn/src/services/equipe.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/equipes';

import type { Commercial } from '@/types/types';

export interface EquipeFromApi {
  id: string;
  nom: string;
  managerId: string;
  commerciaux: Commercial[]; // Ajouté pour inclure les commerciaux
}

export interface EquipeDetailsFromApi {
    id: string;
    nom: string;
    manager: string;
    stats: {
        contratsSignes: number;
        rdvPris: number;
        perfMoyenne: number;
        classementGeneral: number | string;
        nbCommerciaux: number;
    };
    perfHistory: { name: string; perf: number }[];
    commerciaux: {
        id: string;
        nom: string;
        prenom: string;
        email: string;
        classement: number;
    }[];
}

const getEquipes = async (): Promise<EquipeFromApi[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getEquipeDetails = async (id: string): Promise<EquipeDetailsFromApi> => {
    const response = await axios.get(`${API_URL}/${id}/details`);
    return response.data;
};

const createEquipe = async (equipeData: { nom: string; managerId: string }) => {
  const response = await axios.post(API_URL, equipeData);
  return response.data;
};

const updateEquipe = async (id: string, equipeData: { nom: string; managerId: string }) => {
  const response = await axios.patch(`${API_URL}/${id}`, equipeData);
  return response.data;
};

const deleteEquipe = async (id: string) => {
  const response = await axios.delete(`${API_URL}/${id}`);
  return response.data;
};

export const equipeService = {
  getEquipes,
  getEquipeDetails,
  createEquipe,
  updateEquipe,
  deleteEquipe,
};


# --- services/manager.service.ts ---
// frontend-shadcn/src/services/manager.service.ts
import axios from 'axios';
import type { Manager } from '@/types/types'; // On réutilise le type existant

const API_URL = 'http://localhost:3000/managers'; // L'URL de notre back-end

// DTO pour la création/mise à jour, on peut les définir ici
type CreateManagerPayload = {
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
};

type UpdateManagerPayload = Partial<CreateManagerPayload>;

// Fonction pour récupérer tous les managers
const getManagers = async (): Promise<Manager[]> => {
  const response = await axios.get(API_URL);
  // On peut ajouter ici un mapping si les données de l'API ne correspondent pas exactement au type `Manager` du front.
  // Dans notre cas, elles correspondent, mais c'est une bonne pratique.
  return response.data;
};

// Fonction pour créer un manager
const createManager = async (data: CreateManagerPayload): Promise<Manager> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

// Fonction pour mettre à jour un manager
const updateManager = async (id: string, data: UpdateManagerPayload): Promise<Manager> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};
// AJOUT DE LA NOUVELLE FONCTION
const getManagerDetails = async (id: string): Promise<any> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};
// Fonction pour supprimer un manager
const deleteManager = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

export const managerService = {
  getManagers,
  createManager,
  getManagerDetails,
  updateManager,
  deleteManager,
};


# --- components/ui-admin/scroll-area.tsx ---
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }



# --- components/ui-admin/button-variants.ts ---
import { cva } from "class-variance-authority"

export const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)



# --- services/commercial.service.ts ---
// frontend-shadcn/src/services/commercial.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/commerciaux';

export type CommercialFromAPI = {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  equipeId?: string;
  managerId: string;
  historiques: { nbContratsSignes: number }[];
};

type CreateCommercialPayload = {
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
  equipeId?: string;
  managerId: string;
};

type UpdateCommercialPayload = Partial<CreateCommercialPayload>;

// Renommée pour éviter la confusion, mais la fonctionnalité est la même
const getCommerciaux = async (): Promise<CommercialFromAPI[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const createCommercial = async (data: CreateCommercialPayload): Promise<CommercialFromAPI> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

const updateCommercial = async (id: string, data: UpdateCommercialPayload): Promise<CommercialFromAPI> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};

const deleteCommercial = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

const getCommercialDetails = async (id: string): Promise<any> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

export const commercialService = {
  getCommerciaux,
  getCommercialDetails,
  createCommercial,
  updateCommercial,
  deleteCommercial,
};


# --- services/statistics.service.ts ---
// frontend-shadcn/src/services/statistics.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/statistics';

// Définition des types pour les filtres
export type PeriodType = 'WEEK' | 'MONTH' | 'YEAR';
export type StatEntityType = 'COMMERCIAL' | 'EQUIPE' | 'MANAGER';

export interface StatisticsQuery {
  period: PeriodType;
  entityType?: StatEntityType;
  entityId?: string;
}

// Le service pour récupérer les statistiques
const getStatistics = async (query: StatisticsQuery) => {
  // On utilise `params` pour qu'axios formate correctement les query params dans l'URL
  const response = await axios.get(API_URL, { params: query });
  return response.data;
};

const getStatsForCommercial = async (commercialId: string) => {
  const response = await axios.get(`${API_URL}/commercial/${commercialId}`);
  return response.data;
};

const getCommercialHistory = async (commercialId: string) => {
  const response = await axios.get(`${API_URL}/commercial/${commercialId}/history`);
  return response.data;
};

const getStatsForManager = async (managerId: string) => {
  const response = await axios.get(`${API_URL}/manager/${managerId}`);
  return response.data;
};

const getManagerPerformanceHistory = async (managerId: string) => {
  const response = await axios.get(`${API_URL}/manager/${managerId}/history`);
  return response.data;
};

export const statisticsService = {
  getStatistics,
  getStatsForCommercial,
  getCommercialHistory,
  getStatsForManager,
  getManagerPerformanceHistory,
};


# --- layout/CommercialSidebar.tsx ---
// src/layout/CommercialSidebar.tsx
import { Button } from '@/components/ui-admin/button';
import { PanelLeftClose, PanelLeftOpen } from 'lucide-react';
import { CommercialNavContent } from './CommercialNavContent';
import logo from '@/assets/logo.png';

interface CommercialSidebarProps {
  isCollapsed: boolean;
  toggleSidebar: () => void;
}

export const CommercialSidebar = ({ isCollapsed, toggleSidebar }: CommercialSidebarProps) => {
  return (
    <aside
      className={`hidden lg:flex flex-col bg-[#FAFAFA] transition-all duration-300 sticky top-0 h-screen ${
        isCollapsed ? 'w-20' : 'w-64'
      }`}
    >
      {/* HEADER (identique à AdminSidebar) */}
      <div className="relative flex items-center h-20 transition-all duration-300 justify-center">
        {!isCollapsed && (
          <img
            src={logo}
            alt="Logo Groupe Finanssor"
            className="h-30 w-auto object-contain -translate-x-6"
          />
        )}

        <Button
          variant="ghost"
          size="icon"
          onClick={toggleSidebar}
          className="absolute right-4"
        >
          {isCollapsed
            ? <PanelLeftOpen className="h-5 w-5" />
            : <PanelLeftClose className="h-5 w-5" />}
        </Button>
      </div>

      {/* NAVIGATION */}
      <div className="flex-1 py-4">
        <CommercialNavContent isCollapsed={isCollapsed} />
      </div>
    </aside>
  );
};



# --- pages/admin/Managers/managers-table/equipes-columns.tsx ---
// frontend-shadcn/src/pages/admin/manager-details-table/equipes-columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Users, Flag } from "lucide-react"
import type { Commercial } from '../../commerciaux/commerciaux-table/columns';

export type EquipeDuManager = {
  id: string
  nom: string
  nbCommerciaux: number
  commerciaux: Commercial[];
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

export const createEquipesColumns = (): ColumnDef<EquipeDuManager>[] => [
  {
    accessorKey: "nom",
    header: () => <Header title="Nom de l'équipe" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2 font-medium text-foreground">
        <Flag className="h-4 w-4 text-muted-foreground" />
        {row.getValue("nom")}
      </div>
    ),
  },
  {
    accessorKey: "nbCommerciaux",
    header: () => <div className="text-center"><Header title="Effectif" /></div>,
    cell: ({ row }) => (
      <div className="text-center flex items-center justify-center gap-2">
        <Users className="h-4 w-4 text-muted-foreground" />
        {row.getValue("nbCommerciaux")}
      </div>
    )
  },
  // La colonne "Actions" est supprimée. La navigation se fera au clic de la ligne.
]


# --- services/zone.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/zones';

export interface ZoneFromApi {
  id: string;
  nom: string;
  couleur: string;
  latitude: number;
  longitude: number;
  rayonMetres: number;
  createdAt: string;
}

export interface ZoneDetailsFromApi extends ZoneFromApi {
  stats: {
    nbImmeubles: number;
    totalContratsSignes: number;
    totalRdvPris: number;
  };
  immeubles: any[]; // Pour l'instant, on garde any pour la simplicité
}

const getZones = async (): Promise<ZoneFromApi[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getZoneDetails = async (id: string): Promise<ZoneDetailsFromApi> => {
  const response = await axios.get(`${API_URL}/${id}/details`);
  return response.data;
};

const createZone = async (zoneData: any) => {
  const response = await axios.post(API_URL, zoneData);
  return response.data;
};

const updateZone = async (id: string, zoneData: any) => {
  const response = await axios.patch(`${API_URL}/${id}`, zoneData);
  return response.data;
};

const deleteZone = async (id: string) => {
  const response = await axios.delete(`${API_URL}/${id}`);
  return response.data;
};

export const zoneService = {
  getZones,
  getZoneDetails,
  createZone,
  updateZone,
  deleteZone,
};



# --- components/ui-commercial/GoalProgressCard.tsx ---
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import { Progress } from '@/components/ui-admin/progress'; // Assurez-vous d'avoir ce composant
import { Target } from 'lucide-react';

interface GoalProgressCardProps {
  title: string;
  description: string;
  value: number;
  total: number;
}

export const GoalProgressCard = ({ title, description, value, total }: GoalProgressCardProps) => {
  const percentage = total > 0 ? (value / total) * 100 : 0;
  
  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-3">
            <Target className="h-6 w-6 text-primary" />
            <CardTitle>{title}</CardTitle>
        </div>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-3">
        <div className="flex justify-between items-baseline">
          <span className="text-3xl font-bold text-primary">{value}</span>
          <span className="text-lg text-muted-foreground">/ {total} contrats</span>
        </div>
        <Progress value={percentage} className="h-3" />
        <div className="text-right text-sm font-semibold">{Math.round(percentage)}% atteint</div>
      </CardContent>
    </Card>
  );
};


# --- pages/admin/suivi/SuiviSidebar.tsx ---
// src/pages/admin/suivi/SuiviSidebar.tsx
import { AudioPlayer } from './AudioPlayer';
import { HistoryList } from './HistoryList';
import type { Commercial, Transcription } from './types';

interface SuiviSidebarProps {
  activeCommercial: Commercial | null;
  transcriptions: Transcription[];
  commercialsMap: { [id: string]: { name: string; avatarFallback: string } };
  onHistoryItemClick: (transcription: Transcription) => void;
  liveText: string;
  isProspecting: boolean;
  audioChunks: Blob[]; // NOUVEAU
}

export const SuiviSidebar = (props: SuiviSidebarProps) => {
  return (
    <div className="bg-zinc-50 rounded-lg flex flex-col h-full gap-6 p-4 border border-zinc-200 shadow-sm">
      <AudioPlayer 
        activeCommercial={props.activeCommercial}
        liveText={props.liveText}
        isProspecting={props.isProspecting}
        audioChunks={props.audioChunks} // Transmission des données audio
      />
      <HistoryList 
        transcriptions={props.transcriptions} 
        onHistoryItemClick={props.onHistoryItemClick}
        commercials={props.commercialsMap}
      />
    </div>
  );
};


# --- components/ui-admin/Modal.tsx ---
// src/components/ui/Modal.tsx
import { X } from 'lucide-react';
import type { ReactNode } from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: ReactNode;
}

export const Modal = ({ isOpen, onClose, title, children }: ModalProps) => {
  if (!isOpen) {
    return null;
  }

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/80 animate-in fade-in-0"
      onClick={onClose}
    >
      <div
        className="relative bg-white rounded-lg shadow-xl w-full max-w-6xl animate-in zoom-in-95"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex items-center justify-between p-4">
          <h3 className="text-lg font-semibold">{title}</h3>
          <button onClick={onClose} className="p-1 rounded-full hover:bg-gray-200">
            <X className="h-5 w-5" />
          </button>
        </div>
        <div className="p-6">
          {children}
        </div>
      </div>
    </div>
  );
};


# --- services/assignment-goals.service.ts ---
import axios from 'axios';
import { AssignmentType } from '@/types/enums';

const API_URL = 'http://localhost:3000/assignment-goals';

const getAssignedZonesForCommercial = async (commercialId: string): Promise<any[]> => {
  const response = await axios.get(`${API_URL}/commercial/${commercialId}/zones`);
  return response.data;
};

// On inclut les autres fonctions pour que le service soit complet
const assignZone = async (zoneId: string, assigneeId: string, assigneeType: AssignmentType) => {
  const payload = { zoneId, assigneeId, assignmentType: assigneeType };
  const response = await axios.post(`${API_URL}/assign-zone`, payload);
  return response.data;
};

const setMonthlyGoal = async (commercialId: string, goal: number) => {
  const payload = { commercialId, goal };
  const response = await axios.post(`${API_URL}/set-monthly-goal`, payload);
  return response.data;
};

export const assignmentGoalsService = {
  getAssignedZonesForCommercial,
  assignZone,
  setMonthlyGoal,
};


# --- types/types.ts ---
export interface Commercial {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  equipeId?: string;
  managerId: string;
  currentMonthlyGoal?: number; // Ajouté pour correspondre au schéma Prisma
  historiques: { nbContratsSignes: number }[]; // Ajouté pour correspondre à l'API
}

export interface Manager {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  nbEquipes?: number; // Rendu optionnel car peut être calculé
  classement?: number; // Rendu optionnel car peut être calculé
  equipes?: {
    id: string;
    nom: string;
    commerciaux?: {
      id: string;
      nom: string;
      prenom: string;
      telephone?: string;
      historiques?: {
        nbContratsSignes: number;
      }[];
    }[];
  }[];
}

export interface Zone {
  id: string;
  nom: string;
  latitude: number;
  longitude: number;
  rayonMetres: number;
  couleur: string;
  createdAt: string;
}



# --- layout/CommercialLayout.tsx ---
// src/layout/CommercialLayout.tsx
import { useState } from 'react';
import { Outlet } from 'react-router-dom';
import { CommercialSidebar } from './CommercialSidebar';
import CommercialHeader from './CommercialHeader';

const CommercialLayout = () => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div className="flex h-screen bg-muted/40">
      <CommercialSidebar isCollapsed={isCollapsed} toggleSidebar={toggleSidebar} />
      <div className="flex-1 flex flex-col overflow-hidden">
        <CommercialHeader />
        <main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default CommercialLayout;


# --- components/ui-admin/progress.tsx ---
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"
import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName
export { Progress }


# --- pages/admin/suivi/types.ts ---
// src/pages/admin/suivi/types.ts

// Type pour un commercial, peut être enrichi
export interface Commercial {
    id: string;
    name: string;
    avatarFallback: string;
    position: [number, number]; // [latitude, longitude]
    equipe: string;
  }
  
  // Type pour une entrée de l'historique des transcriptions
  export interface Transcription {
    id: string;
    commercialId: string;
    commercialName: string;
    date: Date;
    snippet: string; // Un extrait de la transcription
    fullText: string; // La transcription complète
  }
  
  // Type pour une zone géographique
  export interface Zone {
    id: string;
    name: string;
    color: string;
    latlng: [number, number];
    radius: number;
  }


# --- App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



# --- pages/admin/Dashboard/TableSkeleton.tsx ---
// frontend-shadcn/src/pages/admin/TableSkeleton.tsx
import { Skeleton } from "@/components/ui-admin/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui-admin/card";

export const TableSkeleton = () => (
  <Card className="animate-in fade-in-0 duration-500">
    <CardHeader>
      <Skeleton className="h-6 w-1/2" />
    </CardHeader>
    <CardContent className="space-y-3">
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-10 w-full" />
    </CardContent>
  </Card>
);


# --- routes/PrivateRoute.tsx ---
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const PrivateRoute = () => {
  const { isAuthenticated } = useAuth();
  // Si l'utilisateur est authentifié, on affiche le contenu de la route (via Outlet)
  // Sinon, on le redirige vers la page de login
  return isAuthenticated ? <Outlet /> : <Navigate to="/login" replace />;
};

export default PrivateRoute;


# --- main.tsx ---
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { AuthProvider } from './contexts/AuthContext.tsx' // <-- Importer

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <AuthProvider> {/* <-- Envelopper App */}
      <App />
    </AuthProvider>
  </React.StrictMode>,
)


# --- components/ui-admin/skeleton.tsx ---
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


# --- lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



# --- types/assignment-type.ts ---
export enum AssignmentType {
  COMMERCIAL = 'COMMERCIAL',
  MANAGER = 'MANAGER',
}

