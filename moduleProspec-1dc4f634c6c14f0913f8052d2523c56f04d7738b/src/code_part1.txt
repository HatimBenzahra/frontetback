

# --- pages/admin/Dashboard/DashboardAdmin.tsx ---


import React, { useState, useEffect } from 'react';
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { cn } from '@/lib/utils';

// --- Imports des Composants ---
import StatCard from '@/components/ui-admin/StatCard';

import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { GenericBarChart } from '@/components/charts/GenericBarChart';
import { GenericRadialBarChart } from '@/components/ui-admin/GenericRadialBarChart';
import { Button } from '@/components/ui-admin/button';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover";
import { Calendar } from "@/components/ui-admin/calendar";
import { Badge } from "@/components/ui-admin/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Table, TableBody, TableCell, TableRow } from "@/components/ui-admin/table";

// --- Imports des Icônes ---
import { 
    BarChart3, Briefcase, FileSignature, Sparkles, Target, Calendar as CalendarIcon,
    Award, ClipboardCheck, Percent, UserCheck
} from 'lucide-react';

// --- Types pour les données du tableau de bord ---
type ActiviteRecenteItem = {
  id: number;
  commercial: string;
  action: string;
  type: string;
  temps: string;
};

interface DashboardStats {
  portesVisitees: number;
  rdvPris: number;
  contratsSignes: number;
  tauxOuverture: number;
  tauxRdv: number;
  tauxSignature: number;
  perfMoyenne: number;
  commerciauxActifs: number;
  heuresProspect: number;
}

interface ManagerStats {
  meilleurManager: string;
  tauxConclusionMoyen: number;
  rdvMoyen: number;
  effectifTotal: number;
}

interface ObjectifMensuel {
  value: number;
  total: number;
  title: string;
}

interface ChartData {
  name: string;
  [key: string]: string | number;
}

interface DashboardPeriodData {
  stats: DashboardStats;
  managerStats: ManagerStats;
  objectifMensuel: ObjectifMensuel;
  activiteRecente: ActiviteRecenteItem[];
  portesTopeesData: ChartData[];
  repartitionManagersData: ChartData[];
  classementManagersGraphData: ChartData[];
}

interface DashboardDataType {
  week: DashboardPeriodData;
  month: DashboardPeriodData;
  last_month: DashboardPeriodData;
  year_to_date: DashboardPeriodData;
  last_week: DashboardPeriodData;
  [key: string]: DashboardPeriodData; // Pour l'accès dynamique
}

// --- Données simulées enrichies ---
const dashboardData: DashboardDataType = {
  week: {
    stats: { portesVisitees: 82, rdvPris: 15, contratsSignes: 7, tauxOuverture: 18, tauxRdv: 18.3, tauxSignature: 46.7, perfMoyenne: 78, commerciauxActifs: 23, heuresProspect: 312 },
    managerStats: { meilleurManager: "Mme Martin", tauxConclusionMoyen: 42, rdvMoyen: 18, effectifTotal: 3 },
    objectifMensuel: { value: 7, total: 30, title: "Objectif Contrats (semaine)" },
    activiteRecente: [ { id: 1, commercial: "Alice Leroy", action: "Nouveau contrat", type: "CONTRAT", temps: "il y a 5 min" }, { id: 2, commercial: "Paul Girard", action: "RDV pris", type: "RDV", temps: "il y a 22 min" }, { id: 3, commercial: "Emma Bonnet", action: "Refus client", type: "REFUS", temps: "il y a 1h" }, { id: 4, commercial: "Hugo Moreau", action: "Nouveau contrat", type: "CONTRAT", temps: "il y a 2h" }, ],
    portesTopeesData: [{ name: 'Lun', Visites: 15, RDV: 3, Refus: 2 }, { name: 'Mar', Visites: 20, RDV: 4, Refus: 1 }, { name: 'Mer', Visites: 18, RDV: 2, Refus: 5 }, { name: 'Jeu', Visites: 25, RDV: 5, Refus: 3 }, { name: 'Ven', Visites: 4, RDV: 1, Refus: 1 }],
    repartitionManagersData: [{ name: 'M. Dupont', value: 40 }, { name: 'Mme Martin', value: 35 }, { name: 'M. Bernard', value: 25 }],
    classementManagersGraphData: [{ name: 'Dupont', value: 40 }, { name: 'Martin', value: 35 }, { name: 'Bernard', value: 32 }, { name: 'Robert', value: 28 }],
  },
  month: {
    stats: { portesVisitees: 450, rdvPris: 70, contratsSignes: 25, tauxOuverture: 15.5, tauxRdv: 15.5, tauxSignature: 35.7, perfMoyenne: 85, commerciauxActifs: 28, heuresProspect: 1248 },
    managerStats: { meilleurManager: "M. Dupont", tauxConclusionMoyen: 38, rdvMoyen: 85, effectifTotal: 5 },
    objectifMensuel: { value: 25, total: 100, title: "Objectif Contrats (mois)"},
    activiteRecente: [ { id: 1, commercial: "Sophie Marchand", action: "Nouveau contrat", type: "CONTRAT", temps: "hier" }, { id: 2, commercial: "Nicolas Blanc", action: "RDV pris", type: "RDV", temps: "hier" }, { id: 3, commercial: "Camille Picard", action: "RDV pris", type: "RDV", temps: "mardi" }, { id: 4, commercial: "Axel Garnier", action: "Refus client", type: "REFUS", temps: "mardi" }, ],
    portesTopeesData: [{ name: 'S1', Visites: 100, RDV: 15, Refus: 10 }, { name: 'S2', Visites: 120, RDV: 20, Refus: 15 }, { name: 'S3', Visites: 90, RDV: 18, Refus: 8 }, { name: 'S4', Visites: 140, RDV: 17, Refus: 12 }],
    repartitionManagersData: [{ name: 'M. Dupont', value: 150 }, { name: 'Mme Martin', value: 180 }, { name: 'M. Bernard', value: 120 }],
    classementManagersGraphData: [{ name: 'Martin', value: 180 }, { name: 'Dupont', value: 150 }, { name: 'Bernard', value: 120 }, { name: 'Robert', value: 110 }],
  },
  last_month: {} as DashboardPeriodData, 
  year_to_date: {} as DashboardPeriodData,
  last_week: {} as DashboardPeriodData,
};

dashboardData.last_month = dashboardData.month;
dashboardData.year_to_date = dashboardData.month;
dashboardData.last_week = dashboardData.week;

const ActivityBadge = ({ type }: { type: string }) => {
    switch (type) {
        case 'CONTRAT': return <Badge className="bg-emerald-100 text-emerald-800 border-emerald-300">Contrat</Badge>;
        case 'RDV': return <Badge className="bg-sky-100 text-sky-800 border-sky-300">RDV</Badge>;
        case 'REFUS': return <Badge className="bg-red-100 text-red-800 border-red-300">Refus</Badge>;
        default: return <Badge variant="secondary">{type}</Badge>;
    }
};

const CustomDatePicker = ({ onCancel, onValidate }: { onCancel: () => void; onValidate: (range: {from: Date, to: Date}) => void; }) => {
    const [startDate, setStartDate] = React.useState<Date | undefined>();
    const [endDate, setEndDate] = React.useState<Date | undefined>();
    return (
        <div className="flex flex-wrap items-center gap-2 rounded-lg border p-2 bg-background shadow-sm">
            <Popover>
                <PopoverTrigger asChild><Button variant="outline" className="w-[200px] font-normal justify-start text-left"><CalendarIcon className="mr-2 h-4 w-4" />{startDate ? format(startDate, 'd LLL y', { locale: fr }) : <span>Date de début</span>}</Button></PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={startDate} onSelect={setStartDate} initialFocus /></PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild><Button variant="outline" className="w-[200px] font-normal justify-start text-left"><CalendarIcon className="mr-2 h-4 w-4" />{endDate ? format(endDate, 'd LLL y', { locale: fr }) : <span>Date de fin</span>}</Button></PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={endDate} onSelect={setEndDate} initialFocus /></PopoverContent>
            </Popover>
            <Button className="bg-green-600 hover:bg-green-700" onClick={() => onValidate({ from: startDate!, to: endDate! })} disabled={!startDate || !endDate}>Valider</Button>
            <Button variant="ghost" onClick={onCancel}>Annuler</Button>
        </div>
    );
};

const TextStatCard = ({ title, value, Icon, color }: { title: string; value: string; Icon: React.ElementType; color?: string; }) => {
    return (
      <Card className="transition-transform duration-300 hover:scale-[1.03] hover:shadow-lg">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">{title}</CardTitle>
          <Icon className={cn("h-4 w-4 text-muted-foreground", color)} />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{value}</div>
        </CardContent>
      </Card>
    );
};


const DashboardAdmin = () => {
    const [timeFilter, setTimeFilter] = useState<keyof DashboardDataType>('week');
    const [activePreset, setActivePreset] = useState<keyof DashboardDataType | 'custom'>('week');
    const [isCustomMode, setIsCustomMode] = useState(false);
    const [displayRangeLabel, setDisplayRangeLabel] = useState<string | null>(null);

    const handleTimeFilterChange = (filterKey: keyof DashboardDataType) => {
        setActivePreset(filterKey);
        setDisplayRangeLabel(null);
        setTimeFilter(dashboardData[filterKey] ? filterKey : 'week');
    };

    const handleCustomValidate = (range: {from: Date, to: Date}) => {
        const newLabel = `${format(range.from, "d LLL y", { locale: fr })} - ${format(range.to, "d LLL y", { locale: fr })}`;
        setDisplayRangeLabel(newLabel);
        handleTimeFilterChange("year_to_date");
        setIsCustomMode(false);
        setActivePreset("custom");
    };

    useEffect(() => {
        const timer = setTimeout(() => {}, 1000);
        return () => clearTimeout(timer);
    }, []);

    const currentData = dashboardData[timeFilter] || dashboardData.week;

    return (
        <div className="space-y-8 bg-zinc-50/50 p-4 sm:p-6 rounded-xl">
            <div className="flex flex-wrap gap-4 justify-between items-center animate-in fade-in duration-500 border-b pb-4">
                <h2 className="text-2xl font-semibold flex items-baseline gap-3 text-zinc-900">
                    <BarChart3 className="h-6 w-6 text-primary self-center"/>
                    <span>Statistiques d'ensemble</span>
                    {displayRangeLabel && <span className="text-lg font-normal text-muted-foreground tracking-tight">({displayRangeLabel})</span>}
                </h2>
                {!isCustomMode ? (
                     <div className="flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'week' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair)))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('week')}>Cette semaine</Button>
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'month' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair)))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('month')}>Ce mois</Button>
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'last_month' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair)))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('last_month')}>Mois dernier</Button>
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'year_to_date' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair)))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('year_to_date')}>Cette année</Button>
                        <Button variant="ghost" className="border-l rounded-l-none" onClick={() => setIsCustomMode(true)}>Personnalisé</Button>
                     </div>
                ) : ( <CustomDatePicker onCancel={() => { setIsCustomMode(false); setActivePreset(timeFilter); }} onValidate={handleCustomValidate} /> )}
            </div>

            <section>
                <h3 className="text-lg font-semibold mb-4 text-zinc-900">Indicateurs Commerciaux</h3>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 animate-in fade-in-0 [animation-delay:100ms] duration-500">
                    <StatCard title="Contrats Signés" value={currentData.stats.contratsSignes} Icon={FileSignature} color="text-emerald-500" />
                    <StatCard title="RDV Pris" value={currentData.stats.rdvPris} Icon={Briefcase} color="text-sky-500" />
                    <StatCard title="Taux de Signature" value={currentData.stats.tauxSignature} Icon={Sparkles} suffix="%" color="text-violet-500" />
                    <StatCard title="Performance Moyenne" value={currentData.stats.perfMoyenne} Icon={Target} suffix="%" color="text-amber-500" />
                </div>
            </section>
            
            <section>
                <h3 className="text-lg font-semibold mb-4 text-zinc-900">Indicateurs Managers</h3>
                 <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 animate-in fade-in-0 [animation-delay:200ms] duration-500">
                    <TextStatCard title="Meilleur Manager" value={currentData.managerStats.meilleurManager} Icon={Award} color="text-yellow-500" />
                    <StatCard title="Taux Conclusion Moyen" value={currentData.managerStats.tauxConclusionMoyen} Icon={Percent} suffix="%" color="text-green-500" />
                    <StatCard title="RDV Moyen / Manager" value={currentData.managerStats.rdvMoyen} Icon={ClipboardCheck} color="text-blue-500" />
                    <StatCard title="Effectif total des managers" value={currentData.managerStats.effectifTotal} Icon={UserCheck} color="text-indigo-500" />
                </div>
            </section>

            <section className="grid grid-cols-1 lg:grid-cols-3 gap-6 animate-in fade-in-0 [animation-delay:300ms] duration-500">
                <GenericRadialBarChart title={currentData.objectifMensuel.title} value={currentData.objectifMensuel.value} total={currentData.objectifMensuel.total} color="fill-emerald-500" />
                <div className="lg:col-span-2">
                    <Card className="h-full"><CardHeader><CardTitle>Flux d'activité récent</CardTitle><CardDescription>Les dernières actions importantes enregistrées.</CardDescription></CardHeader>
                        <CardContent><Table><TableBody>
                            {currentData.activiteRecente.map((item: ActiviteRecenteItem) => (
                                <TableRow key={item.id} className="animate-in fade-in slide-in-from-bottom-2 duration-700">
                                    <TableCell><div className="font-medium">{item.commercial}</div></TableCell>
                                    <TableCell><ActivityBadge type={item.type} /></TableCell>
                                    <TableCell className="text-right text-muted-foreground">{item.temps}</TableCell>
                                </TableRow>
                            ))}
                        </TableBody></Table></CardContent>
                    </Card>
                </div>
            </section>
            
            <section className="animate-in fade-in-0 [animation-delay:400ms] duration-500">
                 <GenericBarChart title="Performances par Manager (Portes Prospectées)" data={currentData.classementManagersGraphData} xAxisDataKey="name" barDataKey="value" fillColor={() => 'hsl(var(--chart-1))'}/>
            </section>

            <section className="grid gap-6 md:grid-cols-2 lg:grid-cols-7 animate-in fade-in-0 [animation-delay:500ms] duration-500">
                <div className="lg:col-span-4">
                  <GenericLineChart title="Activité de prospection" data={currentData.portesTopeesData} xAxisDataKey="name" lines={[ { dataKey: 'Visites', name: "Visites", stroke: 'hsl(var(--chart-1))' }, { dataKey: 'RDV', name: "RDV", stroke: 'hsl(var(--chart-2))' }, { dataKey: 'Refus', name: "Refus", stroke: 'hsl(var(--chart-3))' } ]}/>
                </div>
                <div className="lg:col-span-3">
                  <GenericPieChart title="Répartition des Visites par Manager" data={currentData.repartitionManagersData} dataKey="value" nameKey="name" colors={['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-4))']}/>
                </div>
            </section>
        </div>
    );
};

export default DashboardAdmin;


# --- pages/commercial/ProspectingDoorsPage.tsx ---
// src/pages/commercial/ProspectingDoorsPage.tsx
import { useState, useMemo, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui-admin/card';
import { DataTable } from '@/components/data-table/DataTable';
import { createDoorsColumns, type Porte, statusConfig, statusList, type PorteStatus } from './doors-columns';
import { ArrowLeft, Building } from 'lucide-react';
import { Input } from '@/components/ui-admin/input';
import { Button } from '@/components/ui-admin/button';
import { Skeleton } from '@/components/ui-admin/skeleton';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from '@/components/ui-admin/dialog';
import { Label } from '@/components/ui-admin/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui-admin/select';
import { Checkbox } from '@/components/ui-admin/checkbox';
import { immeubleService, type ImmeubleDetailsFromApi } from '@/services/immeuble.service';
import { porteService } from '@/services/porte.service';
import { cn } from '@/lib/utils';


const LoadingSkeleton = () => (
    <div className="container mx-auto py-8">
        <Skeleton className="h-10 w-48 mb-4" />
        <Card>
            <CardHeader>
                <Skeleton className="h-8 w-3/4" />
                <Skeleton className="h-4 w-1/2 mt-2" />
            </CardHeader>
            <CardContent>
                <div className="space-y-2">
                    <Skeleton className="h-12 w-full" />
                    <Skeleton className="h-12 w-full" />
                    <Skeleton className="h-12 w-full" />
                </div>
            </CardContent>
        </Card>
    </div>
);

const ProspectingDoorsPage = () => {
    const { buildingId } = useParams<{ buildingId: string }>();
    const navigate = useNavigate();
    const [building, setBuilding] = useState<ImmeubleDetailsFromApi | null>(null);
    const [portes, setPortes] = useState<Porte[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingDoor, setEditingDoor] = useState<Porte | null>(null);
    const [isSaving, setIsSaving] = useState(false);
    const [saveError, setSaveError] = useState<string | null>(null);

    useEffect(() => {
        if (!buildingId) return;
        immeubleService.getImmeubleDetails(buildingId).then(details => {
            if (details) {
                setBuilding(details);
                const portesFromAPI = details.portes.map(p => ({
                    id: p.id,
                    numero: p.numeroPorte,
                    statut: p.statut as PorteStatus,
                    commentaire: p.commentaire || "",
                    repassage: p.passage > 0, // Ou une autre logique si nécessaire
                    passage: p.passage,
                    nbPassages: p.nbPassages,
                }));
                setPortes(portesFromAPI);
            }
            setIsLoading(false);
        }).catch(error => {
            console.error("Erreur lors du chargement des détails de l'immeuble:", error);
            setIsLoading(false);
        });
    }, [buildingId]);

    const handleEdit = (doorId: string) => {
        const doorToEdit = portes.find(p => p.id === doorId);
        if (doorToEdit) {
            setEditingDoor(doorToEdit);
            setIsModalOpen(true);
        }
    };

    const handleSaveDoor = async (updatedDoor: Porte) => {
        setIsSaving(true);
        setSaveError(null);
        try {
            await porteService.updatePorte(updatedDoor.id, {
                status: updatedDoor.statut,
                commentaire: updatedDoor.commentaire,
                nbPassages: updatedDoor.nbPassages,
                repassage: updatedDoor.repassage,
            });
            setPortes(portes.map(p => p.id === updatedDoor.id ? updatedDoor : p));
            setIsModalOpen(false);
            setEditingDoor(null);
        } catch (error) {
            setSaveError("Erreur lors de la sauvegarde. Veuillez réessayer.");
            console.error("Erreur lors de la mise à jour de la porte:", error);
        } finally {
            setIsSaving(false);
        }
    };

    const columns = useMemo(() => createDoorsColumns(handleEdit), []);

    if (isLoading) {
        return <LoadingSkeleton />;
    }

    if (!building) {
        return (
            <div className="container mx-auto py-8 text-center">
                <h2 className="text-xl font-semibold">Immeuble non trouvé</h2>
                <p className="text-muted-foreground mt-2">Impossible de charger les détails pour cet immeuble.</p>
                <Button variant="outline" onClick={() => navigate('/commercial/prospecting')} className="mt-4">
                    Retour à la sélection
                </Button>
            </div>
        );
    }

    return (
        <div className="container mx-auto py-8">
            <Button variant="outline" onClick={() => navigate(`/commercial/prospecting/setup/${buildingId}`)} className="mb-4">
                <ArrowLeft className="mr-2 h-4 w-4" /> Retour au choix du mode
            </Button>
            <Card>
                <CardHeader>
                    <CardTitle className="text-2xl flex items-center gap-3">
                        <Building className="h-6 w-6 text-primary" />
                        Prospection : {building.adresse}
                    </CardTitle>
                    <CardDescription>
                        Voici la liste des {building.nbPortesTotal} portes à prospecter. Mettez à jour leur statut au fur et à mesure.
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <DataTable
                        title="Portes"
                        columns={columns}
                        data={portes}
                        filterColumnId="numero"
                        filterPlaceholder="Rechercher un n° de porte..."
                        isDeleteMode={false}
                        onAddEntity={() => {}}
                        onConfirmDelete={() => {}}
                        onToggleDeleteMode={() => {}}
                        rowSelection={{}}
                        setRowSelection={() => {}}
                    />
                </CardContent>
            </Card>

            {editingDoor && (
                <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
                    <DialogContent className="sm:max-w-[425px] bg-white">
                        <DialogHeader>
                            <DialogTitle>Éditer la Porte n°{editingDoor.numero}</DialogTitle>
                            <CardDescription>
                                Mettez à jour les informations de cette porte.
                            </CardDescription>
                        </DialogHeader>
                        <div className="grid gap-6 py-4">
                            <div className="grid grid-cols-1 gap-3">
                                <Label htmlFor="statut">Statut</Label>
                                <Select
                                    value={editingDoor.statut}
                                    onValueChange={(value) => setEditingDoor({ ...editingDoor, statut: value as PorteStatus })}
                                >
                                    <SelectTrigger id="statut">
                                        <SelectValue>
                                            {editingDoor.statut ? (
                                                <div className="flex items-center gap-2">
                                                    <span className={cn("h-2 w-2 rounded-full", statusConfig[editingDoor.statut]?.className)} />
                                                    <span>{editingDoor.statut}</span>
                                                </div>
                                            ) : (
                                                "Sélectionner un statut"
                                            )}
                                        </SelectValue>
                                    </SelectTrigger>
                                    <SelectContent position="popper">
                                        {statusList.map((status) => {
                                            const config = statusConfig[status];
                                            const Icon = config.icon;
                                            return (
                                                <SelectItem key={status} value={status}>
                                                    <div className="flex items-center gap-2">
                                                        <Icon className={cn("h-4 w-4", config.className)} />
                                                        <span>{status}</span>
                                                    </div>
                                                </SelectItem>
                                            );
                                        })}
                                    </SelectContent>
                                </Select>
                            </div>
                            <div className="grid grid-cols-1 gap-3">
                                <Label htmlFor="commentaire">Commentaire</Label>
                                <Input
                                    id="commentaire"
                                    value={editingDoor.commentaire}
                                    onChange={(e) => setEditingDoor({ ...editingDoor, commentaire: e.target.value })}
                                    placeholder="Ajouter un commentaire..."
                                />
                            </div>
                            <div className="grid grid-cols-2 items-center gap-4">
                                <div className="flex items-center gap-2">
                                    <Checkbox
                                        id="repassage"
                                        checked={editingDoor.repassage}
                                        onCheckedChange={(checked) => setEditingDoor({ ...editingDoor, repassage: checked as boolean })}
                                    />
                                    <Label htmlFor="repassage" className="font-medium">À repasser</Label>
                                </div>
                                <div className="grid grid-cols-2 items-center gap-2">
                                    <Label htmlFor="nbPassages" className="text-right">Passages</Label>
                                    <Input
                                        id="nbPassages"
                                        type="number"
                                        min="0"
                                        value={editingDoor.nbPassages}
                                        onChange={(e) => setEditingDoor({ ...editingDoor, nbPassages: parseInt(e.target.value, 10) || 0 })}
                                        className="w-full"
                                    />
                                </div>
                            </div>
                        </div>
                        <DialogFooter>
                            <DialogClose asChild>
                                <Button type="button" variant="secondary" className="bg-gray-200 text-black hover:bg-gray-300">Annuler</Button>
                            </DialogClose>
                            <Button type="submit" onClick={() => handleSaveDoor(editingDoor)} className="bg-green-600 text-white hover:bg-green-700" disabled={isSaving}>
                                {isSaving ? "Enregistrement..." : "Enregistrer"}
                            </Button>
                        </DialogFooter>
                        {saveError && <p className="text-red-500 text-sm mt-2">{saveError}</p>}
                    </DialogContent>
                </Dialog>
            )}
        </div>
    );
};

export default ProspectingDoorsPage;


# --- pages/admin/zones/ZoneCreatorModal.tsx ---
// frontend-shadcn/src/pages/admin/zones/ZoneCreatorModal.tsx

import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Circle, Marker, useMapEvents, Popup, useMap, FeatureGroup } from 'react-leaflet';
import type { FeatureGroup as FeatureGroupType, LatLng } from 'leaflet';
import L from 'leaflet';
import 'leaflet-geosearch/dist/geosearch.css';
import { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Label } from '@/components/ui-admin/label';
import { Check, X, RotateCcw, MousePointerClick } from 'lucide-react';
import type { Zone as ZoneTableType } from './columns';

// --- Patch Leaflet et icônes ---
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});
const searchMarkerIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(206, 92%, 52%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search-code"><path d="M15.5 15.5 20 20"/><path d="M9 13a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z"/><path d="m14 14-2.5 2.5"/><path d="m14 6-2.5-2.5"/><path d="m6 14-2.5 2.5"/><path d="m6 6 2.5-2.5"/></svg>'),
    iconSize: [32, 32], iconAnchor: [16, 32], popupAnchor: [0, -32],
});
const zoneCenterIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(222.2 47.4% 11.2%)" stroke="white" stroke-width="2"><circle cx="12" cy="12" r="6"/></svg>'),
    iconSize: [16, 16], iconAnchor: [8, 8], popupAnchor: [0, -8],
});

interface ZoneCreatorModalProps {
  onValidate: (data: { id?: string; center: LatLng; radius: number; name: string; color: string; }) => void;
  onClose: () => void;
  existingZones: ZoneTableType[]; 
  zoneToEdit?: ZoneTableType | null;
}

const MapEventsHandler = ({ onMapClick, onMouseMove, step }: any) => {
    useMapEvents({
        click: (e) => { if (step === 1) onMapClick(e.latlng, 2); else if (step === 2) onMapClick(e.latlng, 3); },
        mousemove: (e) => { if (step === 2) onMouseMove(e.latlng); }
    });
    return null;
};
const SearchControl = () => {
    const map = useMap();
    useEffect(() => {
        const provider = new OpenStreetMapProvider({ params: { countrycodes: 'fr', 'accept-language': 'fr' } });
        // @ts-ignore
        const searchControl = new GeoSearchControl({ provider: provider, style: 'bar', marker: { icon: searchMarkerIcon, draggable: false, }, showPopup: false, autoClose: true, retainZoomLevel: false, animateZoom: true, keepResult: true, searchLabel: 'Entrez une adresse...', updateMap: false, });
        const onLocationFound = (event: any) => { if (event.location && event.location.y && event.location.x) { map.flyTo(new L.LatLng(event.location.y, event.location.x), 14, { animate: true, duration: 1.5 }); } };
        map.addControl(searchControl);
        map.on('geosearch/showlocation', onLocationFound);
        return () => { map.removeControl(searchControl); map.off('geosearch/showlocation', onLocationFound); };
    }, [map]);
    return null;
};

// MODIFICATION : Logique de centrage de la carte améliorée
const MapBoundsFitter = ({ featureGroupRef, zones, zoneToEdit }: { featureGroupRef: React.RefObject<FeatureGroupType | null>; zones: ZoneTableType[]; zoneToEdit: ZoneTableType | null; }) => {
    const map = useMap();
    useEffect(() => {
        // En mode édition, la carte est déjà centrée via le state `center` du composant parent.
        if (zoneToEdit) return;

        // En mode ajout, on centre sur les zones existantes.
        if (!featureGroupRef.current || zones.length === 0) {
            map.setView([48.8566, 2.3522], 12); // Fallback sur Paris si aucune zone
            return;
        }

        const bounds = featureGroupRef.current.getBounds();
        if (bounds.isValid()) {
            map.fitBounds(bounds, { padding: [50, 50] });
        } else if (zones.length > 0) {
            // Fallback si les limites ne sont pas valides (ex: 1 seule zone), on centre dessus.
            map.setView(zones[0].latlng, 13);
        }
    }, [zones, featureGroupRef, map, zoneToEdit]); 
    return null;
};

const ZoneMarker = ({ zone }: { zone: { latlng: L.LatLngExpression } }) => {
    const map = useMap();
    const handleDoubleClick = () => { map.flyTo(zone.latlng, 15, { animate: true, duration: 1.5 }); };
    return ( <Marker position={zone.latlng} icon={zoneCenterIcon} eventHandlers={{ dblclick: handleDoubleClick }} /> );
};

export const ZoneCreatorModal = ({ onValidate, onClose, existingZones, zoneToEdit }: ZoneCreatorModalProps) => {
    const isEditMode = !!zoneToEdit;

    const [center, setCenter] = useState<L.LatLng | null>(isEditMode ? L.latLng(zoneToEdit.latlng[0], zoneToEdit.latlng[1]) : null);
    const [radius, setRadius] = useState(isEditMode ? zoneToEdit.radius : 0);
    const [step, setStep] = useState(isEditMode ? 2 : 1);
    const [zoneName, setZoneName] = useState(isEditMode ? zoneToEdit.name : '');
    const [zoneColor, setZoneColor] = useState(isEditMode ? zoneToEdit.color : '#3388ff');
    
    const featureGroupRef = useRef<FeatureGroupType>(null);

    const handleMapClick = (latlng: L.LatLng, nextStep: number) => {
        if (step === 1) {
            setCenter(latlng);
        }
        setStep(nextStep);
    };

    const handleMouseMove = (latlng: L.LatLng) => { 
        if (center) {
            setRadius(center.distanceTo(latlng)); 
        }
    };
    
    const handleReset = () => { 
        setCenter(null); 
        setRadius(0); 
        setStep(1); 
        setZoneName(''); 
        setZoneColor('#3388ff'); 
    };

    const handleValidate = () => {
        if (center && zoneName && radius > 0) {
            onValidate({
                id: zoneToEdit?.id, center, radius, name: zoneName, color: zoneColor
            });
        }
    };
    
    return (
        <div className="fixed inset-0 z-[100] bg-black/80 flex flex-col p-4 animate-in fade-in-0">
             <div className="flex-1 w-full relative">
                <MapContainer center={center ? [center.lat, center.lng] : [48.8566, 2.3522]} zoom={13} style={{ height: '100%', width: '100%', borderRadius: '0.5rem', cursor: step < 3 ? 'crosshair' : 'default' }}>
                    <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution='© OpenStreetMap' />
                    <SearchControl />
                    <MapEventsHandler onMapClick={handleMapClick} onMouseMove={handleMouseMove} step={step} />
                    {/* MODIFICATION : On passe zoneToEdit pour une logique de centrage plus intelligente */}
                    <MapBoundsFitter featureGroupRef={featureGroupRef} zones={existingZones} zoneToEdit={zoneToEdit ?? null} />
                    <FeatureGroup ref={featureGroupRef}>
                        {/* Cette logique affiche bien les zones existantes, en excluant celle en cours d'édition */}
                        {existingZones.filter(z => z.id !== zoneToEdit?.id).map(zone => (
                            <React.Fragment key={`existing-${zone.id}`}>
                                <Circle center={zone.latlng} radius={zone.radius} pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2, weight: 2, dashArray: '5, 5' }} >
                                    <Popup><b>{zone.name}</b> (existante)</Popup>
                                </Circle>
                                <ZoneMarker zone={zone} />
                            </React.Fragment>
                        ))}
                    </FeatureGroup>
                    {center && <Marker position={center} />}
                    {center && radius > 0 && <Circle center={center} radius={radius} pathOptions={{ color: zoneColor, fillColor: zoneColor, fillOpacity: 0.35 }} />}
                </MapContainer>
                
                <div className="absolute top-4 left-4 z-[1000] bg-white p-4 rounded-lg shadow-xl w-full max-w-sm">
                    <div className="flex justify-between items-center mb-2">
                        <h3 className="font-semibold text-lg">
                            {isEditMode ? "Modifier la Zone" : step === 1 ? "Étape 1: Définir le centre" : step === 2 ? "Étape 2: Définir le rayon" : "Étape 3: Nommer la zone"}
                        </h3>
                        <Button variant="ghost" size="icon" onClick={handleReset} title="Recommencer le tracé"><RotateCcw className="h-4 w-4" /></Button>
                    </div>
                    {step < 3 && (
                        <p className="text-sm text-muted-foreground flex items-center gap-2"><MousePointerClick className="h-4 w-4"/>
                            {step === 1 ? 'Cliquez pour placer le centre.' : 'Déplacez pour ajuster, puis cliquez pour fixer le rayon.'}
                        </p>
                    )}
                    {step >= 2 && (
                        <div className="space-y-3 animate-in fade-in-0 pt-2">
                            <div className="space-y-1"><Label htmlFor="zone-name">Nom de la zone</Label><Input id="zone-name" value={zoneName} onChange={e => setZoneName(e.target.value)} placeholder="Ex: Zone Commerciale Nord"/></div>
                            <div className="space-y-1">
                                <Label htmlFor="zone-color">Couleur de la zone</Label>
                                <Input id="zone-color" type="color" value={zoneColor} onChange={e => setZoneColor(e.target.value)} />
                            </div>
                        </div>
                    )}
                </div>

                <div className="absolute top-4 right-4 z-[1000] flex flex-col gap-2">
                    <Button onClick={handleValidate} className="bg-green-600 text-white hover:bg-green-700" disabled={!center || radius <= 0 || !zoneName}>
                        <Check className="mr-2 h-4 w-4" />{isEditMode ? "Enregistrer" : "Valider"}
                    </Button>
                    <Button onClick={onClose} variant="secondary" className="bg-white hover:bg-zinc-100">
                        <X className="mr-2 h-4 w-4" />Fermer
                    </Button>
                </div>
            </div>
        </div>
    );
};


# --- components/data-table/DataTable.tsx ---
import * as React from "react"
import { useNavigate } from "react-router-dom"
import {
  type ColumnDef, type ColumnFiltersState, type SortingState, type RowSelectionState, type Row,
  flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel,
  getSortedRowModel, useReactTable,
} from "@tanstack/react-table"
import { PlusCircle, Search, Trash2, XCircle } from "lucide-react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui-admin/table"
import { Button } from "@/components/ui-admin/button"
import { Input } from "@/components/ui-admin/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui-admin/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select"
import { cn } from "@/lib/utils"

interface DataTableProps<TData extends { id: string }, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  filterColumnId: string
  filterPlaceholder: string
  title: string
  rowLinkBasePath?: string
  onRowClick?: (row: TData) => void
  addEntityButtonText?: string
  onAddEntity?: () => void
  isDeleteMode: boolean
  onToggleDeleteMode: () => void
  onConfirmDelete: (selectedRows: TData[]) => void
  rowSelection: RowSelectionState
  setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>>
  customHeaderContent?: React.ReactNode
  noCardWrapper?: boolean;
}

export function DataTable<TData extends { id: string }, TValue>({
  columns, data, filterColumnId, filterPlaceholder, title, rowLinkBasePath, onRowClick,
  addEntityButtonText, onAddEntity,
  isDeleteMode, onToggleDeleteMode, onConfirmDelete,
  rowSelection, setRowSelection,
  customHeaderContent,
  noCardWrapper = false,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])
  const [searchFocused, setSearchFocused] = React.useState(false)
  const navigate = useNavigate()

  const table = useReactTable({
    data, columns, onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters, onRowSelectionChange: setRowSelection,
    getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(), getFilteredRowModel: getFilteredRowModel(),
    state: { sorting, columnFilters, rowSelection },
  })

  const selectedRowsData = table.getFilteredSelectedRowModel().rows.map(row => row.original)
  const areRowsClickable = (onRowClick || rowLinkBasePath) && !isDeleteMode

  const handleRowClick = (row: Row<TData>) => {
    if (isDeleteMode) {
      row.toggleSelected()
    } else if (onRowClick) {
      onRowClick(row.original)
    } else if (rowLinkBasePath) {
      navigate(`${rowLinkBasePath}/${row.original.id}`)
    }
  }

  const tableContent = (
    <>
      {title && (
        <CardHeader>
          <CardTitle>{title}</CardTitle>
        </CardHeader>
      )}
      
      <CardContent className={!title ? "pt-6" : ""}>
        <div className="flex flex-wrap items-center justify-between gap-4 mb-4">
          <div className={cn(
            "relative w-full md:w-auto transition-all",
            searchFocused ? "ring-2 ring-primary/30 rounded-md" : "",
          )}>
            <Search className={cn(
              "absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 transition-all",
              searchFocused ? "text-primary" : "text-muted-foreground"
            )} />
            <Input
              placeholder={filterPlaceholder}
              value={(table.getColumn(filterColumnId)?.getFilterValue() as string) ?? ""}
              onChange={e=>table.getColumn(filterColumnId)?.setFilterValue(e.target.value)}
              className="pl-10 w-full min-w-[280px] md:min-w-[320px]"
              onFocus={()=>setSearchFocused(true)}
              onBlur={()=>setSearchFocused(false)}
              aria-label="Rechercher"
            />
          </div>

          <div className="flex flex-wrap items-center gap-2">
            {customHeaderContent}
            {!isDeleteMode ? (
              <>
                {addEntityButtonText && (
                  <Button onClick={onAddEntity} className="bg-black text-white hover:bg-zinc-800 focus:ring-2 focus:ring-black/40 focus:outline-none">
                    <PlusCircle className="mr-2 h-4 w-4" />{addEntityButtonText}
                  </Button>
                )}
                <Button variant="outline" onClick={onToggleDeleteMode} className="focus:ring-2 focus:ring-destructive/30 focus:outline-none">
                  <Trash2 className="mr-2 h-4 w-4" />Supprimer
                </Button>
              </>
            ) : (
              <>
                <Button variant="destructive" disabled={selectedRowsData.length===0} onClick={()=>onConfirmDelete(selectedRowsData)} className="bg-red-600 text-white hover:bg-red-700 border border-red-600 focus:ring-2 focus:ring-red-400 focus:outline-none">
                  <Trash2 className="mr-2 h-4 w-4" />Supprimer ({selectedRowsData.length})
                </Button>
                <Button variant="outline" onClick={onToggleDeleteMode} className="focus:ring-2 focus:ring-muted/30 focus:outline-none">
                  <XCircle className="mr-2 h-4 w-4" />Annuler
                </Button>
              </>
            )}
          </div>
        </div>
        
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map(headerGroup=>(
              <TableRow key={headerGroup.id} className="border-b-[#EFEDED] hover:bg-transparent">
                {headerGroup.headers.map(header=>(
                  <TableHead key={header.id} className={cn("h-12 px-4 text-base font-semibold text-gray-600 bg-muted/50", (header.column.columnDef.meta as { className?: string })?.className)}>
                    {header.isPlaceholder?null:flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows.length?table.getRowModel().rows.map((row,index)=>(
              <TableRow key={row.id} data-state={row.getIsSelected()&&"selected"} onClick={()=>handleRowClick(row)} className={cn(
                "group border-b-[#EFEDED] animate-in fade-in-0 slide-in-from-bottom-2 transition",
                areRowsClickable?"cursor-pointer":"select-none",
                row.getIsSelected()&&isDeleteMode?"bg-red-50":row.getIsSelected()?"bg-blue-50":""
              )} style={{animationDelay:`${index*30}ms`}}>
                {row.getVisibleCells().map(cell=>(
                  <TableCell key={cell.id} className={cn("group-hover:bg-zinc-100 transition-colors duration-150 py-4 px-4", (cell.column.columnDef.meta as { className?: string })?.className)}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            )):(
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center text-gray-400">
                  <span className="flex flex-col items-center justify-center gap-2">
                    <Search className="mx-auto h-8 w-8 opacity-30" />
                    <span>Aucun résultat trouvé.</span>
                  </span>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
        
        <div className="flex flex-col-reverse sm:flex-row items-center justify-between gap-4 pt-4">
          <div className="text-sm text-muted-foreground">
            {isDeleteMode?`${table.getFilteredSelectedRowModel().rows.length} sélectionné(s) sur ${table.getFilteredRowModel().rows.length} visible(s)`:
            `${table.getFilteredRowModel().rows.length} ligne(s) affichée(s)`}
          </div>
          <div className="flex items-center justify-center sm:justify-end flex-wrap gap-4">
            <Select value={`${table.getState().pagination.pageSize}`} onValueChange={v=>table.setPageSize(Number(v))}>
              <SelectTrigger className="w-[140px] md:w-[160px] min-w-[140px]"><SelectValue placeholder={`${table.getState().pagination.pageSize} par page`}/></SelectTrigger>
              <SelectContent>{[10,20,30,40,50].map(ps=><SelectItem key={ps} value={`${ps}`}>{ps} par page</SelectItem>)}</SelectContent>
            </Select>
            <div className="flex items-center space-x-2 rounded-lg border px-3 py-1 bg-gray-50 min-w-[180px]">
              <div className="text-sm font-medium">Page {table.getState().pagination.pageIndex+1} sur {table.getPageCount()}</div>
              <Button variant="outline" size="sm" onClick={()=>table.previousPage()} disabled={!table.getCanPreviousPage()}>Précédent</Button>
              <Button variant="outline" size="sm" onClick={()=>table.nextPage()} disabled={!table.getCanNextPage()}>Suivant</Button>
            </div>
          </div>
        </div>
      </CardContent>
    </>
  );

  if (noCardWrapper) {
    return tableContent;
  }
  
  return (
    <Card>
      {tableContent}
    </Card>
  )
}


# --- pages/admin/immeubles/portes/ImmeubleDetailsPage.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/portes/ImmeubleDetailsPage.tsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { 
    ArrowLeft, Building, Users, Check, MoveUpRight, KeyRound 
} from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Skeleton } from '@/components/ui-admin/skeleton';
import { DataTable } from '@/components/data-table/DataTable';
import type { Porte } from './portes-columns';
import { createPortesColumns } from './portes-columns';
import { GenericRadialBarChart } from '@/components/ui-admin/GenericRadialBarChart';
import { immeubleService } from '@/services/immeuble.service';

// Types locaux pour la clarté du composant
interface Prospector {
    id: string;
    nom: string;
}

interface ImmeubleDetails {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  prospectors: Prospector[];
  prospectingMode: 'SOLO' | 'DUO';
  hasElevator: boolean;
  digicode: string | null;
  nbPortesTotal: number;
  portes: Porte[];
  stats: {
    contratsSignes: number;
    rdvPris: number;
  };
}

// --- Composants UI ---
const ProspectorBadge = ({ Icon, label, prospectors }: { Icon: React.ElementType, label: string, prospectors: Prospector[] }) => (
    <div className="flex items-start gap-3 rounded-lg border bg-card p-3 h-full">
        <div className="bg-muted p-2 rounded-md"><Icon className="h-5 w-5 text-muted-foreground" /></div>
        <div className="flex flex-col gap-1.5">
            <div className="text-sm text-muted-foreground">{label}</div>
            <div className="text-base font-semibold flex flex-col items-start">
                {prospectors.map(p => (
                    <Link key={p.id} to={`/admin/commerciaux/${p.id}`} className="hover:underline hover:text-primary">
                        {p.nom}
                    </Link>
                ))}
            </div>
        </div>
    </div>
);

const InfoBadge = ({ Icon, label, value }: { Icon: React.ElementType, label: string, value: string | React.ReactNode }) => (
    <div className="flex items-center gap-3 rounded-lg border bg-card p-3 h-full">
        <div className="bg-muted p-2 rounded-md"><Icon className="h-5 w-5 text-muted-foreground" /></div>
        <div>
            <div className="text-sm text-muted-foreground">{label}</div>
            <div className="text-base font-semibold">{value}</div>
        </div>
    </div>
);


const ImmeubleDetailsPage = () => {
    const { immeubleId } = useParams<{ immeubleId: string }>();
    const navigate = useNavigate();
    const [immeuble, setImmeuble] = useState<ImmeubleDetails | null>(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (immeubleId) {
            fetchData(immeubleId);
        }
    }, [immeubleId]);

    const fetchData = async (id: string) => {
        setLoading(true);
        try {
            const detailsFromApi = await immeubleService.getImmeubleDetails(id);

            const formattedDetails: ImmeubleDetails = {
                id: detailsFromApi.id,
                adresse: detailsFromApi.adresse,
                ville: detailsFromApi.ville,
                codePostal: detailsFromApi.codePostal,
                prospectors: (detailsFromApi.prospectors || []).map(p => ({
                    id: p.id,
                    nom: `${p.prenom} ${p.nom}`
                })),
                prospectingMode: detailsFromApi.prospectingMode,
                hasElevator: detailsFromApi.hasElevator,
                digicode: detailsFromApi.digicode,
                nbPortesTotal: detailsFromApi.nbPortesTotal,
                portes: (detailsFromApi.portes || []).map(p => {
                    let statusText: Porte['statut'] = 'Non visité';
                    switch(p.statut) {
                        case 'VISITE': statusText = 'Visité'; break;
                        case 'ABSENT': statusText = 'Absent'; break;
                        case 'REFUS': statusText = 'Refus'; break;
                        case 'CURIEUX': statusText = 'Curieux'; break;
                        case 'CONTRAT_SIGNE': statusText = 'Contrat signé'; break;
                    }
                    return {
                        id: p.id,
                        numeroPorte: p.numeroPorte,
                        statut: statusText,
                        passage: p.passage,
                        commentaire: p.commentaire || '',
                    }
                }),
                stats: detailsFromApi.stats,
            };
            setImmeuble(formattedDetails);
        } catch (error) {
            console.error("Erreur de chargement des détails:", error);
            setImmeuble(null);
        } finally {
            setLoading(false);
        }
    };

    const portesData = useMemo(() => {
        if (!immeuble) return [];
        const visitesMap = new Map(immeuble.portes.map(p => [p.numeroPorte, p]));
        const allPortes: Porte[] = [];
        for (let i = 1; i <= immeuble.nbPortesTotal; i++) {
            const numeroPorteStr = String(i);
            if (immeuble.prospectingMode === 'DUO' && i % 2 !== 0) continue;

            const visiteExistante = visitesMap.get(numeroPorteStr);
            if (visiteExistante) {
                allPortes.push({ ...visiteExistante });
            } else {
                allPortes.push({ id: `porte-non-visitee-${i}`, numeroPorte: numeroPorteStr, statut: 'Non visité', passage: 0, commentaire: "" });
            }
        }
        return allPortes;
    }, [immeuble]);

    const portesColumns = useMemo(() => createPortesColumns(), []);

    if (loading) {
        return (
            <div className="space-y-6 animate-pulse">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-40 w-full" />
                <div className="grid lg:grid-cols-3 gap-6">
                    <Skeleton className="lg:col-span-2 h-96" />
                    <Skeleton className="lg:col-span-1 h-96" />
                </div>
            </div>
        )
    }
    
    if (!immeuble) {
        return (
          <div className="text-center p-8">
            <h2 className="text-xl font-semibold">Immeuble non trouvé</h2>
            <p className="text-muted-foreground mt-2">Les détails pour cet immeuble n'ont pas pu être chargés.</p>
            <Button variant="outline" onClick={() => navigate(-1)} className="mt-4">
                <ArrowLeft className="mr-2 h-4 w-4" /> Retour
            </Button>
          </div>
        );
    }

    const portesProspectees = immeuble.portes.length;
    
    return (
        <div className="space-y-6">
            <Button variant="outline" onClick={() => navigate(-1)}>
                <ArrowLeft className="mr-2 h-4 w-4" />
                Retour à la liste des immeubles
            </Button>
            
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-2xl">
                        <Building className="h-6 w-6" />
                        {immeuble.adresse}, {immeuble.codePostal} {immeuble.ville}
                    </CardTitle>
                    <CardDescription>Détails et informations sur la prospection de cet immeuble.</CardDescription>
                </CardHeader>
                <CardContent className="grid grid-cols-2 md:grid-cols-4 gap-4">
                   <ProspectorBadge Icon={Users} label={immeuble.prospectingMode === 'DUO' ? "Duo de Prospection" : "Prospecteur"} prospectors={immeuble.prospectors} />
                   <InfoBadge Icon={Check} label="Contrats Signés" value={immeuble.stats.contratsSignes} />
                   <InfoBadge Icon={MoveUpRight} label="RDV Pris" value={immeuble.stats.rdvPris} />
                   <InfoBadge Icon={KeyRound} label="Digicode" value={immeuble.digicode || "Aucun"} />
                </CardContent>
            </Card>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2">
                    <DataTable
                        columns={portesColumns}
                        data={portesData}
                        title="Détail des Portes"
                        filterColumnId="numeroPorte"
                        filterPlaceholder="Filtrer par n° de porte..."
                        isDeleteMode={false}
                        onToggleDeleteMode={() => {}}
                        rowSelection={{}}
                        setRowSelection={() => {}}
                        onConfirmDelete={() => {}}
                    />
                </div>
                <div className="lg:col-span-1">
                    <GenericRadialBarChart
                        title="Taux de Couverture"
                        value={portesProspectees}
                        total={immeuble.nbPortesTotal}
                        color="fill-sky-500"
                    />
                </div>
            </div>
        </div>
    );
};

export default ImmeubleDetailsPage;


# --- pages/admin/commerciaux/CommercialDetailsPage.tsx ---

import { useEffect, useState } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { statisticsService } from '@/services/statistics.service';
import StatCard from '@/components/ui-admin/StatCard';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import { Building, DoorOpen, Handshake, Target, ArrowLeft, User, Phone, Mail, UserCheck } from 'lucide-react';
import { Button } from '@/components/ui-admin/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui-admin/tooltip';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui-admin/table';
import { commercialService } from '@/services/commercial.service';

interface CommercialStats {
  commercialInfo: {
    nom: string;
    prenom: string;
    email: string;
  };
  kpis: {
    immeublesVisites: number;
    portesVisitees: number;
    contratsSignes: number;
    rdvPris: number;
    tauxDeConversion: number;
  };
  repartitionStatuts: {
    [key: string]: number;
  };
}

interface HistoryEntry {
  id: string;
  adresse: string;
  ville: string;
  dateProspection: string;
  nbPortesVisitees: number;
  nbContratsSignes: number;
  nbRdvPris: number;
  nbRefus: number;
  nbAbsents: number;
  commentaire: string;
  tauxCouverture: number;
}

interface CommercialDetails {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
  equipe: {
    id: string;
    nom: string;
    manager: {
      id: string;
      nom: string;
      prenom: string;
    };
  };
}

const CommercialDetailsPage = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const [stats, setStats] = useState<CommercialStats | null>(null);
  const [history, setHistory] = useState<HistoryEntry[]>([]);
  const [commercial, setCommercial] = useState<CommercialDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      const fetchData = async () => {
        try {
          setLoading(true);
          const [statsData, historyData, commercialData] = await Promise.all([
            statisticsService.getStatsForCommercial(id),
            statisticsService.getCommercialHistory(id),
            commercialService.getCommercialDetails(id),
          ]);
          setStats(statsData);
          setHistory(historyData);
          setCommercial(commercialData);
          setError(null);
        } catch (err) {
          setError('Erreur lors de la récupération des données.');
          console.error(err);
        } finally {
          setLoading(false);
        }
      };
      fetchData();
    }
  }, [id]);

  if (loading) {
    return <div>Chargement des données...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (!stats || !commercial) {
    return <div>Aucune statistique disponible pour ce commercial.</div>;
  }

  const pieData = Object.entries(stats.repartitionStatuts).map(([name, value]) => ({
    name,
    value: value as number,
  }));

  const handleBackClick = () => {
    const fromManager = location.state?.fromManager;
    if (fromManager) {
      navigate(`/admin/managers/${fromManager}`);
    } else {
      navigate('/admin/commerciaux');
    }
  };

  return (
    <div className="container mx-auto p-4 space-y-6">
      <div className="flex items-center">
        <Button variant="outline" size="icon" className="mr-4" onClick={handleBackClick}>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h1 className="text-2xl font-bold">
          Statistiques de {stats.commercialInfo.prenom} {stats.commercialInfo.nom}
        </h1>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Informations Personnelles</CardTitle>
        </CardHeader>
        <CardContent className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="flex items-center space-x-2">
            <User className="h-5 w-5 text-gray-500" />
            <span>{commercial.prenom} {commercial.nom}</span>
          </div>
          <div className="flex items-center space-x-2">
            <Phone className="h-5 w-5 text-gray-500" />
            <span>{commercial.telephone || 'N/A'}</span>
          </div>
          <div className="flex items-center space-x-2">
            <Mail className="h-5 w-5 text-gray-500" />
            <span>{commercial.email}</span>
          </div>
          <div className="flex items-center space-x-2">
            <UserCheck className="h-5 w-5 text-gray-500" />
            <span>{commercial.equipe ? `${commercial.equipe.manager.prenom} ${commercial.equipe.manager.nom}` : 'N/A'}</span>
          </div>
        </CardContent>
      </Card>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <StatCard title="Immeubles Visitées" value={stats.kpis.immeublesVisites} Icon={Building} />
        <StatCard title="Portes Visitées" value={stats.kpis.portesVisitees} Icon={DoorOpen} />
        <StatCard title="Contrats Signés" value={stats.kpis.contratsSignes} Icon={Handshake} />
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <div className="cursor-help">
                <StatCard title="Taux de Conversion" value={stats.kpis.tauxDeConversion} Icon={Target} suffix="%" />
              </div>
            </TooltipTrigger>
            <TooltipContent>
              <p>Le taux de conversion représente le rapport entre le nombre de contrats signés et le nombre total de portes visitées. Il mesure l’efficacité du commercial à conclure des ventes.</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Répartition des Statuts</CardTitle>
            <CardDescription>
              Proportion de chaque statut sur l'ensemble des portes prospectées.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div style={{ height: '350px' }}>
              <GenericPieChart
                title="Répartition des Statuts"
                data={pieData}
                dataKey="value"
                nameKey="name"
                colors={['#22c55e', '#f97316', '#f59e0b', '#ef4444', '#8b5cf6', '#3b82f6']}
              />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Historique de Prospection</CardTitle>
            <CardDescription>
              Détail des visites et performances par immeuble.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Immeuble</TableHead>
                  <TableHead>Date Visite</TableHead>
                  <TableHead className="text-center">Taux Couverture</TableHead>
                  <TableHead className="text-center">RDV Pris</TableHead>
                  <TableHead className="text-center">Contrats Signés</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {history.map((item) => (
                  <TableRow key={item.id}>
                    <TableCell className="font-medium">{item.adresse}, {item.ville}</TableCell>
                    <TableCell>{item.dateProspection ? new Date(item.dateProspection).toLocaleDateString() : 'N/A'}</TableCell>
                    <TableCell className="text-center">{item.tauxCouverture}%</TableCell>
                    <TableCell className="text-center">{item.nbRdvPris}</TableCell>
                    <TableCell className="text-center">{item.nbContratsSignes}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default CommercialDetailsPage;



# --- components/ui-admin/calendar.tsx ---
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui-admin/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "flex gap-4 flex-col md:flex-row relative",
          defaultClassNames.months
        ),
        month: cn("flex flex-col w-full gap-4", defaultClassNames.month),
        nav: cn(
          "flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn("absolute inset-0 opacity-0", defaultClassNames.dropdown),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none",
          defaultClassNames.weekday
        ),
        week: cn("flex w-full mt-2", defaultClassNames.week),
        week_number_header: cn(
          "select-none w-(--cell-size)",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-[0.8rem] select-none text-muted-foreground",
          defaultClassNames.week_number
        ),
        day: cn(
          "relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none",
          defaultClassNames.day
        ),
        range_start: cn(
          "rounded-l-md bg-accent",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("rounded-r-md bg-accent", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }



# --- pages/admin/zones/ZoneMap.tsx ---
// frontend-shadcn/src/pages/admin/zones/ZoneMap.tsx

import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Circle, Popup, useMap, FeatureGroup, Marker } from 'react-leaflet';
import type { FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { cn } from '@/lib/utils';
import { Maximize, Shrink } from 'lucide-react';
import { Button } from '@/components/ui-admin/button';
import { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';
import 'leaflet-geosearch/dist/geosearch.css';

// --- Patch et icônes ---
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

const zoneCenterIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(222.2 47.4% 11.2%)" stroke="white" stroke-width="2"><circle cx="12" cy="12" r="6"/></svg>'),
    iconSize: [16, 16],
    iconAnchor: [8, 8],
    popupAnchor: [0, -8],
});

const searchMarkerIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(206, 92%, 52%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search-code"><path d="M15.5 15.5 20 20"/><path d="M9 13a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z"/><path d="m14 14-2.5 2.5"/><path d="m14 6-2.5-2.5"/><path d="m6 14-2.5 2.5"/><path d="m6 6 2.5-2.5"/></svg>'),
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
});

interface Zone {
  id: string;
  name: string;
  assignedTo: string;
  color: string;
  latlng: L.LatLngExpression;
  radius: number;
}

interface Immeuble {
  id: string;
  adresse: string;
  latlng: L.LatLngExpression;
  status: string;
}

interface ZoneMapProps {
  existingZones: Zone[];
  immeubles?: Immeuble[];
  zoneToFocus: string | null;
}

const SearchControl = () => {
    const map = useMap();
    useEffect(() => {
        const provider = new OpenStreetMapProvider({
            params: { countrycodes: 'fr', 'accept-language': 'fr' },
        });
        // @ts-ignore
        const searchControl = new GeoSearchControl({
            provider: provider, style: 'bar', marker: { icon: searchMarkerIcon, draggable: false },
            showPopup: false, autoClose: true, retainZoomLevel: false,
            animateZoom: true, keepResult: true, searchLabel: 'Entrez une adresse en France...', updateMap: false, 
        });
        const onLocationFound = (event: any) => {
            if (event.location && event.location.y && event.location.x) {
                map.flyTo(new L.LatLng(event.location.y, event.location.x), 14, { animate: true, duration: 1.5 }); 
            }
        };
        map.addControl(searchControl);
        map.on('geosearch/showlocation', onLocationFound);
        return () => { map.removeControl(searchControl); map.off('geosearch/showlocation', onLocationFound); };
    }, [map]);
    return null;
};

// LA LOGIQUE FINALE, SIMPLIFIÉE
const MapViewController = ({ zones, zoneToFocus, featureGroupRef }: { zones: Zone[], zoneToFocus: string | null, featureGroupRef: React.RefObject<FeatureGroupType | null> }) => {
    const map = useMap();

    useEffect(() => {
        const timer = setTimeout(() => {
            if (!map) return;

            // SI UNE ZONE EST CIBLÉE : on zoome dessus. C'est tout.
            if (zoneToFocus) {
                const zone = zones.find(z => z.id === zoneToFocus);
                if (zone) {
                    map.flyTo(zone.latlng, 15, { animate: true, duration: 1.5 });
                }
            } 
            // SINON (aucune zone ciblée) : on affiche toutes les zones.
            else {
                if (featureGroupRef.current && zones.length > 0) {
                    const bounds = featureGroupRef.current.getBounds();
                    if (bounds.isValid()) {
                        map.fitBounds(bounds, { padding: [50, 50], animate: true });
                    }
                }
            }
        }, 50); // Léger délai pour la stabilité

        return () => clearTimeout(timer);
    }, [map, zones, zoneToFocus, featureGroupRef]); // On se base uniquement sur les props

    return null;
}

const ZoneDisplay = ({ zone }: { zone: Zone }) => {
    const map = useMap();
    const handleDoubleClick = () => { map.flyTo(zone.latlng, 15, { animate: true, duration: 1.5 }); };
    return (
        <>
            <Circle key={`circle-${zone.id}`} center={zone.latlng} radius={zone.radius} pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2 }}>
                <Popup><b>{zone.name}</b></Popup>
            </Circle>
            <Marker key={`marker-${zone.id}`} position={zone.latlng} icon={zoneCenterIcon} eventHandlers={{ dblclick: handleDoubleClick }}/>
        </>
    );
};

export const ZoneMap = ({ existingZones, immeubles = [], zoneToFocus }: ZoneMapProps) => {
    const featureGroupRef = useRef<FeatureGroupType>(null);
    const [isModalFullscreen, setIsModalFullscreen] = useState(false);

  return (
    <div className={cn( 'relative h-full w-full', isModalFullscreen && 'fixed inset-0 z-[2000] bg-black/80 p-4' )}>
      <div className={cn( 'relative h-full w-full', isModalFullscreen && 'rounded-lg overflow-hidden' )}>
        <div className="absolute top-4 right-4 z-[1001] flex flex-col gap-2">
            <Button size="icon" variant="secondary" className="shadow-lg bg-white hover:bg-slate-100 text-slate-800"
                onClick={() => setIsModalFullscreen(!isModalFullscreen)}>
                {isModalFullscreen ? <Shrink className="h-5 w-5" /> : <Maximize className="h-5 w-5" />}
            </Button>
        </div>
        <MapContainer 
            key={String(isModalFullscreen) + zoneToFocus} // Astuce : forcer le re-rendu si le focus change
            center={[48.8566, 2.3522]} zoom={10} 
            style={{ height: '100%', width: '100%', zIndex: 1 }}
            scrollWheelZoom={true} dragging={true} touchZoom={true}
            className={cn(!isModalFullscreen && "rounded-lg")}
        >
            <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'/>
            <SearchControl />
            <MapViewController 
                zones={existingZones} 
                zoneToFocus={zoneToFocus} 
                featureGroupRef={featureGroupRef} 
            />
            <FeatureGroup ref={featureGroupRef}>
                {existingZones.map(zone => <ZoneDisplay key={zone.id} zone={zone} />)}
                {immeubles.map(immeuble => (
                    <Marker key={immeuble.id} position={immeuble.latlng}>
                        <Popup><b>{immeuble.adresse}</b><br />Statut: {immeuble.status}</Popup>
                    </Marker>
                ))}
            </FeatureGroup>
        </MapContainer>
      </div>
    </div>
  );
};


# --- pages/admin/zones/ZonesPage.tsx ---
// frontend-shadcn/src/pages/admin/zones/ZonesPage.tsx

import { useState, useEffect, useMemo } from 'react';
import { ZoneMap } from './ZoneMap';
import { Button } from '@/components/ui-admin/button';
import { DataTable } from '@/components/data-table/DataTable';
import { createZoneColumns, type Zone as ZoneTableType } from './columns';
import { Modal } from '@/components/ui-admin/Modal';
import { ZoneCreatorModal } from './ZoneCreatorModal';
import type { RowSelectionState } from '@tanstack/react-table';
import { zoneService } from '@/services/zone.service';
import { AssignmentType } from '@/types/enums';
import L from 'leaflet';
import { ViewToggleContainer } from '@/components/ui-admin/ViewToggleContainer';

const ZonesPage = () => {
  const [view, setView] = useState<'table' | 'map'>('table');
  const [existingZones, setExistingZones] = useState<ZoneTableType[]>([]);
  const [loading, setLoading] = useState(true);
  
  const [isCreatorOpen, setIsCreatorOpen] = useState(false);
  const [editingZone, setEditingZone] = useState<ZoneTableType | null>(null);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<ZoneTableType[]>([]);
  const [zoneToFocusId, setZoneToFocusId] = useState<string | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [zones] = await Promise.all([
        zoneService.getZones(),
      ]);

      const formattedZones: ZoneTableType[] = zones.map(z => ({
        id: z.id,
        name: z.nom,
        assignedTo: 'Non assignée', // Plus d'assignation directe ici
        color: z.couleur || 'gray',
        latlng: [z.latitude, z.longitude],
        radius: z.rayonMetres,
        dateCreation: z.createdAt,
      }));

      setExistingZones(formattedZones);
    } catch (error) {
      console.error('Erreur de chargement des données:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEditClick = (zone: ZoneTableType) => {
    setEditingZone(zone);
    setIsCreatorOpen(true);
  };

  const handleCloseCreator = () => {
    setIsCreatorOpen(false);
    setEditingZone(null);
  };

  const handleZoneValidated = async (data: {
    id?: string;
    center: L.LatLng;
    radius: number;
    name: string;
    color: string;
  }) => {
    const payload: any = {
      nom: data.name,
      latitude: data.center.lat,
      longitude: data.center.lng,
      rayonMetres: data.radius,
      couleur: data.color,
      typeAssignation: AssignmentType.EQUIPE, // Valeur par défaut, car l'assignation est gérée ailleurs
    };

    try {
      if (data.id) {
        await zoneService.updateZone(data.id, payload);
      } else {
        await zoneService.createZone(payload);
      }
    } catch (error) {
      console.error('Erreur lors de la sauvegarde de la zone:', error);
    }

    handleCloseCreator();
    fetchData();
  };

  const handleConfirmDelete = (selectedRows: ZoneTableType[]) => setItemsToDelete(selectedRows);
  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map(z => zoneService.deleteZone(z.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) {
      console.error('Erreur de suppression:', error);
    }
  };

  // MODIFICATION : C'est la fonction qui gère le clic sur une ligne
  const handleRowClick = (zone: ZoneTableType) => {
    setZoneToFocusId(zone.id); // On définit la zone à cibler
    setView('map'); // Et on bascule sur la carte
  };

  // MODIFICATION : C'est la fonction qui gère le changement de vue via les boutons
  const handleViewChange = (newView: 'table' | 'map') => {
    if (newView === 'map') {
      // Si on bascule sur la carte, on s'assure qu'aucune zone n'est ciblée
      setZoneToFocusId(null); 
    }
    setView(newView);
  };
  const toggleDeleteMode = () => {
    setIsDeleteMode(prev => !prev);
    setRowSelection({});
  };
  const zoneColumns = useMemo(() => createZoneColumns(isDeleteMode, handleEditClick), [isDeleteMode]);

  if (loading) return <div>Chargement...</div>;

  const tableComponent = (
    <DataTable
        noCardWrapper
        columns={zoneColumns}
        data={existingZones}
        title=""
        filterColumnId="name"
        filterPlaceholder="Rechercher une zone par son nom..."
        addEntityButtonText="Ajouter une Zone"
        onAddEntity={() => {
          setEditingZone(null);
          setIsCreatorOpen(true);
        }}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
        onRowClick={handleRowClick} // Ce prop est bien utilisé pour cibler une zone
      />
  );
  
  const mapComponent = (
     <ZoneMap
        existingZones={existingZones}
        zoneToFocus={zoneToFocusId}
      />
  );

  return (
    <div className="h-full flex flex-col gap-6">
      {isCreatorOpen && (
        <ZoneCreatorModal
          onValidate={handleZoneValidated}
          onClose={handleCloseCreator}
          existingZones={existingZones}
          zoneToEdit={editingZone}
        />
      )}
      <Modal
        isOpen={itemsToDelete.length > 0}
        onClose={() => setItemsToDelete([])}
        title="Confirmer la suppression"
      >
        <p className="text-sm text-muted-foreground mt-2">
          Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} zone(s) sélectionnée(s)
          ?
        </p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map(item => (<li key={item.id}>{item.name}</li>))}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button variant="destructive" onClick={handleDelete}>Valider la suppression</Button>
        </div>
      </Modal>

      <ViewToggleContainer
        title="Gestion des Zones"
        description="Basculez entre la vue tableau et la vue carte interactive pour créer, modifier et visualiser les zones."
        view={view}
        onViewChange={handleViewChange} // MODIFICATION: Utilisation de la nouvelle fonction de gestion
        tableComponent={tableComponent}
        mapComponent={mapComponent}
      />
    </div>
  );
};

export default ZonesPage;


# --- pages/admin/commerciaux/commerciaux-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/commerciaux-table/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Mail, Eye, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"

export type Commercial = {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  manager: string;
  managerId: string;
  equipe: string;
  equipeId?: string;
  classement: number;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createColumns = (isDeleteMode: boolean, onEdit: (commercial: Commercial) => void, managerIdForBack?: string): ColumnDef<Commercial>[] => {
  const columns: ColumnDef<Commercial>[] = [
    // --- Colonne de sélection ---
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: any }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      cell: ({ row }: { row: any }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    }] : []),

    // --- Colonnes de données ---
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "prenom",
      header: () => <Header title="Prénom" />,
    },
    {
      accessorKey: "email",
      header: () => <Header title="Email" />,
      cell: ({ row }) => (
        <a href={`mailto:${row.getValue("email")}`} className="flex items-center gap-2 hover:underline">
          <Mail className="h-4 w-4 text-muted-foreground" />
          {row.getValue("email")}
        </a>
      )
    },
    {
      accessorKey: "manager",
      header: () => <Header title="Manager" />,
      cell: ({ row }) => {
        const managerName = row.original.manager;
        const managerId = row.original.managerId;
        return (
            <Link 
                to={`/admin/managers/${managerId}`} 
                className="hover:underline hover:text-primary transition-colors"
                onClick={(e) => e.stopPropagation()}
            >
                {managerName}
            </Link>
        )
      },
    },
    {
      accessorKey: "equipe",
      header: () => <Header title="Équipe" />,
    },
    {
      accessorKey: "classement",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classement") as number;
        // CORRECTION: Rétablissement des couleurs des badges
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300 hover:bg-yellow-200/80";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300 hover:bg-slate-300/80";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300 hover:bg-orange-300/80";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>{classement}</Badge>
          </div>
        );
      },
    },

    // --- Colonne d'Actions (améliorée) ---
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const commercial = row.original;
            return (
                // CORRECTION: Utilisation d'un TooltipProvider et ajout d'espace
                <TooltipProvider delayDuration={100}>
                    <div className="text-right space-x-2">
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button asChild variant="ghost" className="h-8 w-8 p-0">
                                    <Link to={`/admin/commerciaux/${commercial.id}`} state={{ fromManager: managerIdForBack }} onClick={(e) => { e.stopPropagation(); }}>
                                        <Eye className="h-4 w-4" />
                                        <span className="sr-only">Voir les détails</span>
                                    </Link>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Voir les détails</p></TooltipContent>
                        </Tooltip>

                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(commercial); }}>
                                    <Edit className="h-4 w-4" />
                                    <span className="sr-only">Modifier</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Modifier</p></TooltipContent>
                        </Tooltip>
                    </div>
                </TooltipProvider>
            )
        },
    },
  ]
  
  return columns;
}


# --- pages/admin/Managers/managers-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/Managers/managers-table/columns.tsx
"use client"

import type { ColumnDef, Column } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Mail, Phone, Eye, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"


export type Manager = {
  id: string
  nom: string
  prenom: string
  email: string
  telephone: string | null
  nbEquipes: number
  classement: number
  equipes: {
    id: string;
    nom: string;
    commerciaux: {
      id: string;
      nom: string;
      prenom: string;
      telephone: string;
      historiques: {
        nbContratsSignes: number;
      }[];
    }[];
  }[];
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: Column<Manager> }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const getColumns = (isDeleteMode: boolean, onEdit: (manager: Manager) => void): ColumnDef<Manager>[] => {
  const columns: ColumnDef<Manager>[] = [
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: import("@tanstack/react-table").Table<Manager> }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      cell: ({ row }: { row: import("@tanstack/react-table").Row<Manager> }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    }] : []),
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "prenom",
      header: () => <Header title="Prénom" />,
    },
    {
      accessorKey: "email",
      header: () => <Header title="Email" />,
      cell: ({ row }) => (
        <a href={`mailto:${row.getValue("email")}`} className="flex items-center gap-2 hover:underline">
          <Mail className="h-4 w-4 text-muted-foreground" />
          {row.getValue("email")}
        </a>
      ),
    },
    {
      accessorKey: "telephone",
      header: () => <Header title="Téléphone" />,
      cell: ({ row }) => (
        <a href={`tel:${row.getValue("telephone")}`} className="flex items-center gap-2 hover:underline">
          <Phone className="h-4 w-4 text-muted-foreground" />
          {row.getValue("telephone")}
        </a>
      ),
    },
    {
      accessorKey: "nbEquipes",
      header: () => <div className="text-center"><Header title="Nb. d'équipes" /></div>,
      cell: ({ row }) => <div className="text-center">{row.getValue("nbEquipes")}</div>,
      meta: { className: "text-center" }
    },
    {
      accessorKey: "classement",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classement") as number;
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300 hover:bg-yellow-200/80";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300 hover:bg-slate-300/80";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300 hover:bg-orange-300/80";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>{classement}</Badge>
          </div>
        );
      },
    },
    {
      id: "actions",
      header: () => <div className="text-right"><Header title="Actions" /></div>,
      cell: ({ row }) => {
        const manager = row.original;
        return (
          <TooltipProvider delayDuration={100}>
            <div className="text-right space-x-2">
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button asChild variant="ghost" className="h-8 w-8 p-0">
                    <Link to={`/admin/managers/${manager.id}`} onClick={(e) => e.stopPropagation()}>
                      <Eye className="h-4 w-4" />
                      <span className="sr-only">Voir les détails</span>
                    </Link>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Voir les détails</p></TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(manager); }}>
                    <Edit className="h-4 w-4" />
                    <span className="sr-only">Modifier</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Modifier</p></TooltipContent>
              </Tooltip>
            </div>
          </TooltipProvider>
        )
      }
    },
  ]
  
  return columns;
}


# --- pages/admin/Equipes/equipes-table/columns.tsx ---
import type { Column, ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Users as CommerciauxIcon, Eye, Award, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Avatar, AvatarFallback } from "@/components/ui-admin/avatar"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"

export type Equipe = {
  id: string;
  nom: string;
  manager: {
    id: string; 
    nom: string;
    avatarFallback: string;
  };
  nbCommerciaux: number;
  classementGeneral: number;
  totalContratsSignes: number;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)
const SortableHeader = ({ title, column }: { title: string, column: Column<Equipe, unknown> }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createEquipesColumns = (isDeleteMode: boolean, onEdit: (equipe: Equipe) => void): ColumnDef<Equipe>[] => {
  return [
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: import("@tanstack/react-table").Table<Equipe> }) => (
        <Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />
      ),
      cell: ({ row }: { row: import("@tanstack/react-table").Row<Equipe> }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" onClick={(e) => e.stopPropagation()} />
      ),
      enableSorting: false, enableHiding: false,
    }] : []),
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom de l'équipe" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "manager",
      header: () => <Header title="Manager responsable" />,
      cell: ({ row }) => {
        const manager = row.original.manager
        return (
          <Link to={`/admin/managers/${manager.id}`} className="flex items-center gap-2 group" onClick={(e) => e.stopPropagation()}>
            <Avatar className="h-8 w-8">
              <AvatarFallback>{manager.avatarFallback}</AvatarFallback>
            </Avatar>
            <span className="group-hover:underline group-hover:text-primary transition-colors">{manager.nom}</span>
          </Link>
        )
      },
      sortingFn: (rowA, rowB) => {
        return rowA.original.manager.nom.localeCompare(rowB.original.manager.nom);
      }
    },
    {
      accessorKey: "nbCommerciaux",
      header: () => <div className="text-center"><Header title="Effectif" /></div>,
      cell: ({ row }) => (
        <div className="flex items-center justify-center gap-2">
          <CommerciauxIcon className="h-4 w-4 text-muted-foreground" />
          <span>{row.getValue("nbCommerciaux")}</span>
        </div>
      )
    },
    {
      accessorKey: "classementGeneral",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classementGeneral") as number;
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>
              <Award className="mr-1 h-3 w-3" />
              {classement}
            </Badge>
          </div>
        );
      },
    },
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const equipe = row.original;
            return (
              <TooltipProvider delayDuration={100}>
                <div className="text-right space-x-2">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button asChild variant="ghost" className="h-8 w-8 p-0">
                            <Link to={`/admin/equipes/${equipe.id}`} onClick={(e) => { e.stopPropagation(); }}>
                                <Eye className="h-4 w-4" />
                                <span className="sr-only">Voir les détails de l'équipe</span>
                            </Link>
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent><p>Voir les détails</p></TooltipContent>
                    </Tooltip>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(equipe); }}>
                            <Edit className="h-4 w-4" />
                            <span className="sr-only">Modifier</span>
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent><p>Modifier</p></TooltipContent>
                    </Tooltip>
                </div>
              </TooltipProvider>
            )
        },
    },
  ]
}


# --- pages/admin/suivi/SuiviPage.tsx ---
// frontend-shadcn/src/pages/admin/suivi/SuiviPage.tsx
import { useState, useMemo, useEffect, useRef } from 'react';
import { SuiviSidebar } from './SuiviSidebar';
import { SuiviMap } from './SuiviMap';
import { FloatingTranscriptPopup } from './FloatingTranscriptPopup';
import type { Commercial, Transcription, Zone } from './types';

// --- MOCK DATA (inchangé) ---
const MOCK_COMMERCIALS: Commercial[] = [
  { id: 'com-001', name: 'Alice Leroy', avatarFallback: 'AL', position: [48.873, 2.34], equipe: 'Alpha' },
  { id: 'com-002', name: 'Paul Girard', avatarFallback: 'PG', position: [48.858, 2.359], equipe: 'Alpha' },
  { id: 'com-003', name: 'Emma Bonnet', avatarFallback: 'EB', position: [48.887, 2.344], equipe: 'Bêta' },
  { id: 'com-004', name: 'Hugo Moreau', avatarFallback: 'HM', position: [48.865, 2.335], equipe: 'Bêta' },
];
const MOCK_TRANSCRIPTIONS: Transcription[] = [
  { id: 't-1', commercialId: 'com-001', commercialName: 'Alice Leroy', date: new Date(Date.now() - 5 * 60000), snippet: 'Bonjour, je suis Alice de Finanssor. Je vous contacte...', fullText: 'Bonjour, je suis Alice de Finanssor. Je vous contacte au sujet de votre éligibilité à notre nouvelle offre. XXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXX XXXXXXX XXXXXXX SCSFSFS ' },
];
const MOCK_ZONES: Zone[] = [
  { id: 'zone-1', name: 'Opéra', color: 'green', latlng: [48.872, 2.34], radius: 1500 },
];

const SuiviPage = () => {
  const [selectedCommercial, setSelectedCommercial] = useState<Commercial | null>(MOCK_COMMERCIALS[0] || null);
  const [selectedTranscription, setSelectedTranscription] = useState<Transcription | null>(null);
  
  const [liveText, setLiveText] = useState('');
  const [isProspecting, setIsProspecting] = useState(false);
  const [audioChunks, setAudioChunks] = useState<Blob[]>([]);
  const prospectingTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    const ws = new WebSocket('ws://localhost:8080');
    ws.onopen = () => console.log('WebSocket connecté (Admin)');
    ws.onclose = () => console.log('WebSocket déconnecté (Admin)');

    ws.onmessage = (event) => {
      // Gérer les données audio binaires
      if (event.data instanceof Blob) {
        setAudioChunks(prev => [...prev, event.data]);
        return;
      }
      
      // Gérer les données texte (transcription)
      try {
        const data = JSON.parse(event.data);
        if (data.type === 'LIVE_TRANSCRIPT' && data.payload.commercialId === selectedCommercial?.id) {
          setIsProspecting(true);
          setLiveText(data.payload.text);

          if (prospectingTimeoutRef.current) clearTimeout(prospectingTimeoutRef.current);
          prospectingTimeoutRef.current = setTimeout(() => {
            setIsProspecting(false);
          }, 3000);
        }
      } catch (error) {
          // Si ce n'est pas du JSON, on l'ignore (ça pourrait être un message de ping/pong, etc.)
      }
    };

    return () => {
      ws.close();
      if(prospectingTimeoutRef.current) clearTimeout(prospectingTimeoutRef.current);
    };
  }, [selectedCommercial]);
  
  // Vider les chunks audio à chaque fois qu'on en reçoit de nouveaux pour éviter une accumulation infinie
  useEffect(() => {
    if(audioChunks.length > 0) {
        const timer = setTimeout(() => setAudioChunks([]), 0);
        return () => clearTimeout(timer);
    }
  }, [audioChunks]);

  useEffect(() => {
    setLiveText('');
    setIsProspecting(false);
    setAudioChunks([]);
  }, [selectedCommercial]);

  const handleSelectCommercial = (commercial: Commercial) => setSelectedCommercial(commercial);
  const handleHistoryItemClick = (transcription: Transcription) => setSelectedTranscription(transcription);
  const handleClosePopup = () => setSelectedTranscription(null);

  const filteredTranscriptions = useMemo(() => {
    if (!selectedCommercial) return [];
    return MOCK_TRANSCRIPTIONS.filter(t => t.commercialId === selectedCommercial.id);
  }, [selectedCommercial]);
  
  const commercialsMap = useMemo(() => MOCK_COMMERCIALS.reduce((acc, comm) => {
    acc[comm.id] = { name: comm.name, avatarFallback: comm.avatarFallback };
    return acc;
  }, {} as { [id: string]: { name: string; avatarFallback: string } }), []);

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-8rem)]">
      <div className="lg:col-span-1 h-full flex flex-col gap-6">
        <SuiviSidebar 
          activeCommercial={selectedCommercial} 
          transcriptions={filteredTranscriptions}
          commercialsMap={commercialsMap}
          onHistoryItemClick={handleHistoryItemClick}
          liveText={liveText}
          isProspecting={isProspecting}
          audioChunks={audioChunks}
        />
      </div>
      
      <div className="lg:col-span-2 h-full relative">
        <SuiviMap 
          zones={MOCK_ZONES} 
          commercials={MOCK_COMMERCIALS}
          onMarkerClick={handleSelectCommercial}
          selectedCommercialId={selectedCommercial?.id}
        />
        {selectedTranscription && (
          <div className="absolute inset-0 z-[1000] flex items-center justify-center p-4 pointer-events-none">
            <FloatingTranscriptPopup
              transcription={selectedTranscription}
              onClose={handleClosePopup}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default SuiviPage;


# --- pages/commercial/ProspectingSetupPage.tsx ---
// src/pages/commercial/ProspectingSetupPage.tsx
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Label } from '@/components/ui-admin/label';
import { User, Users, ArrowRight, Send } from 'lucide-react';
import { cn } from '@/lib/utils';

type ProspectingMode = 'solo' | 'duo';

const ProspectingSetupPage = () => {
    const { buildingId } = useParams<{ buildingId: string }>();
    const navigate = useNavigate();
    const [mode, setMode] = useState<ProspectingMode | null>(null);
    const [duoEmail, setDuoEmail] = useState('');

    console.log(`ProspectingSetupPage loaded with buildingId: ${buildingId}`);

    const handleStartSolo = () => {
        console.log(`Navigating from ProspectingSetupPage with ID: ${buildingId}`);
        console.log(`Démarrage en SOLO pour l'immeuble ${buildingId}`);
        navigate(`/commercial/prospecting/doors/${buildingId}`);
    };

    const handleInviteDuo = () => {
        if (duoEmail) {
            console.log(`Invitation envoyée à ${duoEmail} pour l'immeuble ${buildingId}`);
            alert(`Invitation envoyée à ${duoEmail} !`);
        }
    };

    return (
        <div className="container mx-auto py-8">
            <Card className="max-w-2xl mx-auto">
                <CardHeader>
                    <CardTitle className="text-2xl flex items-center gap-3">
                        <Users className="h-6 w-6 text-primary"/>
                        Étape 2 : Mode de Prospection
                    </CardTitle>
                    <CardDescription>
                        Allez-vous prospecter seul ou en équipe aujourd'hui ?
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Card 
                            onClick={() => setMode('solo')}
                            className={cn(
                                "p-6 text-center cursor-pointer transition-all border-2",
                                mode === 'solo' ? 'border-primary shadow-lg scale-105' : 'hover:border-primary/50'
                            )}
                        >
                            <User className="mx-auto h-12 w-12 text-primary" />
                            <h3 className="mt-4 text-lg font-bold">Mode Solo</h3>
                            <p className="text-sm text-muted-foreground">Prospectez seul à votre rythme.</p>
                        </Card>
                        <Card 
                            onClick={() => setMode('duo')}
                            className={cn(
                                "p-6 text-center cursor-pointer transition-all border-2",
                                mode === 'duo' ? 'border-primary shadow-lg scale-105' : 'hover:border-primary/50'
                            )}
                        >
                            <Users className="mx-auto h-12 w-12 text-primary" />
                            <h3 className="mt-4 text-lg font-bold">Mode Duo</h3>
                            <p className="text-sm text-muted-foreground">Collaborez avec un coéquipier.</p>
                        </Card>
                    </div>

                    {mode === 'duo' && (
                        <div className="space-y-2 animate-in fade-in-0">
                            <Label htmlFor="duo-email">Email du coéquipier</Label>
                            <div className="flex gap-2">
                                <Input 
                                    id="duo-email" 
                                    type="email"
                                    placeholder="nom.prenom@winvest.capital"
                                    value={duoEmail}
                                    onChange={(e) => setDuoEmail(e.target.value)}
                                />
                                <Button 
                                    onClick={handleInviteDuo}
                                    disabled={!duoEmail}
                                    className="bg-green-600 text-white hover:bg-green-700"
                                >
                                    <Send className="mr-2 h-4 w-4" />
                                    Inviter
                                </Button>
                            </div>
                        </div>
                    )}
                </CardContent>

                {mode === 'solo' && (
                    <CardFooter className="flex justify-end">
                        <Button 
                            onClick={handleStartSolo}
                            className="bg-green-600 text-white hover:bg-green-700"
                        >
                            Commencer la prospection <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    </CardFooter>
                )}
            </Card>
        </div>
    );
};

export default ProspectingSetupPage;


# --- pages/commercial/SelectBuildingPage.tsx ---
// src/pages/commercial/SelectBuildingPage.tsx
import { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { DataTable } from '@/components/data-table/DataTable';
import type { ColumnDef, RowSelectionState } from '@tanstack/react-table';
import { Button } from '@/components/ui-admin/button';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui-admin/card';
import { ArrowRight, Building} from 'lucide-react';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';

// Type pour les données de la table
export type BuildingData = {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  nbPortes: number;
  dateAjout: Date;
};

// Données simulées pour les immeubles
const MOCK_BUILDINGS: BuildingData[] = [
  { id: 'imm-1', adresse: '10 Rue de la Paix', ville: 'Paris', codePostal: '75002', nbPortes: 25, dateAjout: new Date('2025-06-30') },
  { id: 'imm-2', adresse: '25 Bd des Capucines', ville: 'Paris', codePostal: '75009', nbPortes: 40, dateAjout: new Date('2025-06-28') },
  { id: 'imm-3', adresse: '15 Av. des Champs-Élysées', ville: 'Paris', codePostal: '75008', nbPortes: 60, dateAjout: new Date('2025-06-25') },
];

// Création des colonnes pour la DataTable
const createBuildingColumns = (setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>>): ColumnDef<BuildingData>[] => [
  {
    id: 'select',
    header: () => null,
    cell: ({ row }) => (
      <input
        type="radio"
        name="select-building"
        checked={row.getIsSelected()}
        onChange={() => setRowSelection({ [row.id]: true })}
        className="h-4 w-4 accent-primary"
      />
    ),
  },
  {
    accessorKey: 'adresse',
    header: 'Adresse',
    cell: ({ row }) => (
      <div>
        <div className="font-bold">{row.original.adresse}</div>
        <div className="text-sm text-muted-foreground">{`${row.original.codePostal} ${row.original.ville}`}</div>
      </div>
    ),
  },
  {
    accessorKey: 'nbPortes',
    header: () => <div className="text-center">Portes</div>,
    cell: ({ row }) => <div className="text-center">{row.original.nbPortes}</div>,
  },
  {
    accessorKey: 'dateAjout',
    header: () => <div className="text-right">Ajouté le</div>,
    cell: ({ row }) => (
      <div className="text-right text-muted-foreground">
        {format(row.original.dateAjout, "d MMM yyyy", { locale: fr })}
      </div>
    ),
  },
];

const SelectBuildingPage = () => {
    const navigate = useNavigate();
    const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
    
    const sortedBuildings = useMemo(() => 
        [...MOCK_BUILDINGS].sort((a, b) => b.dateAjout.getTime() - a.dateAjout.getTime()), 
        []
    );

    const columns = useMemo(() => createBuildingColumns(setRowSelection), []);

    const selectedBuildingId = Object.keys(rowSelection).length > 0 ? sortedBuildings[parseInt(Object.keys(rowSelection)[0])].id : undefined;

    const handleNext = () => {
        if (selectedBuildingId) {
            console.log(`Navigating from SelectBuildingPage with ID: ${selectedBuildingId}`);
            navigate(`/commercial/prospecting/setup/${selectedBuildingId}`);
        }
    };

    return (
        <div className="container mx-auto py-8">
            <Card className="max-w-4xl mx-auto">
                <CardHeader>
                    <CardTitle className="text-2xl flex items-center gap-3">
                        <Building className="h-6 w-6 text-primary"/>
                        Étape 1 : Sélection de l'immeuble
                    </CardTitle>
                    <CardDescription>
                        Choisissez l'immeuble que vous souhaitez prospecter. Les plus récents apparaissent en premier.
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <DataTable
                        title="Immeubles"
                        columns={columns}
                        data={sortedBuildings}
                        filterColumnId="adresse"
                        filterPlaceholder="Rechercher une adresse..."
                        rowSelection={rowSelection}
                        setRowSelection={setRowSelection}
                        isDeleteMode={false}
                        onAddEntity={() => {}}
                        onConfirmDelete={() => {}}
                        onToggleDeleteMode={() => {}}
                    />
                    <div className="flex justify-end mt-6">
                        <Button onClick={handleNext} disabled={!selectedBuildingId} className="bg-green-600 hover:bg-green-700 text-white">
                            Suivant <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
};

export default SelectBuildingPage;


# --- pages/admin/suivi/SuiviMap.tsx ---
// src/pages/admin/suivi/SuiviMap.tsx
import { useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Circle, Popup, FeatureGroup, Marker } from 'react-leaflet';
import type { Map as LeafletMap, FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { type Zone, type Commercial } from './types';

// --- Configuration des icônes ---

// Patch pour l'icône par défaut de Leaflet
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

// NOUVEAU : Icône personnalisée pour un commercial non sélectionné
const defaultIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(222.2 47.4% 11.2%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
});

// NOUVEAU : Icône personnalisée pour le commercial sélectionné (plus grosse et colorée)
const selectedIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(142.1 76.2% 44.1%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [40, 40],
    iconAnchor: [20, 40],
    popupAnchor: [0, -40],
});


// --- MODIFICATION des Props ---
interface SuiviMapProps {
  zones: Zone[];
  commercials: Commercial[];
  onMarkerClick: (commercial: Commercial) => void; // Callback pour informer le parent
  selectedCommercialId?: string; // ID du commercial sélectionné pour le style
}

export const SuiviMap = ({ zones, commercials, onMarkerClick, selectedCommercialId }: SuiviMapProps) => {
  const mapRef = useRef<LeafletMap | null>(null);
  const featureGroupRef = useRef<FeatureGroupType>(null);

  useEffect(() => {
    // Centre la carte sur tous les éléments au chargement
    if (mapRef.current && featureGroupRef.current) {
        const bounds = featureGroupRef.current.getBounds();
        if (bounds.isValid()) {
            mapRef.current.fitBounds(bounds, { padding: [50, 50] });
        }
    }
  }, [zones, commercials]);

  return (
    <div className="h-full w-full rounded-lg overflow-hidden shadow-md">
      <MapContainer 
        ref={mapRef} 
        center={[48.8566, 2.3522]} 
        zoom={12} 
        style={{ height: '100%', width: '100%' }}
      >
        <TileLayer 
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" 
          attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' 
        />
        <FeatureGroup ref={featureGroupRef}>
          {/* Affichage des zones */}
          {zones.map(zone => (
            <Circle 
              key={zone.id} 
              center={zone.latlng} 
              radius={zone.radius}
              pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2 }}
            >
              <Popup><b>Zone:</b> {zone.name}</Popup>
            </Circle>
          ))}
          {/* NOUVEAU : Affichage des commerciaux */}
          {commercials.map(commercial => (
            <Marker
              key={commercial.id}
              position={commercial.position}
              icon={selectedCommercialId === commercial.id ? selectedIcon : defaultIcon}
              eventHandlers={{
                click: () => {
                  onMarkerClick(commercial); // Appel du callback au clic
                },
              }}
              zIndexOffset={selectedCommercialId === commercial.id ? 1000 : 0} // Met le marqueur sélectionné au-dessus
            >
              <Popup><b>{commercial.name}</b><br/>Équipe {commercial.equipe}</Popup>
            </Marker>
          ))}
        </FeatureGroup>
      </MapContainer>
    </div>
  );
};


# --- pages/admin/Equipes/EquipeDetailsPage.tsx ---
// frontend-shadcn/src/pages/admin/Equipes/EquipeDetailsPage.tsx

import { useEffect, useState, useMemo } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { createColumns as createCommerciauxColumns } from "../commerciaux/commerciaux-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { ArrowLeft, Users, CheckCircle, Briefcase, Target, Trophy } from "lucide-react";
import { Skeleton } from "@/components/ui-admin/skeleton";
import StatCard from "@/components/ui-admin/StatCard";
import { GenericLineChart } from "@/components/charts/GenericLineChart";
import { equipeService, type EquipeDetailsFromApi } from "@/services/equipe.service";

const EquipeDetailsPage = () => {
  const { equipeId } = useParams<{ equipeId: string }>();
  const navigate = useNavigate();
  const [equipeDetails, setEquipeDetails] = useState<EquipeDetailsFromApi | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (equipeId) {
      setLoading(true);
      equipeService.getEquipeDetails(equipeId)
        .then(data => {
          setEquipeDetails(data);
        })
        .catch(error => {
          console.error("Erreur lors de la récupération des détails de l'équipe:", error);
          setEquipeDetails(null); // Reset in case of error
        })
        .finally(() => {
          setLoading(false);
        });
    }
  }, [equipeId]);

  const commerciauxColumns = useMemo(() => {
    const allCols = createCommerciauxColumns(false, () => {}); // Pas de mode suppression
    // On exclut les colonnes 'manager' et 'equipe' car redondantes ici
    return allCols.filter(col => col.id !== 'manager' && col.id !== 'equipe');
  }, []);

  if (loading) {
    return (
        <div className="space-y-6 animate-pulse">
            <Skeleton className="h-10 w-48" />
            <Skeleton className="h-24 w-full" />
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                {[...Array(4)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}
            </div>
            <Skeleton className="h-96 w-full" />
            <Skeleton className="h-96 w-full" />
        </div>
    )
  }

  if (!equipeDetails) {
    return <div>Équipe non trouvée ou erreur de chargement.</div>;
  }

  return (
    <div className="space-y-8">
      <Button variant="outline" onClick={() => navigate(-1)}>
        <ArrowLeft className="mr-2 h-4 w-4" />
        Retour à la liste des équipes
      </Button>

      <div className="space-y-2">
        <h1 className="text-3xl font-bold flex items-center gap-3">
            <Users className="h-8 w-8 text-primary" />
            Équipe {equipeDetails.nom}
        </h1>
        <p className="text-muted-foreground">Manager : {equipeDetails.manager}</p>
      </div>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard title="Contrats Signés" value={equipeDetails.stats.contratsSignes} Icon={CheckCircle} color="text-emerald-500" />
        <StatCard title="RDV Pris" value={equipeDetails.stats.rdvPris} Icon={Briefcase} color="text-sky-500"/>
        <StatCard title="Performance Moyenne" value={equipeDetails.stats.perfMoyenne} Icon={Target} suffix="%" color="text-amber-500"/>
        <StatCard title="Classement Général" value={Number(equipeDetails.stats.classementGeneral)} Icon={Trophy} prefix="#" color="text-yellow-500"/>
      </div>

      <GenericLineChart
        title="Évolution de la Performance de l'Équipe"
        data={equipeDetails.perfHistory}
        xAxisDataKey="name"
        lines={[{ dataKey: 'perf', stroke: 'hsl(var(--chart-2))', name: 'Performance (%)' }]}
      />

      <DataTable 
        columns={commerciauxColumns as any} 
        data={equipeDetails.commerciaux} 
        title={`Membres de l'équipe (${equipeDetails.commerciaux.length})`}
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de commercial..."
        isDeleteMode={false}
        onToggleDeleteMode={() => {}}
        rowSelection={{}}
        setRowSelection={() => {}}
        onConfirmDelete={() => {}}
      />
    </div>
  )
}

export default EquipeDetailsPage;


# --- components/ui-admin/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        onPointerDownOutside={(e) => {
          const target = e.target as HTMLElement;
          if (target.closest('[data-radix-select-content]')) {
            e.preventDefault();
          }
        }}
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



# --- components/ui-admin/alert-dialog.tsx ---
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui-admin/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



# --- pages/admin/zones/ZoneDetailsPage.tsx ---
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { zoneService, type ZoneDetailsFromApi } from '@/services/zone.service';
import { Button } from '@/components/ui-admin/button';
import { ArrowLeft, MapPin, Building, CheckCircle, Briefcase } from 'lucide-react';
import { Skeleton } from '@/components/ui-admin/skeleton';
import StatCard from '@/components/ui-admin/StatCard';
import { ZoneMap } from './ZoneMap'; // Assurez-vous que ce composant peut être réutilisé ou adapté
import type { Zone as ZoneTableType } from './columns';

const ZoneDetailsPage = () => {
  const { zoneId } = useParams<{ zoneId: string }>();
  const navigate = useNavigate();
  const [zoneDetails, setZoneDetails] = useState<ZoneDetailsFromApi | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (zoneId) {
      setLoading(true);
      zoneService.getZoneDetails(zoneId)
        .then(data => {
          setZoneDetails(data);
        })
        .catch(error => {
          console.error('Erreur lors de la récupération des détails de la zone:', error);
          setZoneDetails(null);
        })
        .finally(() => {
          setLoading(false);
        });
    }
  }, [zoneId]);

  if (loading) {
    return (
      <div className="space-y-6 animate-pulse">
        <Skeleton className="h-10 w-48" />
        <Skeleton className="h-24 w-full" />
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[...Array(3)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}
        </div>
        <Skeleton className="h-96 w-full" />
      </div>
    );
  }

  if (!zoneDetails) {
    return <div>Zone non trouvée ou erreur de chargement.</div>;
  }

  return (
    <div className="h-full flex flex-col space-y-8">
      <Button variant="outline" onClick={() => navigate(-1)}>
        <ArrowLeft className="mr-2 h-4 w-4" />
        Retour à la liste des zones
      </Button>

      <div className="space-y-2">
        <h1 className="text-3xl font-bold flex items-center gap-3">
          <MapPin className="h-8 w-8 text-primary" />
          Zone: {zoneDetails.nom}
        </h1>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <StatCard title="Nombre d'immeubles" value={zoneDetails.stats.nbImmeubles} Icon={Building} color="text-blue-500" />
        <StatCard title="Contrats Signés" value={zoneDetails.stats.totalContratsSignes} Icon={CheckCircle} color="text-emerald-500" />
        <StatCard title="RDV Pris" value={zoneDetails.stats.totalRdvPris} Icon={Briefcase} color="text-sky-500" />
      </div>

      <div className="flex-grow flex flex-col">
        <h2 className="text-2xl font-bold mb-4">Carte de la Zone</h2>
        <div className="flex-grow w-full">
          <ZoneMap
            existingZones={[{
              id: zoneDetails.id,
              name: zoneDetails.nom,
              assignedTo: '', // L'assignation n'est pas nécessaire ici
              color: zoneDetails.couleur,
              latlng: [zoneDetails.latitude, zoneDetails.longitude],
              radius: zoneDetails.rayonMetres,
              dateCreation: zoneDetails.createdAt,
            } as ZoneTableType]}
            immeubles={zoneDetails.immeubles.map(imm => ({
              id: imm.id,
              adresse: imm.adresse,
              status: imm.status, // Le statut est déjà une chaîne de caractères
              latlng: [imm.latitude, imm.longitude],
            }))}
            zoneToFocus={zoneDetails.id}
          />
        </div>
      </div>
    </div>
  );
};

export default ZoneDetailsPage;



# --- pages/commercial/doors-columns.tsx ---
// src/pages/commercial/doors-columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Edit, MessageSquare, Repeat, Hash, Check, BellOff, User, Smile, Frown, Landmark } from "lucide-react"
import { cn } from "@/lib/utils"

export type PorteStatus = "Non visité" | "Absent" | "Refus" | "Curieux" | "RDV" | "Contrat";

export type Porte = {
  id: string; 
  numero: string;
  statut: PorteStatus;
  commentaire: string;
  repassage: boolean;
  nbPassages: number;
};

export const statusConfig: Record<PorteStatus, { className: string; icon: React.ElementType }> = {
    "Non visité": { className: "bg-gray-100 text-gray-800 border-gray-300", icon: BellOff },
    "Absent": { className: "bg-yellow-100 text-yellow-800 border-yellow-300", icon: User },
    "Curieux": { className: "bg-purple-100 text-purple-800 border-purple-300", icon: Smile },
    "Refus": { className: "bg-red-100 text-red-800 border-red-300", icon: Frown },
    "RDV": { className: "bg-sky-100 text-sky-800 border-sky-300", icon: Check },
    "Contrat": { className: "bg-emerald-100 text-emerald-800 border-emerald-300", icon: Landmark },
};

export const statusList = Object.keys(statusConfig) as PorteStatus[];

export const createDoorsColumns = (
    onEdit: (porteId: string) => void
): ColumnDef<Porte>[] => [
    {
      accessorKey: "numero",
      header: "Porte",
      cell: ({ row }) => (
        <div className="font-bold flex items-center gap-2">
            <Hash className="h-4 w-4 text-muted-foreground"/>
            {row.original.numero}
        </div>
      ),
      meta: { className: "w-[100px]" }
    },
    {
      accessorKey: "statut",
      header: "Statut",
      cell: ({ row }) => {
        const statut = row.original.statut;
        const config = statusConfig[statut];
        return <Badge variant="outline" className={cn("font-medium", config.className)}><config.icon className="mr-1.5 h-3 w-3"/>{statut}</Badge>;
      }
    },
    {
        accessorKey: "nbPassages",
        header: "Passages",
        cell: ({ row }) => {
            return <span>{row.original.nbPassages}</span>
        }
    },
    {
        accessorKey: "repassage",
        header: "Repassage",
        cell: ({ row }) => {
            if (!row.original.repassage) return <span className="text-muted-foreground">-</span>;
            return (
                <div className="flex items-center gap-2 text-yellow-600 font-semibold">
                    <Repeat className="h-4 w-4" />
                    <span>À revoir</span>
                </div>
            )
        }
    },
    {
      accessorKey: "commentaire",
      header: "Commentaire",
      cell: ({ row }) => {
        const commentaire = row.original.commentaire;
        if (!commentaire) return <span className="italic text-muted-foreground">Aucun commentaire</span>;
        return (
          <div className="flex items-start gap-2">
            <MessageSquare className="h-4 w-4 text-muted-foreground mt-1 shrink-0" />
            <span className="max-w-xs truncate">{commentaire}</span>
          </div>
        )
      },
    },
    {
        id: "actions",
        cell: ({ row }) => (
            <div className="text-right">
                <Button variant="ghost" size="icon" onClick={() => onEdit(row.original.id)}>
                    <Edit className="h-4 w-4" />
                </Button>
            </div>
        )
    }
];


# --- hooks/useSpeechRecognition.ts ---
import { useState, useEffect, useRef } from 'react';

// --- Définitions de types ---
interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  onresult: (event: SpeechRecognitionEvent) => void;
  onerror: (event: SpeechRecognitionErrorEvent) => void;
  onend: () => void;
  start: () => void;
  stop: () => void;
}
type SpeechRecognitionConstructor = new () => SpeechRecognition;
interface SpeechRecognitionEvent extends Event {
  resultIndex: number;
  results: SpeechRecognitionResultList;
}
interface SpeechRecognitionErrorEvent extends Event {
  error: string;
}
interface CustomWindow extends Window {
  SpeechRecognition?: SpeechRecognitionConstructor;
  webkitSpeechRecognition?: SpeechRecognitionConstructor;
}
declare const window: CustomWindow;
const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;

export const useSpeechRecognition = () => {
  const [text, setText] = useState('');
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const stopIntentionallyRef = useRef(false);
  const finalTranscriptRef = useRef('');

  useEffect(() => {
    if (!SpeechRecognitionAPI) {
      console.warn("L'API Web Speech n'est pas supportée par ce navigateur.");
      return;
    }
    const recognition = new SpeechRecognitionAPI();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'fr-FR';

    recognition.onresult = (event: SpeechRecognitionEvent) => {
      let interimTranscript = '';
      for (let i = event.resultIndex; i < event.results.length; ++i) {
        if (event.results[i].isFinal) {
          finalTranscriptRef.current += event.results[i][0].transcript;
        } else {
          interimTranscript += event.results[i][0].transcript;
        }
      }
      setText(finalTranscriptRef.current + interimTranscript);
    };

    recognition.onerror = (event: SpeechRecognitionErrorEvent) => {
      console.error('Erreur de reconnaissance vocale:', event.error);
      setIsListening(false);
    };
    
    recognition.onend = () => {
      if (!stopIntentionallyRef.current) {
        try { recognition.start(); } 
        catch { setIsListening(false); }
      } else {
        setIsListening(false);
      }
    };
    
    recognitionRef.current = recognition;
    return () => { recognitionRef.current?.stop(); };
  }, []);

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      finalTranscriptRef.current = ''; 
      setText('');
      stopIntentionallyRef.current = false;
      setIsListening(true);
      try { recognitionRef.current.start(); } 
      catch { setIsListening(false); }
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      stopIntentionallyRef.current = true;
      recognitionRef.current.stop();
    }
  };

  return { text, isListening, startListening, stopListening, hasSupport: !!SpeechRecognitionAPI };
};


# --- components/ui-admin/table.tsx ---
// frontend-shadcn/src/components/ui/table.tsx

import * as React from "react"
import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  // + Ajout du div wrapper pour le scroll horizontal
  <div className="relative w-full overflow-auto"> 
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

// ... le reste du fichier ne change pas ...
const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


# --- components/charts/GenericHorizontalBarChart.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LabelList, Legend } from 'recharts';

interface ChartDataItem {
  [key: string]: string | number;
}

interface GenericHorizontalBarChartProps {
  title: string;
  data: ChartDataItem[];
  yAxisDataKey: string;
  barDataKey: string;
  fillColor: string;
  barName?: string;
}

export const GenericHorizontalBarChart = ({ 
  title, 
  data, 
  yAxisDataKey, 
  barDataKey, 
  fillColor,
  barName 
}: GenericHorizontalBarChartProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={350}>
          <BarChart 
            layout="vertical" 
            data={data} 
            margin={{
              top: 5,
              right: 30, 
              left: 20,
              bottom: 20, 
            }}
          >
            <CartesianGrid strokeDasharray="3 3" horizontal={false} />
            
            <XAxis type="number" stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
            
            <YAxis 
              type="category" 
              dataKey={yAxisDataKey} 
              stroke="hsl(var(--muted-foreground))" 
              fontSize={12} 
              tickLine={false} 
              axisLine={false}
              width={80} 
              tick={{ fill: 'hsl(var(--foreground))' }}
            />
            
            <Tooltip 
              cursor={{ fill: 'hsl(var(--muted))' }} 
              contentStyle={{ 
                backgroundColor: 'hsl(var(--background))', 
                borderColor: 'hsl(var(--border))',
                borderRadius: '0.5rem',
                boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
              }} 
            />
            
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: '20px' }} />
            
            <Bar 
              dataKey={barDataKey} 
              name={barName || "Valeur"} 
              fill={fillColor} 
              radius={[0, 4, 4, 0]} 
            >
              <LabelList 
                dataKey={barDataKey} 
                position="right" 
                style={{ fill: 'hsl(var(--foreground))', fontSize: '12px' }} 
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/DatePickerWithPresets.tsx ---
// src/components/ui/DatePickerWithPresets.tsx

import { format } from "date-fns"
import { fr } from "date-fns/locale"
import type { DateRange } from "react-day-picker"
import { Calendar as CalendarIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui-admin/button"
import { Calendar } from "@/components/ui-admin/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover"

interface DatePickerWithPresetsProps {
  className?: string
  selectedDate: DateRange | undefined
  onDateChange: (date: DateRange | undefined) => void
  onPresetSelect: (preset: string) => void
}

export function DatePickerWithPresets({
  className,
  selectedDate,
  onDateChange,
  onPresetSelect,
}: DatePickerWithPresetsProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          id="date"
          variant="outline"
          className={cn(
            "w-[280px] justify-start text-left font-normal h-11",
            !selectedDate && "text-muted-foreground",
            className
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {selectedDate?.from ? (
            selectedDate.to ? (
              <>
                {format(selectedDate.from, "d LLL y", { locale: fr })} -{" "}
                {format(selectedDate.to, "d LLL y", { locale: fr })}
              </>
            ) : (
              format(selectedDate.from, "d LLL y", { locale: fr })
            )
          ) : (
            <span>Choisir une période</span>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="flex w-auto flex-col space-y-2 p-2" align="end">
        <div className="flex items-center gap-2">
            <Button variant="ghost" size="sm" onClick={() => onPresetSelect('week')}>Cette semaine</Button>
            <Button variant="ghost" size="sm" onClick={() => onPresetSelect('month')}>Ce mois</Button>
            <Button variant="ghost" size="sm" onClick={() => onPresetSelect('year')}>Cette année</Button>
        </div>
        <div className="rounded-md border">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={selectedDate?.from}
            selected={selectedDate}
            onSelect={onDateChange}
            numberOfMonths={2}
            locale={fr}
          />
        </div>
      </PopoverContent>
    </Popover>
  )
}


# --- pages/admin/statitistiques/LeaderboardTable.tsx ---
// src/pages/admin/statitistiques/LeaderboardTable.tsx

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui-admin/table';
import { Badge } from '@/components/ui-admin/badge';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';

interface Performer {
  rank: number;
  name: string;
  avatar: string;
  value: number;
  change: number;
}

interface LeaderboardTableProps {
  title: string;
  description: string;
  data: Performer[];
  unit: string;
}

const rankColor = (rank: number) => {
    if (rank === 1) return "bg-yellow-400/20 text-yellow-700 border-yellow-400/50";
    if (rank === 2) return "bg-slate-400/20 text-slate-700 border-slate-400/50";
    if (rank === 3) return "bg-orange-400/20 text-orange-700 border-orange-400/50";
    return "bg-muted text-muted-foreground border-transparent";
}

export const LeaderboardTable = ({ title, description, data, unit }: LeaderboardTableProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent className="p-0">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">Rank</TableHead>
              <TableHead>Nom</TableHead>
              <TableHead className="text-right">{unit}</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((item) => (
              <TableRow key={item.rank}>
                <TableCell>
                    <Badge variant="outline" className={rankColor(item.rank)}>
                        {item.rank}
                    </Badge>
                </TableCell>
                <TableCell className="font-medium flex items-center gap-3">
                    <Avatar className="h-8 w-8">
                        <AvatarFallback>{item.avatar}</AvatarFallback>
                    </Avatar>
                    {item.name}
                </TableCell>
                <TableCell className="text-right font-bold text-lg">{item.value}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/Combobox.tsx ---
// frontend-shadcn/src/components/ui/Combobox.tsx
"use client"

import * as React from "react"
import { Check, ChevronsUpDown } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui-admin/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui-admin/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui-admin/popover"

interface ComboboxProps {
  options: { value: string; label: string }[];
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  emptyMessage?: string;
}

export function Combobox({ options, value, onChange, placeholder = "Sélectionner...", emptyMessage = "Aucun résultat." }: ComboboxProps) {
  const [open, setOpen] = React.useState(false)

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between h-8"
        >
          {value
            ? options.find((option) => option.value === value)?.label
            : placeholder}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-full p-0" style={{minWidth: "var(--radix-popover-trigger-width)"}}>
        <Command>
          <CommandInput placeholder="Rechercher..." />
          <CommandList>
            <CommandEmpty>{emptyMessage}</CommandEmpty>
            <CommandGroup>
              {options.map((option) => (
                <CommandItem
                  key={option.value}
                  value={option.value}
                  onSelect={(currentValue) => {
                    onChange(currentValue === value ? "" : currentValue)
                    setOpen(false)
                  }}
                >
                  <Check
                    className={cn(
                      "mr-2 h-4 w-4",
                      value === option.value ? "opacity-100" : "opacity-0"
                    )}
                  />
                  {option.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )
}


# --- components/MapComponent.tsx ---
import React, { useEffect, useRef } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

interface MapComponentProps {
  latitude: number;
  longitude: number;
  zoom: number;
  radius?: number; // Optional radius for drawing a circle
  color?: string; // New: Optional color for the circle
}

const MapComponent: React.FC<MapComponentProps> = ({ latitude, longitude, zoom, radius, color = 'blue' }) => {
  const mapRef = useRef<L.Map | null>(null);
  const circleRef = useRef<L.Circle | null>(null);
  const mapContainerRef = useRef<HTMLDivElement>(null);

  // Effect for map initialization and cleanup
  useEffect(() => {
    if (mapContainerRef.current && !mapRef.current) {
      mapRef.current = L.map(mapContainerRef.current).setView([latitude, longitude], zoom);

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(mapRef.current);
    }

    // eslint-disable-next-line react-hooks/exhaustive-deps
    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
        mapRef.current = null;
      }
    };
  }, []); // Empty dependency array: runs once on mount, cleans up on unmount

  // Effect for updating map layers and view
  useEffect(() => {
    const map = mapRef.current;
    if (!map) return; // Ensure map is initialized before proceeding

    // Remove existing circle if any
    if (circleRef.current) {
      map.removeLayer(circleRef.current);
      circleRef.current = null;
    }

    // Add new circle and fit bounds if radius is provided
    if (radius) {
      const center = L.latLng(latitude, longitude);
      const circle = L.circle(center, { radius: radius, color: color, fillColor: color, fillOpacity: 0.2 });
      circle.addTo(map);
      map.fitBounds(circle.getBounds());
      circleRef.current = circle;
    } else {
      // If no radius, just set view
      map.setView([latitude, longitude], zoom);
    }
  }, [latitude, longitude, zoom, radius]); // Dependencies: map instance and props that affect view/layers

  return <div id="map-container" ref={mapContainerRef} className="h-full w-full rounded-lg shadow-md"></div>;
};

export default MapComponent;



# --- components/ui-admin/slider.tsx ---
// src/components/ui-admin/slider.tsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        {/* MODIFICATION: La barre de progression utilise la couleur primaire */}
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        // MODIFICATION: Le curseur utilise la couleur primaire
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-primary ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }


# --- components/ui-admin/StatCard.tsx ---
// src/components/ui/StatCard.tsx

import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui-admin/card';
import type { LucideIcon } from 'lucide-react';
import CountUp from 'react-countup';
import { cn } from '@/lib/utils';
import { ArrowUp, ArrowDown } from 'lucide-react'; // <-- 1. Importer les icônes

interface StatCardProps {
  title: string;
  value: number;
  Icon: LucideIcon;
  prefix?: string;
  suffix?: string;
  color?: string;
  change?: number; // <-- 2. Ajouter la nouvelle prop 'change'
}

const StatCard = ({ title, value, Icon, prefix, suffix, color, change }: StatCardProps) => {
  // 3. Déterminer si le changement est positif ou non
  const isPositive = change !== undefined && change >= 0;

  return (
    <Card className="transition-transform duration-300 hover:scale-[1.03] hover:shadow-lg">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className={cn("h-4 w-4 text-muted-foreground", color)} />
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">
          {typeof value === 'number' && !isNaN(value) ? (
            <CountUp
              start={0}
              end={value}
              duration={1.5}
              separator=" "
              prefix={prefix}
              suffix={suffix}
              decimals={value % 1 !== 0 ? 1 : 0}
            />
          ) : (
            <span className="text-muted-foreground">N/A</span>
          )}
        </div>
        {/* --- 4. LOGIQUE POUR AFFICHER L'ÉVOLUTION --- */}
        {change !== undefined && (
          <p className={cn(
             "text-xs text-muted-foreground flex items-center gap-1 mt-1",
             isPositive ? "text-emerald-600" : "text-red-600"
          )}>
            {isPositive ? <ArrowUp className="h-3 w-3" /> : <ArrowDown className="h-3 w-3" />}
            <span>
              {isPositive && '+'}{change.toFixed(1)}% vs période précédente
            </span>
        </p>
        )}
      </CardContent>
    </Card>
  );
};

export default StatCard;


# --- layout/AdminHeader.tsx ---
// src/layout/AdminHeader.tsx
import { useState } from 'react'; // 'useEffect' a été retiré car non utilisé
import { Button } from '@/components/ui-admin/button';
import { Sheet, SheetContent, SheetHeader, SheetTrigger } from '@/components/ui-admin/sheet';
import { Menu } from 'lucide-react';
import { AdminNavContent } from './AdminNavContent';
import { BrandLogo } from '@/components/ui-commercial/BrandLogo';
import { DateTimeDisplay } from './DateTimeDisplay';
import { UserNav } from './UserNav';

const AdminHeader = () => {
  const [isSheetOpen, setIsSheetOpen] = useState(false);

  return (
    <header className="sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b border-b-[hsl(var(--winvest-blue-moyen))] bg-[hsl(var(--winvest-blue-moyen))] px-4 text-white sm:px-6">
      {/* Section de gauche : Titre et menu hamburger pour mobile */}
      <div className="flex items-center gap-4">
        <div className="lg:hidden">
          <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon" className="border-white/30 bg-transparent text-white hover:bg-black/10">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[250px] p-0 bg-white">
              <SheetHeader className='p-4 border-b'><BrandLogo /></SheetHeader>
              <div className="py-4">
                <AdminNavContent isCollapsed={false} onLinkClick={() => setIsSheetOpen(false)} />
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <h1 className="text-xl md:text-2xl font-bold">Espace Admin</h1>
      </div>
      
      {/* Section de droite : Date, Heure et Menu Utilisateur */}
      <div className="flex items-center gap-4">
        <DateTimeDisplay />
        <div className="border-l h-8"></div> {/* Votre séparateur est bien conservé */}
        <UserNav />
      </div>
    </header>
  );
};

export default AdminHeader;


# --- layout/AdminSidebar.tsx ---
// src/layout/AdminSidebar.tsx
import { Button } from '@/components/ui-admin/button';
import { PanelLeftClose, PanelLeftOpen } from 'lucide-react';
import { AdminNavContent } from './AdminNavContent';
import { UserNavMenu } from './UserNavMenu';
import logo from '@/assets/logo.png';

interface AdminSidebarProps {
  isCollapsed: boolean;
  toggleSidebar: () => void;
}

export const AdminSidebar = ({ isCollapsed, toggleSidebar }: AdminSidebarProps) => {
  return (
    <aside
      className={`hidden lg:flex flex-col bg-[#FAFAFA] transition-all duration-300 sticky top-0 h-screen ${
        isCollapsed ? 'w-20' : 'w-64'
      }`}
    >
      {/* HEADER CORRIGÉ */}
      <div
        className={`flex items-center h-20 px-4 shrink-0 ${ // shrink-0 empêche le header de se réduire
          isCollapsed ? 'justify-center' : 'justify-between'
        }`}
      >
        {/* Le logo n'est visible que si la sidebar est dépliée */}
        {!isCollapsed && (
          // Le logo est dans un conteneur pour ne pas perturber le flexbox
          <div className="flex-1"> 
            <img
              src={logo}
              alt="Logo Groupe Finanssor"
              className="h-30 w-auto object-contain -translate-x-6" // Votre style est conservé
            />
          </div>
        )}

        {/* Bouton pour plier/déplier */}
        <Button
          variant="ghost"
          size="icon"
          onClick={toggleSidebar}
        >
          {isCollapsed ? <PanelLeftOpen className="h-5 w-5" /> : <PanelLeftClose className="h-5 w-5" />}
        </Button>
      </div>

      {/* NAVIGATION */}
      <div className="flex-1 overflow-y-auto"> {/* Ajout de overflow-y-auto pour les petits écrans */}
        <AdminNavContent isCollapsed={isCollapsed} />
      </div>

      {/* USER MENU */}
      <div className="p-2 border-t mt-auto shrink-0">
        <UserNavMenu isCollapsed={isCollapsed} />
      </div>
    </aside>
  );
};


# --- components/ui-admin/card.tsx ---
// src/components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border border-[#EFEDED] bg-card text-card-foreground",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


# --- layout/CommercialNavContent.tsx ---
// src/layout/CommercialNavContent.tsx
import { NavLink } from 'react-router-dom';
import { Button } from '@/components/ui-admin/button';
import { 
    LayoutDashboard, 
    Target, 
    History, 
    BarChart2, 
    User as UserIcon 
} from 'lucide-react';
import { cn } from '@/lib/utils';

const commercialNavLinks = [
    { to: '/commercial/dashboard', text: 'Tableau de bord', icon: LayoutDashboard, exact: true },
    { to: '/commercial/prospecting', text: 'Prospection', icon: Target, exact: false },
    { to: '/commercial/history', text: 'Historique', icon: History, exact: true },
    { to: '/commercial/stats', text: 'Mes statistiques', icon: BarChart2, exact: true },
    { to: '/commercial/profile', text: 'Profil', icon: UserIcon, exact: true },
];

interface CommercialNavContentProps {
  isCollapsed: boolean;
  onLinkClick?: () => void;
}

export const CommercialNavContent = ({ isCollapsed, onLinkClick }: CommercialNavContentProps) => {
  return (
    <nav className="flex flex-col gap-1 px-2">
      {commercialNavLinks.map((link) => (
        // --- CORRECTION DÉFINITIVE ICI ---
        <NavLink to={link.to} key={link.text} onClick={onLinkClick} end={link.exact}>
          {({ isActive }) => (
            <Button
              variant='ghost'
              className={cn(
                "w-full justify-start gap-3 h-10 transition-colors duration-200",
                isActive
                  ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] font-semibold hover:bg-[hsl(var(--winvest-blue-clair))]'
                  : 'hover:bg-zinc-100 text-black'
              )}
            >
              <link.icon className="h-5 w-5" />
              {!isCollapsed && <span className="truncate">{link.text}</span>}
            </Button>
          )}
        </NavLink>
      ))}
    </nav>
  );
};


# --- components/ui-admin/GenericRadialBarChart.tsx ---
// src/components/charts/GenericRadialBarChart.tsx

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { ResponsiveContainer, PolarAngleAxis, RadialBarChart, RadialBar } from 'recharts';

interface GenericRadialChartProps {
  title: string;
  value: number;
  total: number;
  color: string;
}

export const GenericRadialBarChart = ({ title, value, total, color }: GenericRadialChartProps) => {
  const percentage = total > 0 ? (value / total) * 100 : 0;
  const data = [{ name: 'objectif', value: percentage }];

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent className="flex-1 flex justify-center items-center relative">
        <ResponsiveContainer width="100%" height={200}>
          <RadialBarChart
            innerRadius="80%"
            outerRadius="100%"
            data={data}
            startAngle={90}
            endAngle={-270}
            cx="50%"
            cy="50%"
            barSize={15}
          >
            <PolarAngleAxis
              type="number"
              domain={[0, 100]}
              angleAxisId={0}
              tick={false}
            />
            <RadialBar
              background
              dataKey="value"
              cornerRadius={10}
              angleAxisId={0}
              className={color} // Utilise la classe de couleur passée
            />
          </RadialBarChart>
        </ResponsiveContainer>
        <div className="absolute flex flex-col items-center justify-center">
          <span className="text-4xl font-bold">{Math.round(percentage)}%</span>
          <span className="text-sm text-muted-foreground">{value} / {total}</span>
        </div>
      </CardContent>
    </Card>
  );
};


# --- components/charts/GenericStackedBarChart.tsx ---
import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui-admin/card";

interface ChartDataItem {
  [key: string]: string | number;
}

interface StackedBarChartProps {
  title: string;
  description: string;
  data: ChartDataItem[];
  xAxisKey: string;
  bars: { key: string; name: string; color: string }[];
}

export const GenericStackedBarChart = ({ title, description, data, xAxisKey, bars }: StackedBarChartProps) => {
  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent className="flex-1 pb-0">
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={data} layout="vertical" margin={{ top: 5, right: 20, left: 80, bottom: 20 }}>
            <CartesianGrid strokeDasharray="3 3" horizontal={false} />
            <XAxis type="number" stroke="hsl(var(--muted-foreground))" fontSize={12} />
            <YAxis type="category" dataKey={xAxisKey} stroke="hsl(var(--muted-foreground))" fontSize={12} width={80} />
            <Tooltip cursor={{ fill: 'hsl(var(--muted))' }} contentStyle={{ backgroundColor: 'hsl(var(--background))', borderColor: 'hsl(var(--border))' }} />
            <Legend wrapperStyle={{ paddingTop: '20px' }}/>
            {bars.map(bar => (
              <Bar key={bar.key} dataKey={bar.key} name={bar.name} stackId="a" fill={bar.color} radius={[4, 4, 4, 4]} />
            ))}
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- services/equipe.service.ts ---
// frontend-shadcn/src/services/equipe.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/equipes';

import type { Commercial } from '@/types/types';

export interface EquipeFromApi {
  id: string;
  nom: string;
  managerId: string;
  commerciaux: Commercial[]; // Ajouté pour inclure les commerciaux
}

export interface EquipeDetailsFromApi {
    id: string;
    nom: string;
    manager: string;
    stats: {
        contratsSignes: number;
        rdvPris: number;
        perfMoyenne: number;
        classementGeneral: number | string;
        nbCommerciaux: number;
    };
    perfHistory: { name: string; perf: number }[];
    commerciaux: {
        id: string;
        nom: string;
        prenom: string;
        email: string;
        classement: number;
    }[];
}

const getEquipes = async (): Promise<EquipeFromApi[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getEquipeDetails = async (id: string): Promise<EquipeDetailsFromApi> => {
    const response = await axios.get(`${API_URL}/${id}/details`);
    return response.data;
};

const createEquipe = async (equipeData: { nom: string; managerId: string }) => {
  const response = await axios.post(API_URL, equipeData);
  return response.data;
};

const updateEquipe = async (id: string, equipeData: { nom: string; managerId: string }) => {
  const response = await axios.patch(`${API_URL}/${id}`, equipeData);
  return response.data;
};

const deleteEquipe = async (id: string) => {
  const response = await axios.delete(`${API_URL}/${id}`);
  return response.data;
};

export const equipeService = {
  getEquipes,
  getEquipeDetails,
  createEquipe,
  updateEquipe,
  deleteEquipe,
};


# --- services/immeuble.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/immeubles';

export interface ImmeubleFromApi {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  zone: { id: string; nom: string }; // Added id to zone
  prospectors: { id: string; prenom: string; nom: string }[];
  status: string;
  portes: any[];
  historiques: any[];
  latitude: number; // Added latitude
  longitude: number; // Added longitude
}

export interface ImmeubleDetailsFromApi extends ImmeubleFromApi {
  hasElevator: boolean;
  digicode: string | null;
  stats: {
    contratsSignes: number;
    rdvPris: number;
  };
  nbPortesTotal: number;
  prospectingMode: 'SOLO' | 'DUO';
  portes: { id: string; numeroPorte: string; statut: string; passage: number; commentaire: string; nbPassages: number }[];
}

const getImmeubles = async (): Promise<ImmeubleFromApi[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getImmeubleDetails = async (id: string): Promise<ImmeubleDetailsFromApi> => {
  const response = await axios.get(`${API_URL}/${id}/details`);
  return response.data;
};

const createImmeuble = async (immeubleData: any) => {
  const response = await axios.post(API_URL, immeubleData);
  return response.data;
};

const updateImmeuble = async (id: string, immeubleData: any) => {
  const response = await axios.patch(`${API_URL}/${id}`, immeubleData);
  return response.data;
};

const deleteImmeuble = async (id: string) => {
  const response = await axios.delete(`${API_URL}/${id}`);
  return response.data;
};

export const immeubleService = {
  getImmeubles,
  getImmeubleDetails,
  createImmeuble,
  updateImmeuble,
  deleteImmeuble,
};



# --- components/charts/GenericPieChart.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';

interface ChartDataItem {
  [key: string]: string | number;
}

interface GenericPieChartProps {
  title: string;
  data: ChartDataItem[];
  dataKey: string;
  nameKey: string;
  colors: string[];
}

export const GenericPieChart = ({ title, data, dataKey, nameKey, colors }: GenericPieChartProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Tooltip
              cursor={{ fill: 'hsl(var(--muted))' }}
              contentStyle={{ backgroundColor: 'hsl(var(--background))', borderColor: 'hsl(var(--border))' }}
            />
            <Pie
              data={data}
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={90}
              fill="#8884d8"
              paddingAngle={3}
              dataKey={dataKey}
              nameKey={nameKey}
              label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
              labelLine={false}
            >
              {data.map((_, index) => (
                <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
              ))}
            </Pie>
            <Legend iconSize={10} wrapperStyle={{ fontSize: '14px', paddingTop: '20px' }} />
          </PieChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/popover.tsx ---
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }



# --- components/ui-commercial/BrandLogo.tsx ---
// src/components/ui-commercial/BrandLogo.tsx
import { cn } from "@/lib/utils";

interface BrandLogoProps {
  className?: string;
  showText?: boolean;
  imageSize?: number;
  variant?: 'full' | 'initials';
}

export const BrandLogo = ({
  className,
  showText = true,
  imageSize = 32,

}: BrandLogoProps) => {
  
  
  const mainFontSize = imageSize;
  const subFontSize = imageSize * 0.3;
  const arcWidth = mainFontSize * 0.67;
  const arcHeight = mainFontSize * 0.27;

  return (
    <div className={cn("flex flex-col items-center justify-center pt-[6px]", className)}>
      <div className="relative flex items-center justify-center leading-none">
        <h1 className="font-extrabold text-black" style={{ fontSize: mainFontSize, fontFamily: "Montserrat, sans-serif" }}>
          Groupe
        </h1>
        <svg className="absolute" width={arcWidth} height={arcHeight} viewBox="0 0 100 50" preserveAspectRatio="none" style={{ top: -arcHeight * -0.3, left: -arcWidth * -0.16 }}>
          <path d="M0,50 C30,0 70,0 100,50 L100,50 L0,50 Z" fill="hsl(var(--winvest-blue-moyen))" />
        </svg>
      </div>
      {showText && (
        <div className="flex items-center w-full mt-[4px]">
          <span className="flex-grow h-px bg-black/70" />
          <span className="mx-2 font-semibold text-black tracking-[0.25em]" style={{ fontSize: subFontSize, fontFamily: "Montserrat, sans-serif" }}>
            FINANSSOR
          </span>
          <span className="flex-grow h-px bg-black/70" />
        </div>
      )}
    </div>
  );
};


# --- services/statistics.service.ts ---
// frontend-shadcn/src/services/statistics.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/statistics';

// Définition des types pour les filtres
export type PeriodType = 'WEEKLY' | 'MONTHLY' | 'YEARLY';
export type StatEntityType = 'COMMERCIAL' | 'EQUIPE' | 'MANAGER';

export interface StatisticsQuery {
  period: PeriodType;
  entityType?: StatEntityType;
  entityId?: string;
}

// Le service pour récupérer les statistiques
const getStatistics = async (query: StatisticsQuery) => {
  // On utilise `params` pour qu'axios formate correctement les query params dans l'URL
  const response = await axios.get(API_URL, { params: query });
  return response.data;
};

const getStatsForCommercial = async (commercialId: string) => {
  const response = await axios.get(`${API_URL}/commercial/${commercialId}`);
  return response.data;
};

const getCommercialHistory = async (commercialId: string) => {
  const response = await axios.get(`${API_URL}/commercial/${commercialId}/history`);
  return response.data;
};

const getStatsForManager = async (managerId: string) => {
  const response = await axios.get(`${API_URL}/manager/${managerId}`);
  return response.data;
};

const getManagerPerformanceHistory = async (managerId: string) => {
  const response = await axios.get(`${API_URL}/manager/${managerId}/history`);
  return response.data;
};

export const statisticsService = {
  getStatistics,
  getStatsForCommercial,
  getCommercialHistory,
  getStatsForManager,
  getManagerPerformanceHistory,
};


# --- components/ui-admin/GenericTable.tsx ---
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui-admin/table';

interface ChartDataItem {
  [key: string]: string | number;
}

interface Column {
  key: string;
  header: string;
  className?: string;
}

interface GenericTableProps {
  title: string;
  description: string;
  columns: Column[];
  data: ChartDataItem[];
}

export const GenericTable = ({ title, description, columns, data }: GenericTableProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              {columns.map(col => (
                <TableHead key={col.key} className={col.className}>{col.header}</TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((row, rowIndex) => (
              <TableRow key={rowIndex}>
                {columns.map(col => (
                  <TableCell key={col.key} className={`${col.className ?? ''} font-medium`}>{row[col.key]}</TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};


# --- contexts/AuthContext.tsx ---
import { createContext, useContext, useState } from 'react';
import type { ReactNode } from 'react';

// Définir les types pour plus de sécurité
type Role = 'admin' | 'manager' | 'directeur' | 'backoffice' | 'commercial';

interface User {
  id: string;
  name: string;
  role: Role;
  email?: string;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (role: Role) => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);

  // Simule une connexion. Dans une vraie app, ça appellerait une API.
  const login = (role: Role) => {
    const userData: User = { 
        id: '31590edb-714a-4442-a907-5661e04f83ae', // Alice Martin's ID from seed
        name: `${role.charAt(0).toUpperCase() + role.slice(1)} User`, 
        role 
    };
    setUser(userData);
  };

  const logout = () => {
    setUser(null);
  };

  const value = { user, isAuthenticated: !!user, login, logout };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Hook personnalisé pour utiliser le contexte facilement
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


# --- services/zone.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/zones';

export interface ZoneFromApi {
  id: string;
  nom: string;
  couleur: string;
  latitude: number;
  longitude: number;
  rayonMetres: number;
  createdAt: string;
}

export interface ZoneDetailsFromApi extends ZoneFromApi {
  stats: {
    nbImmeubles: number;
    totalContratsSignes: number;
    totalRdvPris: number;
  };
  immeubles: any[]; // Pour l'instant, on garde any pour la simplicité
}

const getZones = async (): Promise<ZoneFromApi[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getZoneDetails = async (id: string): Promise<ZoneDetailsFromApi> => {
  const response = await axios.get(`${API_URL}/${id}/details`);
  return response.data;
};

const createZone = async (zoneData: any) => {
  const response = await axios.post(API_URL, zoneData);
  return response.data;
};

const updateZone = async (id: string, zoneData: any) => {
  const response = await axios.patch(`${API_URL}/${id}`, zoneData);
  return response.data;
};

const deleteZone = async (id: string) => {
  const response = await axios.delete(`${API_URL}/${id}`);
  return response.data;
};

export const zoneService = {
  getZones,
  getZoneDetails,
  createZone,
  updateZone,
  deleteZone,
};



# --- components/ui-admin/checkbox.tsx ---
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }



# --- components/ui-admin/avatar.tsx ---
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }



# --- services/assignment-goals.service.ts ---
import axios from 'axios';
import { AssignmentType } from '@/types/enums';

const API_URL = 'http://localhost:3000/assignment-goals';

interface AssignZonePayload {
  zoneId: string;
  assigneeId: string;
  assigneeType: AssignmentType;
}

interface SetMonthlyGoalPayload {
  commercialId: string;
  goal: number;
  month: number;
  year: number;
}

const assignZone = async (zoneId: string, assigneeId: string, assigneeType: AssignmentType) => {
  const payload: AssignZonePayload = {
    zoneId,
    assigneeId,
    assigneeType,
  };
  const response = await axios.post(`${API_URL}/assign-zone`, payload);
  return response.data;
};

const setMonthlyGoal = async (commercialId: string, goal: number, month: number, year: number) => {
  const payload: SetMonthlyGoalPayload = {
    commercialId,
    goal,
    month,
    year,
  };
  const response = await axios.post(`${API_URL}/set-monthly-goal`, payload);
  return response.data;
};

export const assignmentGoalsService = {
  assignZone,
  setMonthlyGoal,
};



# --- components/ui-admin/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }



# --- types/types.ts ---
export interface Commercial {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  equipeId?: string;
  managerId: string;
  currentMonthlyGoal?: number; // Ajouté pour correspondre au schéma Prisma
  historiques: { nbContratsSignes: number }[]; // Ajouté pour correspondre à l'API
}

export interface Manager {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  nbEquipes?: number; // Rendu optionnel car peut être calculé
  classement?: number; // Rendu optionnel car peut être calculé
  equipes?: {
    id: string;
    nom: string;
    commerciaux?: {
      id: string;
      nom: string;
      prenom: string;
      telephone?: string;
      historiques?: {
        nbContratsSignes: number;
      }[];
    }[];
  }[];
}

export interface Zone {
  id: string;
  nom: string;
  latitude: number;
  longitude: number;
  rayonMetres: number;
  couleur: string;
  createdAt: string;
}



# --- layout/AdminLayout.tsx ---
// src/layout/AdminLayout.tsx
import { useState } from 'react';
import { Outlet } from 'react-router-dom';
import { AdminSidebar } from './AdminSidebar';
import AdminHeader from './AdminHeader';

const AdminLayout = () => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div className="flex h-screen bg-muted/40">
      <AdminSidebar isCollapsed={isCollapsed} toggleSidebar={toggleSidebar} />
      <div className="flex-1 flex flex-col">
        <AdminHeader />
        <main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default AdminLayout;


# --- components/ui-admin/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
import { buttonVariants } from "./button-variants"

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



# --- components/ui-admin/label.tsx ---
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }



# --- components/ui-admin/badge.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
import { badgeVariants } from "./badge-variants"

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge }



# --- types/enums.ts ---
// frontend-shadcn/src/types/enums.ts

export enum AssignmentType {
  EQUIPE = 'EQUIPE',
  MANAGER = 'MANAGER',
  COMMERCIAL = 'COMMERCIAL',
}

export enum PorteStatus {
  NON_VISITE = 'NON_VISITE',
  VISITE = 'VISITE',
  ABSENT = 'ABSENT',
  REFUS = 'REFUS',
  CURIEUX = 'CURIEUX',
  CONTRAT_SIGNE = 'CONTRAT_SIGNE',
}

export enum ProspectingMode {
  SOLO = 'SOLO',
  DUO = 'DUO',
}

// AJOUT DE L'ENUM MANQUANT
export enum PeriodType {
  WEEKLY,
  MONTHLY,
  YEARLY,
}


# --- components/ui-admin/skeleton.tsx ---
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }



# --- pages/backoffice/DashboardBackoffice.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardBackoffice = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau office - Admin</h1>
      </div>
    );
  };
  export default DashboardBackoffice;


# --- pages/manager/DashboardManager.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardManager = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau de Bord - Admin</h1>
      </div>
    );
  };
  export default DashboardManager;


# --- vite-env.d.ts ---
/// <reference types="vite/client" />

