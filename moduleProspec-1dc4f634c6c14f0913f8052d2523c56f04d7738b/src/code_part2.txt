

# --- code_part1.txt ---


# --- pages/admin/Dashboard/DashboardAdmin.tsx ---
// src/pages/admin/DashboardAdmin.tsx

import React, { useState, useEffect } from 'react';
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { cn } from '@/lib/utils';

// --- Imports des Composants ---
import StatCard from '@/components/ui/StatCard';
import { DashboardSkeleton } from './DashboardSkeleton';
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { GenericBarChart } from '@/components/charts/GenericBarChart';
import { GenericRadialBarChart } from '@/components/ui/GenericRadialBarChart';
import { Button } from '@/components/ui/button';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableRow } from "@/components/ui/table";

// --- Imports des Icônes ---
import { 
    BarChart3, Briefcase, FileSignature, Sparkles, Target, Calendar as CalendarIcon,
    Award, ClipboardCheck, Percent, UserCheck
} from 'lucide-react';

// --- Données simulées enrichies ---
const dashboardData = {
  week: {
    stats: { portesVisitees: 82, rdvPris: 15, contratsSignes: 7, tauxOuverture: 18, tauxRdv: 18.3, tauxSignature: 46.7, perfMoyenne: 78, commerciauxActifs: 23, heuresProspect: 312 },
    managerStats: { meilleurManager: "Mme Martin", tauxConclusionMoyen: 42, rdvMoyen: 18, effectifTotal: 3 },
    objectifMensuel: { value: 7, total: 30, title: "Objectif Contrats (semaine)" },
    activiteRecente: [ { id: 1, commercial: "Alice Leroy", action: "Nouveau contrat", type: "CONTRAT", temps: "il y a 5 min" }, { id: 2, commercial: "Paul Girard", action: "RDV pris", type: "RDV", temps: "il y a 22 min" }, { id: 3, commercial: "Emma Bonnet", action: "Refus client", type: "REFUS", temps: "il y a 1h" }, { id: 4, commercial: "Hugo Moreau", action: "Nouveau contrat", type: "CONTRAT", temps: "il y a 2h" }, ],
    portesTopeesData: [{ name: 'Lun', Visites: 15, RDV: 3, Refus: 2 }, { name: 'Mar', Visites: 20, RDV: 4, Refus: 1 }, { name: 'Mer', Visites: 18, RDV: 2, Refus: 5 }, { name: 'Jeu', Visites: 25, RDV: 5, Refus: 3 }, { name: 'Ven', Visites: 4, RDV: 1, Refus: 1 }],
    repartitionManagersData: [{ name: 'M. Dupont', value: 40 }, { name: 'Mme Martin', value: 35 }, { name: 'M. Bernard', value: 25 }],
    classementManagersGraphData: [{ name: 'Dupont', value: 40 }, { name: 'Martin', value: 35 }, { name: 'Bernard', value: 32 }, { name: 'Robert', value: 28 }],
  },
  month: {
    stats: { portesVisitees: 450, rdvPris: 70, contratsSignes: 25, tauxOuverture: 15.5, tauxRdv: 15.5, tauxSignature: 35.7, perfMoyenne: 85, commerciauxActifs: 28, heuresProspect: 1248 },
    managerStats: { meilleurManager: "M. Dupont", tauxConclusionMoyen: 38, rdvMoyen: 85, effectifTotal: 5 },
    objectifMensuel: { value: 25, total: 100, title: "Objectif Contrats (mois)"},
    activiteRecente: [ { id: 1, commercial: "Sophie Marchand", action: "Nouveau contrat", type: "CONTRAT", temps: "hier" }, { id: 2, commercial: "Nicolas Blanc", action: "RDV pris", type: "RDV", temps: "hier" }, { id: 3, commercial: "Camille Picard", action: "RDV pris", type: "RDV", temps: "mardi" }, { id: 4, commercial: "Axel Garnier", action: "Refus client", type: "REFUS", temps: "mardi" }, ],
    portesTopeesData: [{ name: 'S1', Visites: 100, RDV: 15, Refus: 10 }, { name: 'S2', Visites: 120, RDV: 20, Refus: 15 }, { name: 'S3', Visites: 90, RDV: 18, Refus: 8 }, { name: 'S4', Visites: 140, RDV: 17, Refus: 12 }],
    repartitionManagersData: [{ name: 'M. Dupont', value: 150 }, { name: 'Mme Martin', value: 180 }, { name: 'M. Bernard', value: 120 }],
    classementManagersGraphData: [{ name: 'Martin', value: 180 }, { name: 'Dupont', value: 150 }, { name: 'Bernard', value: 120 }, { name: 'Robert', value: 110 }],
  },
  last_month: {}, year_to_date: {}
};
// @ts-ignore
dashboardData.last_month = dashboardData.month; // @ts-ignore
dashboardData.year_to_date = dashboardData.month;
// @ts-ignore
dashboardData.last_week = dashboardData.week;

// Type for activiteRecente items
type ActiviteRecenteItem = {
  id: number;
  commercial: string;
  action: string;
  type: string;
  temps: string;
};

const ActivityBadge = ({ type }: { type: string }) => {
    switch (type) {
        case 'CONTRAT': return <Badge className="bg-emerald-100 text-emerald-800 border-emerald-300">Contrat</Badge>;
        case 'RDV': return <Badge className="bg-sky-100 text-sky-800 border-sky-300">RDV</Badge>;
        case 'REFUS': return <Badge className="bg-red-100 text-red-800 border-red-300">Refus</Badge>;
        default: return <Badge variant="secondary">{type}</Badge>;
    }
};

const CustomDatePicker = ({ onCancel, onValidate }: { onCancel: () => void; onValidate: (range: {from: Date, to: Date}) => void; }) => {
    const [startDate, setStartDate] = React.useState<Date | undefined>();
    const [endDate, setEndDate] = React.useState<Date | undefined>();
    return (
        <div className="flex flex-wrap items-center gap-2 rounded-lg border p-2 bg-background shadow-sm">
            <Popover>
                <PopoverTrigger asChild><Button variant="outline" className="w-[200px] font-normal justify-start text-left"><CalendarIcon className="mr-2 h-4 w-4" />{startDate ? format(startDate, 'd LLL y', { locale: fr }) : <span>Date de début</span>}</Button></PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={startDate} onSelect={setStartDate} initialFocus /></PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild><Button variant="outline" className="w-[200px] font-normal justify-start text-left"><CalendarIcon className="mr-2 h-4 w-4" />{endDate ? format(endDate, 'd LLL y', { locale: fr }) : <span>Date de fin</span>}</Button></PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={endDate} onSelect={setEndDate} initialFocus /></PopoverContent>
            </Popover>
            <Button className="bg-green-600 hover:bg-green-700" onClick={() => onValidate({ from: startDate!, to: endDate! })} disabled={!startDate || !endDate}>Valider</Button>
            <Button variant="ghost" onClick={onCancel}>Annuler</Button>
        </div>
    );
};

// --- StatCard spéciale pour le meilleur manager (texte) ---
const TextStatCard = ({ title, value, Icon, color }: { title: string; value: string; Icon: React.ElementType; color?: string; }) => {
    return (
      <Card className="transition-transform duration-300 hover:scale-[1.03] hover:shadow-lg">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">{title}</CardTitle>
          <Icon className={cn("h-4 w-4 text-muted-foreground", color)} />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{value}</div>
        </CardContent>
      </Card>
    );
};


const DashboardAdmin = () => {
    const [isLoading, setIsLoading] = useState(true);
    const [timeFilter, setTimeFilter] = useState('week');
    const [activePreset, setActivePreset] = useState('week');
    const [isCustomMode, setIsCustomMode] = useState(false);
    const [displayRangeLabel, setDisplayRangeLabel] = useState<string | null>(null);

    const handleTimeFilterChange = (filterKey: string) => {
        setIsLoading(true);
        setActivePreset(filterKey);
        setDisplayRangeLabel(null);
        // @ts-ignore
        setTimeFilter(dashboardData[filterKey] ? filterKey : 'week');
        setTimeout(() => setIsLoading(false), 600);
    };

    const handleCustomValidate = (range: {from: Date, to: Date}) => {
        const newLabel = `${format(range.from, "d LLL y", { locale: fr })} - ${format(range.to, "d LLL y", { locale: fr })}`;
        setDisplayRangeLabel(newLabel);
        handleTimeFilterChange("year_to_date");
        setIsCustomMode(false);
        setActivePreset("custom");
    };

    useEffect(() => {
        const timer = setTimeout(() => setIsLoading(false), 1000);
        return () => clearTimeout(timer);
    }, []);

    if (isLoading) return <DashboardSkeleton />;

    // @ts-ignore
    const currentData = dashboardData[timeFilter] || dashboardData.week;

    return (
        <div className="space-y-8 bg-zinc-50/50 p-4 sm:p-6 rounded-xl">
            <div className="flex flex-wrap gap-4 justify-between items-center animate-in fade-in duration-500 border-b pb-4">
                <h2 className="text-2xl font-semibold flex items-baseline gap-3 text-zinc-900">
                    <BarChart3 className="h-6 w-6 text-primary self-center"/>
                    <span>Statistiques d'ensemble</span>
                    {displayRangeLabel && <span className="text-lg font-normal text-muted-foreground tracking-tight">({displayRangeLabel})</span>}
                </h2>
                {!isCustomMode ? (
                     <div className="flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
                        <Button variant={activePreset === 'week' ? 'default' : 'ghost'} className={activePreset === 'week' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handleTimeFilterChange('week')}>Cette semaine</Button>
                        <Button variant={activePreset === 'month' ? 'default' : 'ghost'} className={activePreset === 'month' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handleTimeFilterChange('month')}>Ce mois</Button>
                        <Button variant={activePreset === 'last_month' ? 'default' : 'ghost'} className={activePreset === 'last_month' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handleTimeFilterChange('last_month')}>Mois dernier</Button>
                        <Button variant={activePreset === 'year_to_date' ? 'default' : 'ghost'} className={activePreset === 'year_to_date' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handleTimeFilterChange('year_to_date')}>Cette année</Button>
                        <Button variant={activePreset === 'custom' ? "secondary" : "ghost"} className="border-l rounded-l-none" onClick={() => setIsCustomMode(true)}>Personnalisé</Button>
                     </div>
                ) : ( <CustomDatePicker onCancel={() => { setIsCustomMode(false); setActivePreset(timeFilter); }} onValidate={handleCustomValidate} /> )}
            </div>

            <section>
                <h3 className="text-lg font-semibold mb-4 text-zinc-900">Indicateurs Commerciaux</h3>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 animate-in fade-in-0 [animation-delay:100ms] duration-500">
                    <StatCard title="Contrats Signés" value={currentData.stats.contratsSignes} Icon={FileSignature} color="text-emerald-500" />
                    <StatCard title="RDV Pris" value={currentData.stats.rdvPris} Icon={Briefcase} color="text-sky-500" />
                    <StatCard title="Taux de Signature" value={currentData.stats.tauxSignature} Icon={Sparkles} suffix="%" color="text-violet-500" />
                    <StatCard title="Performance Moyenne" value={currentData.stats.perfMoyenne} Icon={Target} suffix="%" color="text-amber-500" />
                </div>
            </section>
            
            <section>
                <h3 className="text-lg font-semibold mb-4 text-zinc-900">Indicateurs Managers</h3>
                 <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 animate-in fade-in-0 [animation-delay:200ms] duration-500">
                    <TextStatCard title="Meilleur Manager" value={currentData.managerStats.meilleurManager} Icon={Award} color="text-yellow-500" />
                    <StatCard title="Taux Conclusion Moyen" value={currentData.managerStats.tauxConclusionMoyen} Icon={Percent} suffix="%" color="text-green-500" />
                    <StatCard title="RDV Moyen / Manager" value={currentData.managerStats.rdvMoyen} Icon={ClipboardCheck} color="text-blue-500" />
                    <StatCard title="Effectif total des managers" value={currentData.managerStats.effectifTotal} Icon={UserCheck} color="text-indigo-500" />
                </div>
            </section>

            <section className="grid grid-cols-1 lg:grid-cols-3 gap-6 animate-in fade-in-0 [animation-delay:300ms] duration-500">
                <GenericRadialBarChart title={currentData.objectifMensuel.title} value={currentData.objectifMensuel.value} total={currentData.objectifMensuel.total} color="fill-emerald-500" />
                <div className="lg:col-span-2">
                    <Card className="h-full"><CardHeader><CardTitle>Flux d'activité récent</CardTitle><CardDescription>Les dernières actions importantes enregistrées.</CardDescription></CardHeader>
                        <CardContent><Table><TableBody>
                            {currentData.activiteRecente.map((item: ActiviteRecenteItem) => (
                                <TableRow key={item.id} className="animate-in fade-in slide-in-from-bottom-2 duration-700">
                                    <TableCell><div className="font-medium">{item.commercial}</div></TableCell>
                                    <TableCell><ActivityBadge type={item.type} /></TableCell>
                                    <TableCell className="text-right text-muted-foreground">{item.temps}</TableCell>
                                </TableRow>
                            ))}
                        </TableBody></Table></CardContent>
                    </Card>
                </div>
            </section>
            
            <section className="animate-in fade-in-0 [animation-delay:400ms] duration-500">
                 <GenericBarChart title="Performances par Manager (Portes Prospectées)" data={currentData.classementManagersGraphData} xAxisDataKey="name" barDataKey="value" fillColor={() => 'hsl(var(--chart-1))'}/>
            </section>

            <section className="grid gap-6 md:grid-cols-2 lg:grid-cols-7 animate-in fade-in-0 [animation-delay:500ms] duration-500">
                <div className="lg:col-span-4">
                  <GenericLineChart title="Activité de prospection" data={currentData.portesTopeesData} xAxisDataKey="name" lines={[ { dataKey: 'Visites', name: "Visites", stroke: 'hsl(var(--chart-1))' }, { dataKey: 'RDV', name: "RDV", stroke: 'hsl(var(--chart-2))' }, { dataKey: 'Refus', name: "Refus", stroke: 'hsl(var(--chart-3))' } ]}/>
                </div>
                <div className="lg:col-span-3">
                  <GenericPieChart title="Répartition des Visites par Manager" data={currentData.repartitionManagersData} dataKey="value" nameKey="name" colors={['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-4))']}/>
                </div>
            </section>
        </div>
    );
};

export default DashboardAdmin;


# --- components/data-table/DataTable.tsx ---
// frontend-shadcn/src/components/data-table/DataTable.tsx

"use client"

import * as React from "react"
import { useNavigate } from "react-router-dom"
import {
  type ColumnDef, type ColumnFiltersState, type SortingState, type RowSelectionState,
  flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel,
  getSortedRowModel, useReactTable,
} from "@tanstack/react-table"
import { PlusCircle, Search, Trash2, XCircle } from "lucide-react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { cn } from "@/lib/utils"

interface DataTableProps<TData extends { id: string }, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  filterColumnId: string
  filterPlaceholder: string
  title: string
  rowLinkBasePath?: string
  onRowClick?: (row: TData) => void
  addEntityButtonText?: string
  onAddEntity?: () => void
  isDeleteMode: boolean
  onToggleDeleteMode: () => void
  onConfirmDelete: (selectedRows: TData[]) => void
  rowSelection: RowSelectionState
  setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>>
  customHeaderContent?: React.ReactNode
  noCardWrapper?: boolean;
}

export function DataTable<TData extends { id: string }, TValue>({
  columns, data, filterColumnId, filterPlaceholder, title, rowLinkBasePath, onRowClick,
  addEntityButtonText, onAddEntity,
  isDeleteMode, onToggleDeleteMode, onConfirmDelete,
  rowSelection, setRowSelection,
  customHeaderContent,
  noCardWrapper = false,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])
  const [searchFocused, setSearchFocused] = React.useState(false)
  const navigate = useNavigate()

  const table = useReactTable({
    data, columns, onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters, onRowSelectionChange: setRowSelection,
    getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(), getFilteredRowModel: getFilteredRowModel(),
    state: { sorting, columnFilters, rowSelection },
  })

  const selectedRowsData = table.getFilteredSelectedRowModel().rows.map(row => row.original)
  const areRowsClickable = (onRowClick || rowLinkBasePath) && !isDeleteMode

  const handleRowClick = (row: any) => {
    if (isDeleteMode) {
      row.toggleSelected()
    } else if (onRowClick) {
      onRowClick(row.original)
    } else if (rowLinkBasePath) {
      navigate(`${rowLinkBasePath}/${row.original.id}`)
    }
  }

  // Le JSX de la table, réutilisable avec ou sans Card
  const tableContent = (
    <>
      {/* Le titre est maintenant optionnel et séparé de la barre d'outils */}
      {title && (
        <CardHeader>
          <CardTitle>{title}</CardTitle>
        </CardHeader>
      )}
      
      <CardContent className={!title ? "pt-6" : ""}>
        {/* --- CORRECTION DU LAYOUT : Nouvelle barre d'outils unifiée --- */}
        <div className="flex flex-wrap items-center justify-between gap-4 mb-4">
          {/* Section gauche : Barre de recherche */}
          <div className={cn(
            "relative w-full md:w-auto transition-all",
            searchFocused ? "ring-2 ring-primary/30 rounded-md" : "",
          )}>
            <Search className={cn(
              "absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 transition-all",
              searchFocused ? "text-primary" : "text-muted-foreground"
            )} />
            <Input
              placeholder={filterPlaceholder}
              value={(table.getColumn(filterColumnId)?.getFilterValue() as string) ?? ""}
              onChange={e=>table.getColumn(filterColumnId)?.setFilterValue(e.target.value)}
              className="pl-10 w-full min-w-[280px] md:min-w-[320px]"
              onFocus={()=>setSearchFocused(true)}
              onBlur={()=>setSearchFocused(false)}
              aria-label="Rechercher"
            />
          </div>

          {/* Section droite : Boutons d'action */}
          <div className="flex flex-wrap items-center gap-2">
            {customHeaderContent}
            {!isDeleteMode ? (
              <>
                {addEntityButtonText && (
                  <Button onClick={onAddEntity} className="bg-black text-white hover:bg-zinc-800 focus:ring-2 focus:ring-black/40 focus:outline-none">
                    <PlusCircle className="mr-2 h-4 w-4" />{addEntityButtonText}
                  </Button>
                )}
                <Button variant="outline" onClick={onToggleDeleteMode} className="focus:ring-2 focus:ring-destructive/30 focus:outline-none">
                  <Trash2 className="mr-2 h-4 w-4" />Supprimer
                </Button>
              </>
            ) : (
              <>
                <Button variant="destructive" disabled={selectedRowsData.length===0} onClick={()=>onConfirmDelete(selectedRowsData)} className="bg-red-600 text-white hover:bg-red-700 border border-red-600 focus:ring-2 focus:ring-red-400 focus:outline-none">
                  <Trash2 className="mr-2 h-4 w-4" />Supprimer ({selectedRowsData.length})
                </Button>
                <Button variant="outline" onClick={onToggleDeleteMode} className="focus:ring-2 focus:ring-muted/30 focus:outline-none">
                  <XCircle className="mr-2 h-4 w-4" />Annuler
                </Button>
              </>
            )}
          </div>
        </div>
        
        {/* La table elle-même */}
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map(headerGroup=>(
              <TableRow key={headerGroup.id} className="border-b-[#EFEDED] hover:bg-transparent">
                {headerGroup.headers.map(header=>(
                  <TableHead key={header.id} className={cn("h-12 px-4 text-base font-semibold text-gray-600 bg-muted/50", (header.column.columnDef.meta as any)?.className)}>
                    {header.isPlaceholder?null:flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows.length?table.getRowModel().rows.map((row,index)=>(
              <TableRow key={row.id} data-state={row.getIsSelected()&&"selected"} onClick={()=>handleRowClick(row)} className={cn(
                "group border-b-[#EFEDED] animate-in fade-in-0 slide-in-from-bottom-2 transition",
                areRowsClickable?"cursor-pointer":"select-none",
                row.getIsSelected()&&isDeleteMode?"bg-red-50":row.getIsSelected()?"bg-blue-50":""
              )} style={{animationDelay:`${index*30}ms`}}>
                {row.getVisibleCells().map(cell=>(
                  <TableCell key={cell.id} className={cn("group-hover:bg-zinc-100 transition-colors duration-150 py-4 px-4", (cell.column.columnDef.meta as any)?.className)}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            )):(
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center text-gray-400">
                  <span className="flex flex-col items-center justify-center gap-2">
                    <Search className="mx-auto h-8 w-8 opacity-30" />
                    <span>Aucun résultat trouvé.</span>
                  </span>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
        
        {/* Pagination */}
        <div className="flex flex-col-reverse sm:flex-row items-center justify-between gap-4 pt-4">
          <div className="text-sm text-muted-foreground">
            {isDeleteMode?`${table.getFilteredSelectedRowModel().rows.length} sélectionné(s) sur ${table.getFilteredRowModel().rows.length} visible(s)`:
            `${table.getFilteredRowModel().rows.length} ligne(s) affichée(s)`}
          </div>
          <div className="flex items-center justify-center sm:justify-end flex-wrap gap-4">
            <Select value={`${table.getState().pagination.pageSize}`} onValueChange={v=>table.setPageSize(Number(v))}>
              <SelectTrigger className="w-[140px] md:w-[160px] min-w-[140px]"><SelectValue placeholder={`${table.getState().pagination.pageSize} par page`}/></SelectTrigger>
              <SelectContent>{[10,20,30,40,50].map(ps=><SelectItem key={ps} value={`${ps}`}>{ps} par page</SelectItem>)}</SelectContent>
            </Select>
            <div className="flex items-center space-x-2 rounded-lg border px-3 py-1 bg-gray-50 min-w-[180px]">
              <div className="text-sm font-medium">Page {table.getState().pagination.pageIndex+1} sur {table.getPageCount()}</div>
              <Button variant="outline" size="sm" onClick={()=>table.previousPage()} disabled={!table.getCanPreviousPage()}>Précédent</Button>
              <Button variant="outline" size="sm" onClick={()=>table.nextPage()} disabled={!table.getCanNextPage()}>Suivant</Button>
            </div>
          </div>
        </div>
      </CardContent>
    </>
  );

  // Logique d'affichage
  if (noCardWrapper) {
    return tableContent;
  }
  
  return (
    <Card>
      {tableContent}
    </Card>
  )
}


# --- pages/admin/immeubles/portes/ImmeubleDetailsPage.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/portes/ImmeubleDetailsPage.tsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { 
    ArrowLeft, Building, Users, Check, X, MoveUpRight, KeyRound 
} from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { DataTable } from '@/components/data-table/DataTable';
import type { Porte } from './portes-columns';
import { createPortesColumns } from './portes-columns';
import { GenericRadialBarChart } from '@/components/ui/GenericRadialBarChart';
import { immeubleService, type ImmeubleDetailsFromAPI } from '@/services/immeuble.service';
import { ProspectingMode } from '@/types/enums'; // <-- CORRECTION: Importer depuis notre fichier d'enums

// Types locaux pour la clarté du composant
interface Prospector {
    id: string;
    nom: string;
}

interface ImmeubleDetails {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  prospectors: Prospector[];
  prospectingType: ProspectingMode;
  hasElevator: boolean;
  digicode: string | null;
  nbPortesTotal: number;
  portes: Porte[]; 
}

// --- Composants UI ---
const ProspectorBadge = ({ Icon, label, prospectors }: { Icon: React.ElementType, label: string, prospectors: Prospector[] }) => (
    <div className="flex items-start gap-3 rounded-lg border bg-card p-3 h-full">
        <div className="bg-muted p-2 rounded-md"><Icon className="h-5 w-5 text-muted-foreground" /></div>
        <div className="flex flex-col gap-1.5">
            <div className="text-sm text-muted-foreground">{label}</div>
            <div className="text-base font-semibold flex flex-col items-start">
                {prospectors.map(p => (
                    <Link key={p.id} to={`/admin/commerciaux/${p.id}`} className="hover:underline hover:text-primary">
                        {p.nom}
                    </Link>
                ))}
            </div>
        </div>
    </div>
);

const InfoBadge = ({ Icon, label, value }: { Icon: React.ElementType, label: string, value: string | React.ReactNode }) => (
    <div className="flex items-center gap-3 rounded-lg border bg-card p-3 h-full">
        <div className="bg-muted p-2 rounded-md"><Icon className="h-5 w-5 text-muted-foreground" /></div>
        <div>
            <div className="text-sm text-muted-foreground">{label}</div>
            <div className="text-base font-semibold">{value}</div>
        </div>
    </div>
);


const ImmeubleDetailsPage = () => {
    const { immeubleId } = useParams<{ immeubleId: string }>();
    const navigate = useNavigate();
    const [immeuble, setImmeuble] = useState<ImmeubleDetails | null>(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (immeubleId) {
            fetchData(immeubleId);
        }
    }, [immeubleId]);

    const fetchData = async (id: string) => {
        setLoading(true);
        try {
            const detailsFromApi = await immeubleService.getImmeubleDetails(id);

            const formattedDetails: ImmeubleDetails = {
                id: detailsFromApi.id,
                adresse: detailsFromApi.adresse,
                ville: detailsFromApi.ville,
                codePostal: detailsFromApi.codePostal,
                prospectors: (detailsFromApi.prospecteurs || []).map(p => ({
                    id: p.id,
                    nom: `${p.prenom} ${p.nom}`
                })),
                prospectingType: detailsFromApi.modeProspection,
                hasElevator: detailsFromApi.hasElevator,
                digicode: detailsFromApi.digicode,
                nbPortesTotal: detailsFromApi.nbPortesTotal,
                portes: (detailsFromApi.portes || []).map(p => {
                    let statusText: Porte['statut'] = 'Non visité';
                    switch(p.status) {
                        case 'VISITE': statusText = 'Visité'; break;
                        case 'ABSENT': statusText = 'Absent'; break;
                        case 'REFUS': statusText = 'Refus'; break;
                        case 'CURIEUX': statusText = 'Curieux'; break;
                        case 'CONTRAT_SIGNE': statusText = 'Contrat signé'; break;
                    }
                    return {
                        id: p.id,
                        numeroPorte: p.numeroPorte,
                        statut: statusText,
                        passage: p.nbPassages,
                        commentaire: p.commentaire || '',
                    }
                }),
            };
            setImmeuble(formattedDetails);
        } catch (error) {
            console.error("Erreur de chargement des détails:", error);
            setImmeuble(null);
        } finally {
            setLoading(false);
        }
    };

    const portesData = useMemo(() => {
        if (!immeuble) return [];
        const visitesMap = new Map(immeuble.portes.map(p => [p.numeroPorte, p]));
        const allPortes: Porte[] = [];
        for (let i = 1; i <= immeuble.nbPortesTotal; i++) {
            const numeroPorteStr = String(i);
            const visiteExistante = visitesMap.get(numeroPorteStr);
            if (visiteExistante) {
                allPortes.push({ ...visiteExistante });
            } else {
                allPortes.push({ id: `porte-non-visitee-${i}`, numeroPorte: numeroPorteStr, statut: 'Non visité', passage: 0, commentaire: "" });
            }
        }
        return allPortes;
    }, [immeuble]);

    const portesColumns = useMemo(() => createPortesColumns(), []);

    if (loading) {
        return (
            <div className="space-y-6 animate-pulse">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-40 w-full" />
                <div className="grid lg:grid-cols-3 gap-6">
                    <Skeleton className="lg:col-span-2 h-96" />
                    <Skeleton className="lg:col-span-1 h-96" />
                </div>
            </div>
        )
    }
    
    if (!immeuble) {
        return (
          <div className="text-center p-8">
            <h2 className="text-xl font-semibold">Immeuble non trouvé</h2>
            <p className="text-muted-foreground mt-2">Les détails pour cet immeuble n'ont pas pu être chargés.</p>
            <Button variant="outline" onClick={() => navigate(-1)} className="mt-4">
                <ArrowLeft className="mr-2 h-4 w-4" /> Retour
            </Button>
          </div>
        );
    }

    const portesProspectees = immeuble.portes.length;
    
    return (
        <div className="space-y-6">
            <Button variant="outline" onClick={() => navigate(-1)}>
                <ArrowLeft className="mr-2 h-4 w-4" />
                Retour à la liste des immeubles
            </Button>
            
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-2xl">
                        <Building className="h-6 w-6" />
                        {immeuble.adresse}, {immeuble.codePostal} {immeuble.ville}
                    </CardTitle>
                    <CardDescription>Détails et informations sur la prospection de cet immeuble.</CardDescription>
                </CardHeader>
                <CardContent className="grid grid-cols-2 md:grid-cols-4 gap-4">
                   <ProspectorBadge Icon={Users} label="Équipe de Prospection" prospectors={immeuble.prospectors} />
                   <InfoBadge Icon={Users} label="Type Prospection" value={immeuble.prospectingType} />
                   <InfoBadge Icon={MoveUpRight} label="Ascenseur" value={immeuble.hasElevator ? <Check className="text-green-600" /> : <X className="text-red-600" />} />
                   <InfoBadge Icon={KeyRound} label="Digicode" value={immeuble.digicode || "Aucun"} />
                </CardContent>
            </Card>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2">
                    <DataTable
                        columns={portesColumns}
                        data={portesData}
                        title="Détail des Portes"
                        filterColumnId="numeroPorte"
                        filterPlaceholder="Filtrer par n° de porte..."
                        isDeleteMode={false}
                        onToggleDeleteMode={() => {}}
                        rowSelection={{}}
                        setRowSelection={() => {}}
                        onConfirmDelete={() => {}}
                    />
                </div>
                <div className="lg:col-span-1">
                    <GenericRadialBarChart
                        title="Taux de Couverture"
                        value={portesProspectees}
                        total={immeuble.nbPortesTotal}
                        color="fill-sky-500"
                    />
                </div>
            </div>
        </div>
    );
};

export default ImmeubleDetailsPage;


# --- pages/admin/commerciaux/CommerciauxPage.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CommercialDetailsPage.tsx
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
    ArrowLeft, BarChart2, Briefcase, CheckCircle, Target, Building, Trophy,
    Zap, TrendingUp, Shuffle,
    Clock, // CORRECTION: Importer Clock
    XCircle // CORRECTION: Importer XCircle
} from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import StatCard from '@/components/ui/StatCard';
import { GenericHorizontalBarChart } from '@/components/charts/GenericHorizontalBarChart';
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { commercialService } from '@/services/commercial.service';
import { PeriodType } from '@/types/enums';

// Helper pour obtenir la date de début de période (identique à celle du back-end)
function getStartOfPeriod(period: PeriodType): Date {
  const d = new Date();
  d.setHours(0, 0, 0, 0); 
  if (period === PeriodType.WEEKLY) {
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1);
    d.setDate(diff);
  } else if (period === PeriodType.MONTHLY) {
    d.setDate(1);
  } else if (period === PeriodType.YEARLY) {
    d.setMonth(0, 1);
  }
  return d;
}

const CommercialDetailsPage = () => {
    const { commercialId } = useParams<{ commercialId: string }>();
    const navigate = useNavigate();
    const [commercial, setCommercial] = useState<any>(null);
    const [loading, setLoading] = useState(true);
    // CORRECTION: Initialiser avec la valeur de l'enum
    const [period, setPeriod] = useState<PeriodType>(PeriodType.WEEKLY);
    const [activePreset, setActivePreset] = useState('week');

    useEffect(() => {
        if (commercialId) {
            setLoading(true);
            commercialService.getCommercialDetails(commercialId)
                .then(data => setCommercial(data))
                .catch(err => {
                    console.error("Erreur chargement détails commercial:", err);
                    setCommercial(null);
                })
                .finally(() => setLoading(false));
        }
    }, [commercialId]);
    
    const handlePresetClick = (preset: string) => {
        setActivePreset(preset);
        // CORRECTION: Assigner les valeurs de l'enum
        let newPeriod: PeriodType = PeriodType.WEEKLY;
        if (preset === 'month') newPeriod = PeriodType.MONTHLY;
        if (preset === 'year') newPeriod = PeriodType.YEARLY;
        setPeriod(newPeriod);
    };

    if (loading) {
        return (
            <div className="space-y-6 animate-pulse">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-24 w-full" />
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
                    {[...Array(10)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}
                </div>
                <div className="grid gap-4 md:grid-cols-1 lg:grid-cols-2"><Skeleton className="h-96 rounded-lg" /><Skeleton className="h-96 rounded-lg" /></div>
            </div>
        )
    }
    if (!commercial) return <div>Commercial non trouvé.</div>;

    const periodStartDate = getStartOfPeriod(period);
    const currentStats = commercial.stats.find((s: any) => 
        s.periodType === period && new Date(s.periodStart).getTime() === periodStartDate.getTime()
    ) || { rdvPris: 0, contratsSignes: 0, tauxConclusion: 0, portesProspectees: 0, refusEnregistres: 0, heuresProspectees: 0, tauxTransformationPorteRdv: 0, rdvParHeure: 0, classementEquipe: 0 };
    
    const dailyProspect = [ { name: "Lundi", value: 25}, { name: "Mardi", value: 35} ];
    const repartitionContacts = [ { name: "RDV", value: currentStats.rdvPris }, { name: "Refus", value: currentStats.refusEnregistres } ];
    const rdvContratsHistory = [ { name: 'S-4', rdv: 5, contrats: 1 }, { name: 'Cette sem.', rdv: currentStats.rdvPris, contrats: currentStats.contratsSignes } ];
    const perfHistory = [ { name: 'S-4', perf: 65 }, { name: 'Cette sem.', perf: currentStats.tauxConclusion } ];

    return (
        <div className="space-y-6">
            <Button variant="outline" onClick={() => navigate(-1)}><ArrowLeft className="mr-2 h-4 w-4" />Retour</Button>
            
            <div className="rounded-lg border bg-card text-card-foreground p-6 shadow">
                <h3 className="text-2xl font-semibold">{commercial.prenom} {commercial.nom}</h3>
                <p className="text-sm text-muted-foreground pt-1.5">Équipe : {commercial.equipe.nom} | Manager : {commercial.manager.prenom} {commercial.manager.nom}</p>
            </div>

            <div className="flex flex-wrap gap-x-6 gap-y-4 justify-between items-center border-b pb-4">
                <h2 className="text-2xl font-semibold flex items-baseline gap-3">
                    <BarChart2 className="h-6 w-6 text-primary self-center" /><span>Statistiques de performance</span>
                </h2>
                <div className="flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
                    <Button variant={activePreset === 'week' ? 'default' : 'ghost'} className={activePreset === 'week' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handlePresetClick('week')}>Cette semaine</Button>
                    <Button variant={activePreset === 'month' ? 'default' : 'ghost'} className={activePreset === 'month' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handlePresetClick('month')}>Ce mois</Button>
                    <Button variant={activePreset === 'year' ? 'default' : 'ghost'} className={activePreset === 'year' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handlePresetClick('year')}>Cette année</Button>
                </div>
            </div>
            
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
                <StatCard title="RDV Pris" value={currentStats.rdvPris} Icon={Briefcase} />
                <StatCard title="Contrats Signés" value={currentStats.contratsSignes} Icon={CheckCircle} />
                <StatCard title="Taux Conclusion" value={currentStats.tauxConclusion} Icon={Target} suffix="%" />
                <StatCard title="Classement Équipe" value={currentStats.classementEquipe || 0} Icon={Trophy} prefix="#" />
                <StatCard title="Taux Transfo." value={currentStats.tauxTransformationPorteRdv} Icon={Shuffle} suffix="%" />
                <StatCard title="Portes Prospectées" value={currentStats.portesProspectees} Icon={Building} />
                <StatCard title="Refus" value={currentStats.refusEnregistres} Icon={XCircle} />
                <StatCard title="Heures Prospect." value={currentStats.heuresProspectees} Icon={Clock} suffix="h" />
                <StatCard title="RDV / Heure" value={currentStats.rdvParHeure} Icon={Zap} />
                <StatCard title="Contrats / Jour" value={0} Icon={TrendingUp} />
            </div>

             <div className="grid gap-4 md:grid-cols-1 lg:grid-cols-2">
                <GenericHorizontalBarChart title="Détail de la prospection (factice)" data={dailyProspect} yAxisDataKey="name" barDataKey="value" fillColor="hsl(var(--primary))" barName="Portes prospectées" />
                <GenericPieChart title="Répartition des contacts" data={repartitionContacts} dataKey="value" nameKey="name" colors={['hsl(var(--chart-2))', 'hsl(var(--chart-3))']} />
            </div>

             <div className="grid gap-4 md:grid-cols-1 lg:grid-cols-2">
                 <GenericLineChart title="Historique RDV vs Contrats" data={rdvContratsHistory} xAxisDataKey="name" lines={[{ dataKey: 'rdv', name: "RDV Pris", stroke: "hsl(var(--chart-1))" }, { dataKey: 'contrats', name: "Contrats Signés", stroke: "hsl(var(--chart-5))" }]} />
                 <GenericLineChart title="Évolution de la performance" data={perfHistory} xAxisDataKey="name" lines={[{ dataKey: 'perf', name: 'Taux Conclusion (%)', stroke: "hsl(var(--chart-2))" }]} />
            </div>
        </div>
    );
};

export default CommercialDetailsPage;


# --- pages/admin/zones/ZonesPage.tsx ---
// frontend-shadcn/src/pages/admin/zones/ZonesPage.tsx

import { useState, useEffect, useMemo } from 'react';
import { ZoneMap } from './ZoneMap';
import { Button } from '@/components/ui/button';
import { DataTable } from '@/components/data-table/DataTable';
import { createZoneColumns, type Zone as ZoneTableType } from './columns';
import { Modal } from '@/components/ui/Modal';
import { ZoneCreatorModal } from './ZoneCreatorModal';
import type { RowSelectionState } from '@tanstack/react-table';
import { zoneService, type ZoneFromAPI } from '@/services/zone.service';
import { managerService } from '@/services/manager.service';
import { equipeService } from '@/services/equipe.service';
import { commercialService } from '@/services/commercial.service';
import { AssignmentType } from '@/types/enums';
import L from 'leaflet';
import { ViewToggleContainer } from '@/components/ui/ViewToggleContainer';

interface Assignee {
  id: string;
  nom: string;
}

const ZonesPage = () => {
  const [view, setView] = useState<'table' | 'map'>('table');
  const [existingZones, setExistingZones] = useState<ZoneTableType[]>([]);
  const [loading, setLoading] = useState(true);
  const [assignmentLists, setAssignmentLists] = useState<{
    equipes: Assignee[];
    managers: Assignee[];
    commerciaux: Assignee[];
  }>({ equipes: [], managers: [], commerciaux: [] });
  const [isCreatorOpen, setIsCreatorOpen] = useState(false);
  const [editingZone, setEditingZone] = useState<ZoneTableType | null>(null);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<ZoneTableType[]>([]);
  const [zoneToFocusId, setZoneToFocusId] = useState<string | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [zones, equipes, managers, commerciaux] = await Promise.all([
        zoneService.getZones(),
        equipeService.getEquipes(),
        managerService.getManagers(),
        commercialService.getCommerciaux(),
      ]);

      const equipesMap = new Map(equipes.map(e => [e.id, e.nom]));
      const managersMap = new Map(managers.map(m => [m.id, `${m.prenom} ${m.nom}`]));
      const commerciauxMap = new Map(commerciaux.map(c => [c.id, `${c.prenom} ${c.nom}`]));

      const getAssigneeName = (zone: ZoneFromAPI) => {
        if (zone.typeAssignation === 'EQUIPE' && zone.equipeId) return equipesMap.get(zone.equipeId) || 'N/A';
        if (zone.typeAssignation === 'MANAGER' && zone.managerId) return managersMap.get(zone.managerId) || 'N/A';
        if (zone.typeAssignation === 'COMMERCIAL' && zone.commercialId) return commerciauxMap.get(zone.commercialId) || 'N/A';
        return 'Non assignée';
      };

      const formattedZones: ZoneTableType[] = zones.map(z => ({
        id: z.id,
        name: z.nom,
        assignedTo: getAssigneeName(z),
        color: z.couleur || 'gray',
        latlng: [z.latitude, z.longitude],
        radius: z.rayonMetres,
        dateCreation: z.createdAt,
      }));

      setExistingZones(formattedZones);
      setAssignmentLists({
        equipes: equipes.map(e => ({ id: e.id, nom: e.nom })),
        managers: managers.map(m => ({ id: m.id, nom: `${m.prenom} ${m.nom}` })),
        commerciaux: commerciaux.map(c => ({ id: c.id, nom: `${c.prenom} ${c.nom}` })),
      });
    } catch (error) {
      console.error('Erreur de chargement des données:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEditClick = (zone: ZoneTableType) => {
    setEditingZone(zone);
    setIsCreatorOpen(true);
  };

  const handleCloseCreator = () => {
    setIsCreatorOpen(false);
    setEditingZone(null);
  };

  const handleZoneValidated = async (data: {
    id?: string;
    center: L.LatLng;
    radius: number;
    name: string;
    typeAssignation: AssignmentType;
    assigneeId: string;
    color: string;
  }) => {
    const payload: any = {
      nom: data.name,
      latitude: data.center.lat,
      longitude: data.center.lng,
      rayonMetres: data.radius,
      couleur: data.color,
    };

    if (data.id) {
      if (data.assigneeId) {
        payload.typeAssignation = data.typeAssignation;
        payload.assigneeId = data.assigneeId;
      }
      try {
        await zoneService.updateZone(data.id, payload);
      } catch (error) {
        console.error('Erreur de mise à jour:', error);
      }
    } else {
      payload.typeAssignation = data.typeAssignation;
      payload.assigneeId = data.assigneeId;
      try {
        await zoneService.createZone(payload);
      } catch (error) {
        console.error('Erreur de création:', error);
      }
    }
    handleCloseCreator();
    fetchData();
  };

  const handleConfirmDelete = (selectedRows: ZoneTableType[]) => setItemsToDelete(selectedRows);
  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map(z => zoneService.deleteZone(z.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) {
      console.error('Erreur de suppression:', error);
    }
  };

  const handleRowClick = (zone: ZoneTableType) => {
    setZoneToFocusId(zone.id);
    setView('map');
  };
  const handleClearFocus = () => setZoneToFocusId(null);
  const toggleDeleteMode = () => {
    setIsDeleteMode(prev => !prev);
    setRowSelection({});
  };
  const zoneColumns = useMemo(() => createZoneColumns(isDeleteMode, handleEditClick), [isDeleteMode]);

  if (loading) return <div>Chargement...</div>;

  const tableComponent = (
    <DataTable
        noCardWrapper
        columns={zoneColumns}
        data={existingZones}
        title=""
        filterColumnId="name"
        filterPlaceholder="Rechercher une zone par son nom..."
        addEntityButtonText="Ajouter une Zone"
        onAddEntity={() => {
          setEditingZone(null);
          setIsCreatorOpen(true);
        }}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
        onRowClick={handleRowClick}
      />
  );
  
  const mapComponent = (
     <ZoneMap
        existingZones={existingZones}
        onAddZoneClick={() => {
          setEditingZone(null);
          setIsCreatorOpen(true);
        }}
        zoneToFocus={zoneToFocusId}
        onFocusClear={handleClearFocus}
      />
  );

  return (
    <div className="h-full flex flex-col gap-6">
      {isCreatorOpen && (
        <ZoneCreatorModal
          onValidateAndAssign={handleZoneValidated}
          onClose={handleCloseCreator}
          assignmentLists={assignmentLists}
          existingZones={existingZones}
          zoneToEdit={editingZone}
        />
      )}
      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])}>
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">
          Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} zone(s) sélectionnée(s)
          ?
        </p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map(item => (<li key={item.id}>{item.name}</li>))}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button variant="destructive" onClick={handleDelete}>Valider la suppression</Button>
        </div>
      </Modal>

      <ViewToggleContainer
        title="Gestion des Zones"
        description="Basculez entre la vue tableau et la vue carte interactive pour créer, modifier et visualiser les zones."
        view={view}
        onViewChange={setView}
        tableComponent={tableComponent}
        mapComponent={mapComponent}
      />
    </div>
  );
};

export default ZonesPage;


# --- components/ui/dropdown-menu.tsx ---
// src/components/ui/dropdown-menu.tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-[#EFEDED] bg-white p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# --- pages/admin/commerciaux/CommercialDetailsPage.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CommercialDetailsPage.tsx
import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
    ArrowLeft, BarChart2, Briefcase, CheckCircle, Target, Building, Trophy,
    Zap, TrendingUp, Shuffle, Clock, XCircle
} from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import StatCard from '@/components/ui/StatCard';
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { commercialService } from '@/services/commercial.service';
import { PeriodType } from '@/types/enums';

const CommercialDetailsPage = () => {
    const { commercialId } = useParams<{ commercialId: string }>();
    const navigate = useNavigate();
    const [commercial, setCommercial] = useState<any>(null);
    const [loading, setLoading] = useState(true);
    const [activePreset, setActivePreset] = useState('week');
    
    // Cet état va maintenant contenir UNIQUEMENT les stats de la période sélectionnée.
    const [currentStats, setCurrentStats] = useState<any>(null);

    useEffect(() => {
        if (commercialId) {
            setLoading(true);
            commercialService.getCommercialDetails(commercialId)
                .then(data => {
                    setCommercial(data);
                    // Au chargement, on met par défaut les stats de la semaine
                    setCurrentStats(data.stats?.WEEKLY || {});
                })
                .catch(err => {
                    console.error("Erreur chargement détails commercial:", err);
                    setCommercial(null);
                })
                .finally(() => setLoading(false));
        }
    }, [commercialId]);
    
    // La seule fonction du clic est de mettre à jour les stats affichées
    const handlePresetClick = (preset: string) => {
        setActivePreset(preset);
        if (!commercial?.stats) return;

        if (preset === 'week') setCurrentStats(commercial.stats.WEEKLY || {});
        if (preset === 'month') setCurrentStats(commercial.stats.MONTHLY || {});
        if (preset === 'year') setCurrentStats(commercial.stats.YEARLY || {});
    };

    // Les données des graphiques sont maintenant basées sur `currentStats`
    const rdvContratsHistory = useMemo(() => [
        { name: 'S-4', rdv: 5, contrats: 1 },
        { name: 'Actuel', rdv: currentStats?.rdvPris || 0, contrats: currentStats?.contratsSignes || 0 }
    ], [currentStats]);
    
    const pieChartData = useMemo(() => {
        if (!currentStats) return [];
        const rdvSansContrat = (currentStats.rdvPris || 0) - (currentStats.contratsSignes || 0);
        return [
            { name: 'Contrats Signés', value: currentStats.contratsSignes || 0 },
            { name: 'RDV sans contrat', value: rdvSansContrat < 0 ? 0 : rdvSansContrat }
        ];
    }, [currentStats]);


    if (loading) {
        return (
            <div className="space-y-6 animate-pulse p-6">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-24 w-full" />
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">{[...Array(10)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}</div>
                <div className="grid gap-4 md:grid-cols-1 lg:grid-cols-2"><Skeleton className="h-96 rounded-lg" /><Skeleton className="h-96 rounded-lg" /></div>
            </div>
        )
    }
    if (!commercial || !currentStats) return <div className="p-6">Données du commercial non trouvées.</div>;
    
    return (
        <div className="space-y-6">
            <Button variant="outline" onClick={() => navigate(-1)}><ArrowLeft className="mr-2 h-4 w-4" />Retour</Button>
            
            <div className="rounded-lg border bg-card text-card-foreground p-6 shadow">
                <h3 className="text-2xl font-semibold">{commercial.prenom} {commercial.nom}</h3>
                <p className="text-sm text-muted-foreground pt-1.5">Équipe : {commercial.equipe.nom} | Manager : {commercial.manager.prenom} {commercial.manager.nom}</p>
            </div>

            <div className="flex flex-wrap gap-x-6 gap-y-4 justify-between items-center border-b pb-4">
                <h2 className="text-2xl font-semibold flex items-baseline gap-3"><BarChart2 className="h-6 w-6 text-primary self-center" /><span>Statistiques de performance</span></h2>
                <div className="flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
                    <Button variant={activePreset === 'week' ? 'default' : 'ghost'} className={activePreset === 'week' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handlePresetClick('week')}>Cette semaine</Button>
                    <Button variant={activePreset === 'month' ? 'default' : 'ghost'} className={activePreset === 'month' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handlePresetClick('month')}>Ce mois</Button>
                    <Button variant={activePreset === 'year' ? 'default' : 'ghost'} className={activePreset === 'year' ? 'bg-black text-white hover:bg-black/90' : ''} onClick={() => handlePresetClick('year')}>Cette année</Button>
                </div>
            </div>
            
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
                <StatCard title="RDV Pris" value={currentStats.rdvPris || 0} Icon={Briefcase} />
                <StatCard title="Contrats Signés" value={currentStats.contratsSignes || 0} Icon={CheckCircle} />
                <StatCard title="Taux Conclusion" value={currentStats.tauxConclusion || 0} Icon={Target} suffix="%" />
                <StatCard title="Classement Équipe" value={currentStats.classementEquipe || 0} Icon={Trophy} prefix="#" />
                <StatCard title="Taux Transfo." value={currentStats.tauxTransformationPorteRdv || 0} Icon={Shuffle} suffix="%" />
                <StatCard title="Portes Prospectées" value={currentStats.portesProspectees || 0} Icon={Building} />
                <StatCard title="Refus" value={currentStats.refusEnregistres || 0} Icon={XCircle} />
                <StatCard title="Heures Prospect." value={currentStats.heuresProspectees || 0} Icon={Clock} suffix="h" />
                <StatCard title="RDV / Heure" value={currentStats.rdvParHeure || 0} Icon={Zap} />
                <StatCard title="Contrats / Jour" value={0} Icon={TrendingUp} />
            </div>

             <div className="grid gap-4 md:grid-cols-1 lg:grid-cols-2">
                 <GenericLineChart title="Historique RDV vs Contrats" data={rdvContratsHistory} xAxisDataKey="name" lines={[{ dataKey: 'rdv', name: "RDV Pris", stroke: "hsl(var(--chart-1))" }, { dataKey: 'contrats', name: "Contrats Signés", stroke: "hsl(var(--chart-5))" }]} />
                 <GenericPieChart title="Répartition des Résultats de RDV" data={pieChartData} dataKey="value" nameKey="name" colors={['hsl(var(--chart-5))', 'hsl(var(--chart-1))']} />
            </div>
        </div>
    );
};

export default CommercialDetailsPage;


# --- pages/admin/commerciaux/commerciaux-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/commerciaux-table/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Mail, Eye, Edit } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

export type Commercial = {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  manager: string;
  managerId: string;
  equipe: string;
  equipeId: string;
  classement: number;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createColumns = (isDeleteMode: boolean, onEdit: (commercial: Commercial) => void): ColumnDef<Commercial>[] => {
  const columns: ColumnDef<Commercial>[] = [
    // --- Colonne de sélection ---
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: any }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      cell: ({ row }: { row: any }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    }] : []),

    // --- Colonnes de données ---
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "prenom",
      header: () => <Header title="Prénom" />,
    },
    {
      accessorKey: "email",
      header: () => <Header title="Email" />,
      cell: ({ row }) => (
        <a href={`mailto:${row.getValue("email")}`} className="flex items-center gap-2 hover:underline">
          <Mail className="h-4 w-4 text-muted-foreground" />
          {row.getValue("email")}
        </a>
      )
    },
    {
      accessorKey: "manager",
      header: () => <Header title="Manager" />,
      cell: ({ row }) => {
        const managerName = row.original.manager;
        const managerId = row.original.managerId;
        return (
            <Link 
                to={`/admin/managers/${managerId}`} 
                className="hover:underline hover:text-primary transition-colors"
                onClick={(e) => e.stopPropagation()}
            >
                {managerName}
            </Link>
        )
      },
    },
    {
      accessorKey: "equipe",
      header: () => <Header title="Équipe" />,
    },
    {
      accessorKey: "classement",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classement") as number;
        // CORRECTION: Rétablissement des couleurs des badges
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300 hover:bg-yellow-200/80";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300 hover:bg-slate-300/80";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300 hover:bg-orange-300/80";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>{classement}</Badge>
          </div>
        );
      },
    },

    // --- Colonne d'Actions (améliorée) ---
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const commercial = row.original;
            return (
                // CORRECTION: Utilisation d'un TooltipProvider et ajout d'espace
                <TooltipProvider delayDuration={100}>
                    <div className="text-right space-x-2">
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button asChild variant="ghost" className="h-8 w-8 p-0">
                                    <Link to={`/admin/commerciaux/${commercial.id}`} onClick={(e) => { e.stopPropagation(); }}>
                                        <Eye className="h-4 w-4" />
                                        <span className="sr-only">Voir les détails</span>
                                    </Link>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Voir les détails</p></TooltipContent>
                        </Tooltip>

                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(commercial); }}>
                                    <Edit className="h-4 w-4" />
                                    <span className="sr-only">Modifier</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Modifier</p></TooltipContent>
                        </Tooltip>
                    </div>
                </TooltipProvider>
            )
        },
    },
  ]
  
  return columns;
}


# --- components/ui/select.tsx ---
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}



# --- pages/admin/Equipes/equipes-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/Equipes/equipes-table/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Users as CommerciauxIcon, Eye, Award, Edit } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

export type Equipe = {
  id: string;
  nom: string;
  manager: {
    id: string; // AJOUT: id du manager pour la modale d'édition
    nom: string;
    avatarFallback: string;
  };
  nbCommerciaux: number;
  classementGeneral: number;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)
const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createEquipesColumns = (isDeleteMode: boolean, onEdit: (equipe: Equipe) => void): ColumnDef<Equipe>[] => {
  return [
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: import("@tanstack/react-table").Table<Equipe> }) => (
        <Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />
      ),
      cell: ({ row }: { row: import("@tanstack/react-table").Row<Equipe> }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" onClick={(e) => e.stopPropagation()} />
      ),
      enableSorting: false, enableHiding: false,
    }] : []),
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom de l'équipe" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "manager",
      header: () => <Header title="Manager responsable" />,
      cell: ({ row }) => {
        const manager = row.original.manager
        return (
          <Link to={`/admin/managers/${manager.id}`} className="flex items-center gap-2 group" onClick={(e) => e.stopPropagation()}>
            <Avatar className="h-8 w-8">
              <AvatarFallback>{manager.avatarFallback}</AvatarFallback>
            </Avatar>
            <span className="group-hover:underline group-hover:text-primary transition-colors">{manager.nom}</span>
          </Link>
        )
      },
      sortingFn: (rowA, rowB) => {
        return rowA.original.manager.nom.localeCompare(rowB.original.manager.nom);
      }
    },
    {
      accessorKey: "nbCommerciaux",
      header: () => <div className="text-center"><Header title="Effectif" /></div>,
      cell: ({ row }) => (
        <div className="flex items-center justify-center gap-2">
          <CommerciauxIcon className="h-4 w-4 text-muted-foreground" />
          <span>{row.getValue("nbCommerciaux")}</span>
        </div>
      )
    },
    {
      accessorKey: "classementGeneral",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classementGeneral") as number;
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>
              <Award className="mr-1 h-3 w-3" />
              {classement}
            </Badge>
          </div>
        );
      },
    },
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const equipe = row.original;
            return (
              <TooltipProvider delayDuration={100}>
                <div className="text-right space-x-2">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button asChild variant="ghost" className="h-8 w-8 p-0">
                            <Link to={`/admin/equipes/${equipe.id}`} onClick={(e) => { e.stopPropagation(); }}>
                                <Eye className="h-4 w-4" />
                                <span className="sr-only">Voir les détails de l'équipe</span>
                            </Link>
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent><p>Voir les détails</p></TooltipContent>
                    </Tooltip>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(equipe); }}>
                            <Edit className="h-4 w-4" />
                            <span className="sr-only">Modifier</span>
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent><p>Modifier</p></TooltipContent>
                    </Tooltip>
                </div>
              </TooltipProvider>
            )
        },
    },
  ]
}


# --- pages/admin/Managers/managers-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/Managers/managers-table/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Mail, Phone, Eye, Edit } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"


export type Manager = {
  id: string
  nom: string
  prenom: string
  email: string
  telephone: string | null
  nbEquipes: number
  classement: number
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const getColumns = (isDeleteMode: boolean, onEdit: (manager: Manager) => void): ColumnDef<Manager>[] => {
  const columns: ColumnDef<Manager>[] = [
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: import("@tanstack/react-table").Table<Manager> }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      cell: ({ row }: { row: import("@tanstack/react-table").Row<Manager> }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    }] : []),
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "prenom",
      header: () => <Header title="Prénom" />,
    },
    {
      accessorKey: "email",
      header: () => <Header title="Email" />,
      cell: ({ row }) => (
        <a href={`mailto:${row.getValue("email")}`} className="flex items-center gap-2 hover:underline">
          <Mail className="h-4 w-4 text-muted-foreground" />
          {row.getValue("email")}
        </a>
      ),
    },
    {
      accessorKey: "telephone",
      header: () => <Header title="Téléphone" />,
      cell: ({ row }) => (
        <a href={`tel:${row.getValue("telephone")}`} className="flex items-center gap-2 hover:underline">
          <Phone className="h-4 w-4 text-muted-foreground" />
          {row.getValue("telephone")}
        </a>
      ),
    },
    {
      accessorKey: "nbEquipes",
      header: () => <div className="text-center"><Header title="Nb. d'équipes" /></div>,
      cell: ({ row }) => <div className="text-center">{row.getValue("nbEquipes")}</div>,
      meta: { className: "text-center" }
    },
    {
      accessorKey: "classement",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classement") as number;
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300 hover:bg-yellow-200/80";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300 hover:bg-slate-300/80";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300 hover:bg-orange-300/80";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>{classement}</Badge>
          </div>
        );
      },
    },
    {
      id: "actions",
      header: () => <div className="text-right"><Header title="Actions" /></div>,
      cell: ({ row }) => {
        const manager = row.original;
        return (
          <TooltipProvider delayDuration={100}>
            <div className="text-right space-x-2">
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button asChild variant="ghost" className="h-8 w-8 p-0">
                    <Link to={`/admin/managers/${manager.id}`} onClick={(e) => e.stopPropagation()}>
                      <Eye className="h-4 w-4" />
                      <span className="sr-only">Voir les détails</span>
                    </Link>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Voir les détails</p></TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(manager); }}>
                    <Edit className="h-4 w-4" />
                    <span className="sr-only">Modifier</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Modifier</p></TooltipContent>
              </Tooltip>
            </div>
          </TooltipProvider>
        )
      }
    },
  ]
  
  return columns;
}


# --- pages/admin/suivi/SuiviPage.tsx ---
// frontend-shadcn/src/pages/admin/suivi/SuiviPage.tsx
import { useState, useMemo, useEffect, useRef } from 'react';
import { SuiviSidebar } from './SuiviSidebar';
import { SuiviMap } from './SuiviMap';
import { FloatingTranscriptPopup } from './FloatingTranscriptPopup';
import type { Commercial, Transcription, Zone } from './types';

// --- MOCK DATA (inchangé) ---
const MOCK_COMMERCIALS: Commercial[] = [
  { id: 'com-001', name: 'Alice Leroy', avatarFallback: 'AL', position: [48.873, 2.34], equipe: 'Alpha' },
  { id: 'com-002', name: 'Paul Girard', avatarFallback: 'PG', position: [48.858, 2.359], equipe: 'Alpha' },
  { id: 'com-003', name: 'Emma Bonnet', avatarFallback: 'EB', position: [48.887, 2.344], equipe: 'Bêta' },
  { id: 'com-004', name: 'Hugo Moreau', avatarFallback: 'HM', position: [48.865, 2.335], equipe: 'Bêta' },
];
const MOCK_TRANSCRIPTIONS: Transcription[] = [
  { id: 't-1', commercialId: 'com-001', commercialName: 'Alice Leroy', date: new Date(Date.now() - 5 * 60000), snippet: 'Bonjour, je suis Alice de Finanssor. Je vous contacte...', fullText: 'Bonjour, je suis Alice de Finanssor. Je vous contacte au sujet de votre éligibilité à notre nouvelle offre. XXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXX XXXXXXX XXXXXXX SCSFSFS ' },
];
const MOCK_ZONES: Zone[] = [
  { id: 'zone-1', name: 'Opéra', color: 'green', latlng: [48.872, 2.34], radius: 1500 },
];

const SuiviPage = () => {
  const [selectedCommercial, setSelectedCommercial] = useState<Commercial | null>(MOCK_COMMERCIALS[0] || null);
  const [selectedTranscription, setSelectedTranscription] = useState<Transcription | null>(null);
  
  const [liveText, setLiveText] = useState('');
  const [isProspecting, setIsProspecting] = useState(false);
  const [audioChunks, setAudioChunks] = useState<Blob[]>([]);
  const prospectingTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    const ws = new WebSocket('ws://localhost:8080');
    ws.onopen = () => console.log('WebSocket connecté (Admin)');
    ws.onclose = () => console.log('WebSocket déconnecté (Admin)');

    ws.onmessage = (event) => {
      // Gérer les données audio binaires
      if (event.data instanceof Blob) {
        setAudioChunks(prev => [...prev, event.data]);
        return;
      }
      
      // Gérer les données texte (transcription)
      try {
        const data = JSON.parse(event.data);
        if (data.type === 'LIVE_TRANSCRIPT' && data.payload.commercialId === selectedCommercial?.id) {
          setIsProspecting(true);
          setLiveText(data.payload.text);

          if (prospectingTimeoutRef.current) clearTimeout(prospectingTimeoutRef.current);
          prospectingTimeoutRef.current = setTimeout(() => {
            setIsProspecting(false);
          }, 3000);
        }
      } catch (error) {
          // Si ce n'est pas du JSON, on l'ignore (ça pourrait être un message de ping/pong, etc.)
      }
    };

    return () => {
      ws.close();
      if(prospectingTimeoutRef.current) clearTimeout(prospectingTimeoutRef.current);
    };
  }, [selectedCommercial]);
  
  // Vider les chunks audio à chaque fois qu'on en reçoit de nouveaux pour éviter une accumulation infinie
  useEffect(() => {
    if(audioChunks.length > 0) {
        const timer = setTimeout(() => setAudioChunks([]), 0);
        return () => clearTimeout(timer);
    }
  }, [audioChunks]);

  useEffect(() => {
    setLiveText('');
    setIsProspecting(false);
    setAudioChunks([]);
  }, [selectedCommercial]);

  const handleSelectCommercial = (commercial: Commercial) => setSelectedCommercial(commercial);
  const handleHistoryItemClick = (transcription: Transcription) => setSelectedTranscription(transcription);
  const handleClosePopup = () => setSelectedTranscription(null);

  const filteredTranscriptions = useMemo(() => {
    if (!selectedCommercial) return [];
    return MOCK_TRANSCRIPTIONS.filter(t => t.commercialId === selectedCommercial.id);
  }, [selectedCommercial]);
  
  const commercialsMap = useMemo(() => MOCK_COMMERCIALS.reduce((acc, comm) => {
    acc[comm.id] = { name: comm.name, avatarFallback: comm.avatarFallback };
    return acc;
  }, {} as { [id: string]: { name: string; avatarFallback: string } }), []);

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-8rem)]">
      <div className="lg:col-span-1 h-full flex flex-col gap-6">
        <SuiviSidebar 
          activeCommercial={selectedCommercial} 
          transcriptions={filteredTranscriptions}
          commercialsMap={commercialsMap}
          onHistoryItemClick={handleHistoryItemClick}
          liveText={liveText}
          isProspecting={isProspecting}
          audioChunks={audioChunks}
        />
      </div>
      
      <div className="lg:col-span-2 h-full relative">
        <SuiviMap 
          zones={MOCK_ZONES} 
          commercials={MOCK_COMMERCIALS}
          onMarkerClick={handleSelectCommercial}
          selectedCommercialId={selectedCommercial?.id}
        />
        {selectedTranscription && (
          <div className="absolute inset-0 z-[1000] flex items-center justify-center p-4 pointer-events-none">
            <FloatingTranscriptPopup
              transcription={selectedTranscription}
              onClose={handleClosePopup}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default SuiviPage;


# --- pages/admin/suivi/AudioPlayer.tsx ---
// src/pages/admin/suivi/AudioPlayer.tsx
import React, { useEffect, useRef, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Slider } from '@/components/ui/slider';
import { Volume2, BarChart, MicOff } from 'lucide-react';
import { type Commercial } from './types';
import { Badge } from '@/components/ui/badge';

interface AudioPlayerProps {
  activeCommercial: Commercial | null;
  liveText: string;
  isProspecting: boolean;
  audioChunks: Blob[];
}

export const AudioPlayer = ({ activeCommercial, liveText, isProspecting, audioChunks }: AudioPlayerProps) => {
  const audioContextRef = useRef<AudioContext | null>(null);
  const audioQueueRef = useRef<Blob[]>([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [volume, setVolume] = useState(50);
  const gainNodeRef = useRef<GainNode | null>(null);

  // Initialise l'AudioContext
  useEffect(() => {
    if (!audioContextRef.current) {
      const context = new (window.AudioContext || (window as any).webkitAudioContext)();
      audioContextRef.current = context;
      const gainNode = context.createGain();
      gainNode.connect(context.destination);
      gainNodeRef.current = gainNode;
    }
  }, []);
  
  // Met à jour le volume
  useEffect(() => {
    if (gainNodeRef.current) {
      gainNodeRef.current.gain.value = volume / 100;
    }
  }, [volume]);


  const playNextInQueue = async () => {
    if (audioQueueRef.current.length === 0) {
      setIsPlaying(false);
      return;
    }
    
    setIsPlaying(true);
    const blob = audioQueueRef.current.shift();
    if (!blob || !audioContextRef.current || !gainNodeRef.current) return;

    try {
      const arrayBuffer = await blob.arrayBuffer();
      const audioBuffer = await audioContextRef.current.decodeAudioData(arrayBuffer);
      
      const source = audioContextRef.current.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(gainNodeRef.current);
      source.onended = playNextInQueue; // Joue le prochain morceau quand celui-ci est fini
      source.start();
    } catch (error) {
      console.error("Erreur de décodage audio, passage au suivant.", error);
      playNextInQueue(); // Tente de jouer le prochain
    }
  };

  // Ajoute les nouveaux chunks à la file d'attente et démarre la lecture si nécessaire
  useEffect(() => {
    if (audioChunks.length > 0) {
      audioQueueRef.current.push(...audioChunks);
      if (!isPlaying) {
        playNextInQueue();
      }
    }
  }, [audioChunks, isPlaying]);

  // Réinitialise la file d'attente si le commercial change
  useEffect(() => {
    audioQueueRef.current = [];
    setIsPlaying(false);
  }, [activeCommercial]);


  if (!activeCommercial) {
    return (
      <Card className="bg-white shadow-md">
        <CardHeader>
          <CardTitle>Lecteur Audio</CardTitle>
          <CardDescription>Aucun commercial sélectionné.</CardDescription>
        </CardHeader>
        <CardContent className="flex items-center justify-center h-48 text-muted-foreground">
          <MicOff className="h-12 w-12" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-white shadow-md">
      <CardHeader>
        <div className="flex items-center gap-4">
          <Avatar className="h-12 w-12">
            <AvatarFallback className="text-lg bg-zinc-200 text-zinc-700">{activeCommercial.avatarFallback}</AvatarFallback>
          </Avatar>
          <div>
            <CardTitle>{activeCommercial.name}</CardTitle>
            <CardDescription>Équipe {activeCommercial.equipe} - {isProspecting ? 'En ligne' : 'Hors ligne'}</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="bg-zinc-100 border border-zinc-200 p-3 rounded-lg min-h-[100px] max-h-[200px] overflow-y-auto text-sm text-zinc-700 transition-colors">
          {isProspecting ? (
            liveText || <span className="italic text-zinc-500">En attente de transcription...</span>
          ) : (
            <span className="italic text-zinc-500">Le commercial n'est pas en prospection.</span>
          )}
        </div>
        
        <div className="flex items-center gap-4">
          <div className="flex-1 flex items-center gap-2">
             <Badge variant="outline" className={isProspecting ? "bg-green-100 text-green-800 border-green-300" : "bg-gray-100 text-gray-800 border-gray-300"}>
                {isProspecting ? <BarChart className="h-4 w-4 mr-2 animate-pulse" /> : <MicOff className="h-4 w-4 mr-2" />}
                {isProspecting ? 'EN DIRECT' : 'HORS LIGNE'}
             </Badge>
          </div>
          <div className="flex items-center gap-2 w-[120px]">
            <Volume2 className="h-5 w-5 text-muted-foreground" />
            <Slider defaultValue={[volume]} max={100} step={1} onValueChange={(value) => setVolume(value[0])} />
          </div>
        </div>
      </CardContent>
    </Card>
  );
};


# --- components/ui/command.tsx ---
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  className,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
  className?: string
  showCloseButton?: boolean
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent
        className={cn("overflow-hidden p-0", className)}
        showCloseButton={showCloseButton}
      >
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



# --- components/ui/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



# --- pages/admin/immeubles/portes/portes-columns.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/portes/portes-columns.tsx

"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Badge } from "@/components/ui/badge"
import { ArrowUpDown, Hash, MessageSquare, Repeat } from "lucide-react"
import { Button } from "@/components/ui/button"

// --- 1. MISE À JOUR DU TYPE Porte avec les nouveaux statuts ---
export type Porte = {
  id: string
  numeroPorte: string
  statut: "Non visité" | "Visité" | "Absent" | "Refus" | "Curieux" | "Contrat signé"
  passage: number
  commentaire: string
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

// --- 2. MISE À JOUR de la configuration des couleurs des badges ---
const statusConfig = {
    "Non visité": "bg-gray-100 text-gray-800 border-gray-300",
    "Visité": "bg-blue-100 text-blue-800 border-blue-300",
    "Absent": "bg-yellow-100 text-yellow-800 border-yellow-300",
    "Refus": "bg-red-100 text-red-800 border-red-300",
    "Curieux": "bg-purple-100 text-purple-800 border-purple-300",
    "Contrat signé": "bg-green-100 text-green-800 border-green-300",
};

export const createPortesColumns = (): ColumnDef<Porte>[] => [
    {
      accessorKey: "numeroPorte",
      header: ({ column }) => <SortableHeader title="Porte" column={column} />,
      cell: ({ row }) => (
        <div className="flex items-center gap-2 font-medium">
            <Hash className="h-4 w-4 text-muted-foreground" />
            <span>{row.original.numeroPorte}</span>
        </div>
      ),
      meta: { className: "w-[120px]" },
    },
    {
      accessorKey: "statut",
      header: ({ column }) => <SortableHeader title="Statut" column={column} />,
      cell: ({ row }) => {
        const statut = row.original.statut;
        return <Badge variant="outline" className={statusConfig[statut]}>{statut}</Badge>
      }
    },
    {
      accessorKey: "passage",
      header: ({ column }) => <SortableHeader title="Passage" column={column} />,
      cell: ({ row }) => {
        const { statut, passage } = row.original;
        
        // --- 3. MISE À JOUR de la logique de repassage ---
        // Le repassage est applicable pour "Absent" et "Curieux".
        const isRepassageApplicable = statut === 'Absent' || statut === 'Curieux';

        if (!isRepassageApplicable || passage === 0) {
            return <span className="text-muted-foreground">-</span>;
        }

        return (
            <div className="flex items-center gap-2">
                <Repeat className="h-4 w-4 text-muted-foreground" />
                <span>{`Passage n°${passage}`}</span>
            </div>
        );
      }
    },
    {
      accessorKey: "commentaire",
      header: () => <Header title="Commentaire" />,
      cell: ({ row }) => {
        const commentaire = row.original.commentaire;
        if (!commentaire) return <span className="text-muted-foreground italic">Aucun</span>;
        return (
            <div className="flex items-start gap-2">
                <MessageSquare className="h-4 w-4 text-muted-foreground mt-1 shrink-0" />
                <span className="max-w-xs truncate">{commentaire}</span>
            </div>
        )
      },
    },
]


# --- App.tsx ---
// frontend-shadcn/src/App.tsx
import { BrowserRouter, Routes, Route } from 'react-router-dom';

// --- Logique de Routage ---
import PrivateRoute from './routes/PrivateRoute';
import RoleBasedRedirect from './routes/RoleBasedRedirect';

// --- Layouts et Pages Publiques ---
import MainLayout from './layout/MainLayout';
import Login from './pages/auth/Login';

// --- Pages Admin ---
import DashboardAdmin from './pages/admin/Dashboard/DashboardAdmin';
import ManagersPage from './pages/admin/Managers/ManagersPage';
import ManagerDetailsPage from './pages/admin/Managers/ManagerDetailsPage';
import CommerciauxPage from './pages/admin/commerciaux/CommerciauxPage';
import CommercialDetailsPage from './pages/admin/commerciaux/CommercialDetailsPage';
import EquipesPage from './pages/admin/Equipes/EquipesPage'; 
import EquipeDetailsPage from './pages/admin/Equipes/EquipeDetailsPage';
import StatistiquesPage from './pages/admin/statitistiques/StatistiquesPage';
import ZonesPage from './pages/admin/zones/ZonesPage'; 
import ImmeublesPage from './pages/admin/immeubles/ImmeublesPage';
import ImmeubleDetailsPage from './pages/admin/immeubles/portes/ImmeubleDetailsPage';
import SuiviPage from './pages/admin/suivi/SuiviPage';

// --- Pages des autres Rôles ---
import DashboardManager from './pages/manager/DashboardManager';
import DashboardDirecteur from './pages/directeur/DashboardDirecteur';
import DashboardBackoffice from './pages/backoffice/DashboardBackoffice';
import ProspectingPage from './pages/commercial/DashboardCommercial'; // <-- Renommé pour plus de clarté

function App() {
  return (
    <BrowserRouter>
      <Routes>
        {/* --- Route Publique --- */}
        <Route path="/login" element={<Login />} />

        {/* --- Routes Privées Protégées --- */}
        <Route element={<PrivateRoute />}>
          
          <Route path="/" element={<RoleBasedRedirect />} />
          
          <Route element={<MainLayout />}>
            {/* Routes pour l'Admin */}
            <Route path="/admin" element={<DashboardAdmin />} />
            <Route path="/admin/managers" element={<ManagersPage />} />
            <Route path="/admin/managers/:managerId" element={<ManagerDetailsPage />} />
            <Route path="/admin/equipes" element={<EquipesPage />} /> 
            <Route path="/admin/equipes/:equipeId" element={<EquipeDetailsPage />} />
            <Route path="/admin/commerciaux" element={<CommerciauxPage />} />
            <Route path="/admin/commerciaux/:commercialId" element={<CommercialDetailsPage />} />
            <Route path="/admin/statistiques" element={<StatistiquesPage />} />
            <Route path="/admin/zones" element={<ZonesPage />} /> 
            <Route path="/admin/immeubles" element={<ImmeublesPage />} />
            <Route path="/admin/immeubles/:immeubleId" element={<ImmeubleDetailsPage />} />
            <Route path="/admin/suivi" element={<SuiviPage />} />
            
            {/* Routes pour les autres rôles */}
            <Route path="/manager" element={<DashboardManager />} />
            <Route path="/directeur" element={<DashboardDirecteur />} />
            <Route path="/backoffice" element={<DashboardBackoffice />} />
            {/* MODIFICATION : La route /commercial pointe maintenant vers la page de prospection */}
            <Route path="/commercial" element={<ProspectingPage />} /> 
          </Route>

        </Route>

        <Route path="*" element={<div>Page non trouvée</div>} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;


# --- hooks/useSpeechRecognition.ts ---
// frontend-shadcn/src/hooks/useSpeechRecognition.ts
import { useState, useEffect, useRef } from 'react';

// --- Définitions de types ---
interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  onresult: (event: SpeechRecognitionEvent) => void;
  onerror: (event: SpeechRecognitionErrorEvent) => void;
  onend: () => void;
  start: () => void;
  stop: () => void;
}
type SpeechRecognitionConstructor = new () => SpeechRecognition;
interface SpeechRecognitionEvent extends Event {
  resultIndex: number;
  results: SpeechRecognitionResultList;
}
interface SpeechRecognitionErrorEvent extends Event {
  error: string;
}
interface CustomWindow extends Window {
  SpeechRecognition?: SpeechRecognitionConstructor;
  webkitSpeechRecognition?: SpeechRecognitionConstructor;
}
declare const window: CustomWindow;
const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;

export const useSpeechRecognition = () => {
  const [text, setText] = useState('');
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const stopIntentionallyRef = useRef(false);
  const finalTranscriptRef = useRef('');

  useEffect(() => {
    if (!SpeechRecognitionAPI) {
      console.warn("L'API Web Speech n'est pas supportée par ce navigateur.");
      return;
    }
    const recognition = new SpeechRecognitionAPI();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'fr-FR';

    recognition.onresult = (event: SpeechRecognitionEvent) => {
      let interimTranscript = '';
      for (let i = event.resultIndex; i < event.results.length; ++i) {
        if (event.results[i].isFinal) {
          finalTranscriptRef.current += event.results[i][0].transcript;
        } else {
          interimTranscript += event.results[i][0].transcript;
        }
      }
      setText(finalTranscriptRef.current + interimTranscript);
    };

    recognition.onerror = (event: SpeechRecognitionErrorEvent) => {
      console.error('Erreur de reconnaissance vocale:', event.error);
      setIsListening(false);
    };
    
    recognition.onend = () => {
      if (!stopIntentionallyRef.current) {
        try { recognition.start(); } 
        catch (error) { setIsListening(false); }
      } else {
        setIsListening(false);
      }
    };
    
    recognitionRef.current = recognition;
    return () => { recognitionRef.current?.stop(); };
  }, []);

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      finalTranscriptRef.current = ''; 
      setText('');
      stopIntentionallyRef.current = false;
      setIsListening(true);
      try { recognitionRef.current.start(); } 
      catch (error) { setIsListening(false); }
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      stopIntentionallyRef.current = true;
      recognitionRef.current.stop();
    }
  };

  return { text, isListening, startListening, stopListening, hasSupport: !!SpeechRecognitionAPI };
};


# --- pages/admin/suivi/HistoryList.tsx ---
// src/pages/admin/suivi/HistoryList.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { formatDistanceToNow } from 'date-fns';
import { fr } from 'date-fns/locale';
import type { Transcription } from './types';
import { ArchiveX } from 'lucide-react'; // Importer une icône pour l'état vide

interface HistoryListProps {
  transcriptions: Transcription[];
  onHistoryItemClick: (transcription: Transcription) => void;
  commercials: { [id: string]: { name: string; avatarFallback: string } };
}

export const HistoryList = ({ transcriptions, onHistoryItemClick, commercials }: HistoryListProps) => {
  return (
    <Card className="flex-1 flex flex-col h-full bg-white shadow-md">
      <CardHeader>
        <CardTitle>Historique des transcriptions</CardTitle>
        <CardDescription>Derniers appels enregistrés pour ce commercial.</CardDescription>
      </CardHeader>
      <CardContent className="p-0 flex-1 overflow-hidden">
        <ScrollArea className="h-full">
          {transcriptions.length > 0 ? (
            <div className="space-y-0">
              {transcriptions.map((item) => (
                <div
                  key={item.id}
                  onClick={() => onHistoryItemClick(item)}
                  // AMÉLIORATION : Style de chaque item de la liste
                  className="flex items-start gap-4 p-4 border-b border-zinc-200 hover:bg-zinc-100 cursor-pointer transition-colors"
                >
                  <Avatar>
                    <AvatarFallback className="bg-zinc-200 text-zinc-700">
                      {commercials[item.commercialId]?.avatarFallback || '?'}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    <div className="flex justify-between items-center">
                      <p className="font-semibold">{item.commercialName}</p>
                      <p className="text-xs text-muted-foreground">
                        {formatDistanceToNow(item.date, { addSuffix: true, locale: fr })}
                      </p>
                    </div>
                    <p className="text-sm text-muted-foreground line-clamp-2 mt-1">
                      {item.snippet}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            // AMÉLIORATION : Gestion de l'état vide
            <div className="flex flex-col items-center justify-center h-full text-muted-foreground text-center p-8">
                <ArchiveX className="h-12 w-12 mb-4" />
                <p className="font-semibold">Aucun historique</p>
                <p className="text-sm">Aucun appel n'a été enregistré pour ce commercial.</p>
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
};


# --- layout/UserNav.tsx ---
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { ChevronsUpDown, LogOut } from 'lucide-react';

interface UserNavProps {
  isCollapsed: boolean;
}

export function UserNav({ isCollapsed }: UserNavProps) {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };

  const initials = user.name.split(' ').map((n) => n[0]).join('').toUpperCase();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className={`w-full h-auto px-2 py-2 bg-[#FAFAFA] hover:bg-zinc-200 transition-all duration-300 ${
            isCollapsed ? 'justify-center' : 'justify-between'
          }`}
        >
          <div className="flex items-center gap-3">
            <Avatar className="h-8 w-8">
              <AvatarFallback>{initials}</AvatarFallback>
            </Avatar>
            {!isCollapsed && (
              <div className="flex flex-col items-start truncate">
                <span className="text-sm font-medium">{user.name}</span>
                <span className="text-xs text-muted-foreground">{user.role}</span>
              </div>
            )}
          </div>
          {!isCollapsed && <ChevronsUpDown className="h-4 w-4 text-muted-foreground" />}
        </Button>
      </DropdownMenuTrigger>
      
      {/* On garde juste le w-56, le CSS externe s'occupe du style */}
      <DropdownMenuContent 
        className="w-56" 
        align="end" 
        forceMount
      >
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.name}</p>
            <p className="text-xs leading-none text-zinc-400">
              {user.role}@finanssor.com
            </p>
          </div>
        </DropdownMenuLabel>
        
        <DropdownMenuSeparator />
        
        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Déconnexion</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


# --- components/charts/GenericBarChart.tsx ---
// src/components/charts/GenericBarChart.tsx

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LabelList, Cell } from 'recharts';

interface GenericBarChartProps {
  title: string;
  data: any[];
  xAxisDataKey: string;
  barDataKey: string;
  // La prop fillColor n'est plus une simple chaîne mais peut être une fonction
  fillColor: string | ((entry: any, index: number) => string);
}

const chartColors = [
    'hsl(var(--chart-1))',
    'hsl(var(--chart-2))',
    'hsl(var(--chart-3))',
    'hsl(var(--chart-4))',
    'hsl(var(--chart-5))',
];

export const GenericBarChart = ({ title, data, xAxisDataKey, barDataKey }: GenericBarChartProps) => {
  return (
    <Card className="h-full">
      <CardHeader><CardTitle>{title}</CardTitle></CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={data} margin={{ top: 20, right: 10, left: -20, bottom: 40 }}>
            <CartesianGrid strokeDasharray="3 3" vertical={false} />
            
            <XAxis 
              dataKey={xAxisDataKey} 
              // Couleur plus foncée et taille de police augmentée pour la lisibilité
              stroke="hsl(var(--foreground))"
              fontSize={13} 
              tickLine={false} 
              axisLine={false}
              interval={0}
              angle={-45}
              textAnchor="end"
              height={60} 
            />

            <YAxis 
              stroke="hsl(var(--muted-foreground))" 
              fontSize={12} 
              tickLine={false} 
              axisLine={false} 
            />
            <Tooltip 
              cursor={{ fill: 'hsl(var(--muted))' }} 
              contentStyle={{ backgroundColor: 'hsl(var(--background))', borderColor: 'hsl(var(--border))' }} 
            />
            <Bar dataKey={barDataKey} radius={[4, 4, 0, 0]}>
              <LabelList dataKey={barDataKey} position="top" style={{ fill: 'hsl(var(--foreground))', fontSize: '12px' }} />
              {/* On mappe les données pour assigner une couleur différente à chaque barre */}
              {data.map((_, index) => (
                <Cell key={`cell-${index}`} fill={chartColors[index % chartColors.length]} />
              ))}
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- pages/admin/suivi/FloatingTranscriptPopup.tsx ---
// src/pages/admin/suivi/FloatingTranscriptPopup.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { X } from 'lucide-react';
import type { Transcription } from './types';

interface FloatingTranscriptPopupProps {
  transcription: Transcription | null;
  onClose: () => void;
}

export const FloatingTranscriptPopup = ({ transcription, onClose }: FloatingTranscriptPopupProps) => {
  if (!transcription) {
    return null;
  }

  return (
    // AMÉLIORATION : Le conteneur ne gère plus la position, seulement l'animation et la taille.
    // La classe `pointer-events-auto` est cruciale pour rendre la carte cliquable.
    <div className="w-full max-w-lg pointer-events-auto animate-in fade-in-0 zoom-in-95 duration-300">
      <Card className="bg-white/95 backdrop-blur-sm shadow-xl border-zinc-200/80 flex flex-col h-[calc(100vh-12rem)] max-h-[650px]">
        <CardHeader className="flex flex-row items-center justify-between p-4 border-b border-zinc-200/80">
          <div>
            {/* AMÉLIORATION : Typographie du titre et de la description */}
            <CardTitle className="text-lg font-bold text-zinc-800 tracking-tight">
              Appel de {transcription.commercialName}
            </CardTitle>
            <CardDescription className="text-xs tracking-wider uppercase text-zinc-500 mt-1">
              {transcription.date.toLocaleDateString('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
            </CardDescription>
          </div>
          {/* AMÉLIORATION : Style du bouton de fermeture */}
          <Button variant="ghost" size="icon" onClick={onClose} className="shrink-0 text-zinc-500 hover:bg-zinc-100 hover:text-zinc-800 rounded-full">
            <X className="h-5 w-5" />
            <span className="sr-only">Fermer</span>
          </Button>
        </CardHeader>
        <CardContent className="flex-1 p-0">
          <ScrollArea className="h-full">
            {/* AMÉLIORATION : Typographie du contenu pour meilleure lisibilité */}
            <p className="text-base whitespace-pre-wrap leading-relaxed text-zinc-700 p-6">
              {transcription.fullText}
            </p>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
};


# --- components/ui/Combobox.tsx ---
// frontend-shadcn/src/components/ui/Combobox.tsx
"use client"

import * as React from "react"
import { Check, ChevronsUpDown } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

interface ComboboxProps {
  options: { value: string; label: string }[];
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  emptyMessage?: string;
}

export function Combobox({ options, value, onChange, placeholder = "Sélectionner...", emptyMessage = "Aucun résultat." }: ComboboxProps) {
  const [open, setOpen] = React.useState(false)

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between h-8"
        >
          {value
            ? options.find((option) => option.value === value)?.label
            : placeholder}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-full p-0" style={{minWidth: "var(--radix-popover-trigger-width)"}}>
        <Command>
          <CommandInput placeholder="Rechercher..." />
          <CommandList>
            <CommandEmpty>{emptyMessage}</CommandEmpty>
            <CommandGroup>
              {options.map((option) => (
                <CommandItem
                  key={option.value}
                  value={option.value}
                  onSelect={(currentValue) => {
                    onChange(currentValue === value ? "" : currentValue)
                    setOpen(false)
                  }}
                >
                  <Check
                    className={cn(
                      "mr-2 h-4 w-4",
                      value === option.value ? "opacity-100" : "opacity-0"
                    )}
                  />
                  {option.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )
}


# --- components/ui/slider.tsx ---
// src/components/ui/slider.tsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-primary ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }


# --- send_to_gemini.py ---
import os

EXCLUDED_DIRS = {"node_modules", ".git", ".next", ".turbo", "dist", "build"}
TEXT_EXTENSIONS = {'.ts', '.tsx', '.js', '.jsx', '.json', '.html', '.css', '.md', '.txt', '.py'}

def get_all_files(root_dir):
    result = []

    for foldername, _, filenames in os.walk(root_dir):
        if any(excluded in foldername for excluded in EXCLUDED_DIRS):
            continue

        for filename in filenames:
            filepath = os.path.join(foldername, filename)
            ext = os.path.splitext(filename)[1].lower()
            if ext in TEXT_EXTENSIONS:
                result.append(filepath)

    return result

def read_file_content(filepath):
    try:
        with open(filepath, "r", encoding="utf-8", errors="ignore") as f:
            return f.read()
    except:
        return ""

def export_balanced_parts(root_dir, output_base="code_part"):
    all_files = get_all_files(root_dir)

    # Lire tous les fichiers avec leur contenu
    file_entries = []
    for path in all_files:
        content = read_file_content(path)
        relative_path = os.path.relpath(path, root_dir)
        wrapped_content = f"\n\n# --- {relative_path} ---\n{content}\n"
        file_entries.append((relative_path, wrapped_content, len(wrapped_content)))

    # Trier les fichiers par taille (descendant)
    file_entries.sort(key=lambda x: x[2], reverse=True)

    part1, part2 = [], []
    size1, size2 = 0, 0

    for _, content, size in file_entries:
        if size1 <= size2:
            part1.append(content)
            size1 += size
        else:
            part2.append(content)
            size2 += size

    with open(f"{output_base}1.txt", "w", encoding="utf-8") as f1:
        f1.writelines(part1)

    with open(f"{output_base}2.txt", "w", encoding="utf-8") as f2:
        f2.writelines(part2)

    print(f"✅ Fichiers générés : {output_base}1.txt ({size1} car.), {output_base}2.txt ({size2} car.)")

if __name__ == "__main__":
    export_balanced_parts("./")



# --- layout/NavContent.tsx ---
// src/layout/NavContent.tsx
import { NavLink } from 'react-router-dom';
import { Button } from '@/components/ui/button';
// --- AJOUTER AudioLines ---
import { Users, Flag, PieChart, MapPin, FileText, Settings, LayoutDashboard, AudioLines, Building2 } from 'lucide-react';

// --- MISE À JOUR DE LA LISTE DE LIENS ---
const navLinks = [
  { to: '/admin', text: 'Tableau de Bord', icon: LayoutDashboard }, 
  { to: '/admin/managers', text: 'Managers', icon: Users },
  { to: '/admin/commerciaux', text: 'Commerciaux', icon: Users },
  { to: '/admin/equipes', text: 'Equipes', icon: Flag },
  { to: '/admin/immeubles', text: 'Immeubles', icon: Building2 },
  { to: '/admin/suivi', text: 'Suivi', icon: AudioLines }, // <-- NOUVEAU LIEN
  { to: '/admin/zones', text: 'Zones', icon: MapPin },
  { to: '/admin/statistiques', text: 'Statistiques', icon: PieChart },
  { to: '/admin/rapports', text: 'Rapports & exports', icon: FileText },
  { to: '/admin/parametres', text: 'Paramètres', icon: Settings },
];


interface NavContentProps {
  isCollapsed: boolean;
  onLinkClick?: () => void;
}

export const NavContent = ({ isCollapsed, onLinkClick }: NavContentProps) => {
  return (
    <nav className="flex flex-col gap-1 px-2">
      {navLinks.map((link) => (
        <NavLink to={link.to} key={link.text} end={link.to === '/admin'} onClick={onLinkClick}>
          {({ isActive }) => (
            <Button
              variant={isActive ? 'secondary' : 'ghost'}
              className={`w-full justify-start gap-3 h-10 transition-colors duration-200 ${
                isActive
                  ? 'bg-zinc-200 text-zinc-900'
                  : 'hover:bg-zinc-100'
              }`}
            >
              <link.icon className="h-5 w-5" />
              {!isCollapsed && <span className="truncate">{link.text}</span>}
            </Button>
          )}
        </NavLink>
      ))}
    </nav>
  );
};


# --- components/ui/GenericRadialBarChart.tsx ---
// src/components/charts/GenericRadialBarChart.tsx

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ResponsiveContainer, PolarAngleAxis, RadialBarChart, RadialBar } from 'recharts';

interface GenericRadialChartProps {
  title: string;
  value: number;
  total: number;
  color: string;
}

export const GenericRadialBarChart = ({ title, value, total, color }: GenericRadialChartProps) => {
  const percentage = total > 0 ? (value / total) * 100 : 0;
  const data = [{ name: 'objectif', value: percentage }];

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent className="flex-1 flex justify-center items-center relative">
        <ResponsiveContainer width="100%" height={200}>
          <RadialBarChart
            innerRadius="80%"
            outerRadius="100%"
            data={data}
            startAngle={90}
            endAngle={-270}
            cx="50%"
            cy="50%"
            barSize={15}
          >
            <PolarAngleAxis
              type="number"
              domain={[0, 100]}
              angleAxisId={0}
              tick={false}
            />
            <RadialBar
              background
              dataKey="value"
              cornerRadius={10}
              angleAxisId={0}
              className={color} // Utilise la classe de couleur passée
            />
          </RadialBarChart>
        </ResponsiveContainer>
        <div className="absolute flex flex-col items-center justify-center">
          <span className="text-4xl font-bold">{Math.round(percentage)}%</span>
          <span className="text-sm text-muted-foreground">{value} / {total}</span>
        </div>
      </CardContent>
    </Card>
  );
};


# --- layout/Header.tsx ---
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Sheet, SheetContent, SheetHeader, SheetTrigger } from '@/components/ui/sheet';
import { Menu, Library } from 'lucide-react';
import { NavContent } from './NavContent';

const Header = () => {
  const [isSheetOpen, setIsSheetOpen] = useState(false);
  const today = new Date().toLocaleDateString('fr-FR', {
    day: 'numeric', month: 'long', year: 'numeric',
  });

  return (
    <header className="sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b bg-black px-4 text-white sm:px-6">
      <div className="flex items-center gap-4">
        <div className="lg:hidden">
          <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon" className="bg-black hover:bg-zinc-800 border-zinc-700">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[250px] p-0 bg-white">
              <SheetHeader className='p-4 border-b'>
                  <div className="flex items-center gap-2">
                      <Library className="h-7 w-7 text-primary" />
                      <h1 className="text-xl font-bold">Finanssor</h1>
                  </div>
              </SheetHeader>
              <div className="py-4">
                <NavContent isCollapsed={false} onLinkClick={() => setIsSheetOpen(false)} />
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <h1 className="text-xl md:text-2xl font-bold">Espace Admin</h1>
      </div>
      <span className="hidden sm:block text-lg font-semibold">{today}</span>
    </header>
  );
};

export default Header;


# --- services/manager.service.ts ---
// frontend-shadcn/src/services/manager.service.ts
import axios from 'axios';
import type { Manager } from '../pages/admin/Managers/managers-table/columns'; // On réutilise le type existant

const API_URL = 'http://localhost:3000/managers'; // L'URL de notre back-end

// DTO pour la création/mise à jour, on peut les définir ici
type CreateManagerPayload = {
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
};

type UpdateManagerPayload = Partial<CreateManagerPayload>;

// Fonction pour récupérer tous les managers
const getManagers = async (): Promise<Manager[]> => {
  const response = await axios.get(API_URL);
  // On peut ajouter ici un mapping si les données de l'API ne correspondent pas exactement au type `Manager` du front.
  // Dans notre cas, elles correspondent, mais c'est une bonne pratique.
  return response.data;
};

// Fonction pour créer un manager
const createManager = async (data: CreateManagerPayload): Promise<Manager> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

// Fonction pour mettre à jour un manager
const updateManager = async (id: string, data: UpdateManagerPayload): Promise<Manager> => {
  const response = await axios.put(`${API_URL}/${id}`, data);
  return response.data;
};
// AJOUT DE LA NOUVELLE FONCTION
const getManagerDetails = async (id: string): Promise<any> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};
// Fonction pour supprimer un manager
const deleteManager = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

export const managerService = {
  getManagers,
  createManager,
  getManagerDetails,
  updateManager,
  deleteManager,
};


# --- components/ui/scroll-area.tsx ---
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }



# --- components/ui/popover.tsx ---
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }



# --- pages/auth/Login.tsx ---
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

const Login = () => {
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleLogin = (role: 'admin' | 'manager' | 'directeur' | 'backoffice' | 'commercial') => {
    login(role);
    navigate('/'); // On redirige vers la racine, qui s'occupera de dispatcher vers le bon dashboard
  };

  return (
    <div className="flex items-center justify-center h-screen bg-secondary">
      <Card className="w-[400px]">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl">Finanssor</CardTitle>
          <CardDescription>Veuillez vous connecter en choisissant un rôle.</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={() => handleLogin('admin')}>Connexion Admin</Button>
          <Button variant="outline" onClick={() => handleLogin('manager')}>Connexion Manager</Button>
          <Button variant="outline" onClick={() => handleLogin('directeur')}>Connexion Directeur</Button>
          <Button variant="outline" onClick={() => handleLogin('backoffice')}>Connexion Back-office</Button>
          <Button variant="outline" onClick={() => handleLogin('commercial')}>Connexion Commercial</Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default Login;


# --- layout/Sidebar.tsx ---
// src/layout/Sidebar.tsx
import { Button } from '@/components/ui/button';
import { Library, PanelLeftClose, PanelLeftOpen } from 'lucide-react';
import { NavContent } from './NavContent';
import { UserNav } from './UserNav';

interface SidebarProps {
  isCollapsed: boolean;
  toggleSidebar: () => void;
}

const Sidebar = ({ isCollapsed, toggleSidebar }: SidebarProps) => {
  return (
    <aside
      className={`hidden lg:flex flex-col bg-[#FAFAFA] transition-all duration-300 sticky top-0 h-screen ${
        isCollapsed ? 'w-20' : 'w-64'
      }`}
    >
      <div
        className={`flex items-center h-16 px-4 ${
          isCollapsed ? 'justify-center' : 'justify-between'
        }`}
      >
        {!isCollapsed && (
          <div className="flex items-center gap-2">
            <Library className="h-8 w-8 text-primary" />
            <h1 className="text-xl font-bold">Finanssor</h1>
          </div>
        )}
        <Button variant="ghost" size="icon" onClick={toggleSidebar}>
          {isCollapsed ? (
            <PanelLeftOpen className="h-5 w-5" />
          ) : (
            <PanelLeftClose className="h-5 w-5" />
          )}
        </Button>
      </div>

      <div className="flex-1 py-4">
        <NavContent isCollapsed={isCollapsed} />
      </div>

      <div className="p-2">
        <UserNav isCollapsed={isCollapsed} />
      </div>
    </aside>
  );
};

export default Sidebar;


# --- contexts/AuthContext.tsx ---
import { createContext, useContext, useState } from 'react';
import type { ReactNode } from 'react';

// Définir les types pour plus de sécurité
type Role = 'admin' | 'manager' | 'directeur' | 'backoffice' | 'commercial';

interface User {
  name: string;
  role: Role;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (role: Role) => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);

  // Simule une connexion. Dans une vraie app, ça appellerait une API.
  const login = (role: Role) => {
    const userData: User = { 
        name: `${role.charAt(0).toUpperCase() + role.slice(1)} User`, 
        role 
    };
    setUser(userData);
  };

  const logout = () => {
    setUser(null);
  };

  const value = { user, isAuthenticated: !!user, login, logout };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Hook personnalisé pour utiliser le contexte facilement
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


# --- pages/admin/Managers/managers-table/equipes-columns.tsx ---
// frontend-shadcn/src/pages/admin/manager-details-table/equipes-columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Users, Flag } from "lucide-react"

export type EquipeDuManager = {
  id: string
  nom: string
  nbCommerciaux: number
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

export const createEquipesColumns = (): ColumnDef<EquipeDuManager>[] => [
  {
    accessorKey: "nom",
    header: () => <Header title="Nom de l'équipe" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2 font-medium text-foreground">
        <Flag className="h-4 w-4 text-muted-foreground" />
        {row.getValue("nom")}
      </div>
    ),
  },
  {
    accessorKey: "nbCommerciaux",
    header: () => <div className="text-center"><Header title="Effectif" /></div>,
    cell: ({ row }) => (
      <div className="text-center flex items-center justify-center gap-2">
        <Users className="h-4 w-4 text-muted-foreground" />
        {row.getValue("nbCommerciaux")}
      </div>
    )
  },
  // La colonne "Actions" est supprimée. La navigation se fera au clic de la ligne.
]


# --- services/equipe.service.ts ---
// frontend-shadcn/src/services/equipe.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/equipes';

export type EquipeFromAPI = {
  id: string;
  nom: string;
  managerId: string;
};

type CreateEquipePayload = {
  nom: string;
  managerId: string;
};

// AJOUT: Type pour la mise à jour
type UpdateEquipePayload = Partial<CreateEquipePayload>;

const getEquipes = async (): Promise<EquipeFromAPI[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const createEquipe = async (data: CreateEquipePayload): Promise<EquipeFromAPI> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

// AJOUT: Fonction pour mettre à jour une équipe
const updateEquipe = async (id: string, data: UpdateEquipePayload): Promise<EquipeFromAPI> => {
    const response = await axios.put(`${API_URL}/${id}`, data);
    return response.data;
};

const deleteEquipe = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

export const equipeService = {
  getEquipes,
  createEquipe,
  updateEquipe, // AJOUT
  deleteEquipe,
};


# --- pages/admin/Dashboard/DashboardSkeleton.tsx ---
import { Skeleton } from "@/components/ui/skeleton";

export const DashboardSkeleton = () => {
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <Skeleton className="h-8 w-64" />
        <Skeleton className="h-10 w-[180px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Skeleton className="lg:col-span-4 h-[380px]" />
        <Skeleton className="lg:col-span-3 h-[380px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Skeleton className="lg:col-span-4 h-[380px]" />
        <Skeleton className="lg:col-span-3 h-[380px]" />
      </div>
    </div>
  );
};


# --- components/ui/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }



# --- routes/RoleBasedRedirect.tsx ---
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const RoleBasedRedirect = () => {
  const { user } = useAuth();

  if (!user) {
    return <Navigate to="/login" />;
  }
  
  // En fonction du rôle de l'utilisateur, on le redirige vers le bon dashboard
  switch (user.role) {
    case 'admin':
      return <Navigate to="/admin" />; // Cette route existe
    case 'manager':
      return <Navigate to="/manager" />; // Cette route existe
    case 'directeur':
      return <Navigate to="/directeur" />; // Cette route existe
    case 'backoffice':
      return <Navigate to="/backoffice" />; // Cette route existe
    case 'commercial':
      return <Navigate to="/commercial" />; // Cette route existe
    default:
      return <Navigate to="/login" />;
  }
  //
};

export default RoleBasedRedirect;


# --- layout/MainLayout.tsx ---
// src/layout/MainLayout.tsx
import { useState } from 'react';
import { Outlet } from 'react-router-dom';
import Sidebar from './Sidebar';
import Header from './Header';

const MainLayout = () => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div className="flex h-screen bg-muted/40">
      <Sidebar isCollapsed={isCollapsed} toggleSidebar={toggleSidebar} />
      <div className="flex-1 flex flex-col">
        <Header />
        <main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default MainLayout;


# --- App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



# --- types/enums.ts ---
// frontend-shadcn/src/types/enums.ts

export enum AssignmentType {
  EQUIPE = 'EQUIPE',
  MANAGER = 'MANAGER',
  COMMERCIAL = 'COMMERCIAL',
}

export enum PorteStatus {
  NON_VISITE = 'NON_VISITE',
  VISITE = 'VISITE',
  ABSENT = 'ABSENT',
  REFUS = 'REFUS',
  CURIEUX = 'CURIEUX',
  CONTRAT_SIGNE = 'CONTRAT_SIGNE',
}

export enum ProspectingMode {
  SOLO = 'SOLO',
  DUO = 'DUO',
}

// AJOUT DE L'ENUM MANQUANT
export enum PeriodType {
  WEEKLY = 'WEEKLY',
  MONTHLY = 'MONTHLY',
  YEARLY = 'YEARLY',
}


# --- routes/PrivateRoute.tsx ---
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const PrivateRoute = () => {
  const { isAuthenticated } = useAuth();
  // Si l'utilisateur est authentifié, on affiche le contenu de la route (via Outlet)
  // Sinon, on le redirige vers la page de login
  return isAuthenticated ? <Outlet /> : <Navigate to="/login" replace />;
};

export default PrivateRoute;


# --- pages/backoffice/DashboardBackoffice.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardBackoffice = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau office - Admin</h1>
      </div>
    );
  };
  export default DashboardBackoffice;


# --- pages/manager/DashboardManager.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardManager = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau de Bord - Admin</h1>
      </div>
    );
  };
  export default DashboardManager;


# --- vite-env.d.ts ---
/// <reference types="vite/client" />




# --- pages/admin/Dashboard/DashboardAdmin.tsx ---
// src/pages/admin/DashboardAdmin.tsx

import React, { useState, useEffect } from 'react';
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { cn } from '@/lib/utils';

// --- Imports des Composants ---
import StatCard from '@/components/ui-admin/StatCard';
import { DashboardSkeleton } from './DashboardSkeleton';
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { GenericBarChart } from '@/components/charts/GenericBarChart';
import { GenericRadialBarChart } from '@/components/ui-admin/GenericRadialBarChart';
import { Button } from '@/components/ui-admin/button';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover";
import { Calendar } from "@/components/ui-admin/calendar";
import { Badge } from "@/components/ui-admin/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Table, TableBody, TableCell, TableRow } from "@/components/ui-admin/table";

// --- Imports des Icônes ---
import { 
    BarChart3, Briefcase, FileSignature, Sparkles, Target, Calendar as CalendarIcon,
    Award, ClipboardCheck, Percent, UserCheck
} from 'lucide-react';

// --- Données simulées enrichies ---
const dashboardData = {
  week: {
    stats: { portesVisitees: 82, rdvPris: 15, contratsSignes: 7, tauxOuverture: 18, tauxRdv: 18.3, tauxSignature: 46.7, perfMoyenne: 78, commerciauxActifs: 23, heuresProspect: 312 },
    managerStats: { meilleurManager: "Mme Martin", tauxConclusionMoyen: 42, rdvMoyen: 18, effectifTotal: 3 },
    objectifMensuel: { value: 7, total: 30, title: "Objectif Contrats (semaine)" },
    activiteRecente: [ { id: 1, commercial: "Alice Leroy", action: "Nouveau contrat", type: "CONTRAT", temps: "il y a 5 min" }, { id: 2, commercial: "Paul Girard", action: "RDV pris", type: "RDV", temps: "il y a 22 min" }, { id: 3, commercial: "Emma Bonnet", action: "Refus client", type: "REFUS", temps: "il y a 1h" }, { id: 4, commercial: "Hugo Moreau", action: "Nouveau contrat", type: "CONTRAT", temps: "il y a 2h" }, ],
    portesTopeesData: [{ name: 'Lun', Visites: 15, RDV: 3, Refus: 2 }, { name: 'Mar', Visites: 20, RDV: 4, Refus: 1 }, { name: 'Mer', Visites: 18, RDV: 2, Refus: 5 }, { name: 'Jeu', Visites: 25, RDV: 5, Refus: 3 }, { name: 'Ven', Visites: 4, RDV: 1, Refus: 1 }],
    repartitionManagersData: [{ name: 'M. Dupont', value: 40 }, { name: 'Mme Martin', value: 35 }, { name: 'M. Bernard', value: 25 }],
    classementManagersGraphData: [{ name: 'Dupont', value: 40 }, { name: 'Martin', value: 35 }, { name: 'Bernard', value: 32 }, { name: 'Robert', value: 28 }],
  },
  month: {
    stats: { portesVisitees: 450, rdvPris: 70, contratsSignes: 25, tauxOuverture: 15.5, tauxRdv: 15.5, tauxSignature: 35.7, perfMoyenne: 85, commerciauxActifs: 28, heuresProspect: 1248 },
    managerStats: { meilleurManager: "M. Dupont", tauxConclusionMoyen: 38, rdvMoyen: 85, effectifTotal: 5 },
    objectifMensuel: { value: 25, total: 100, title: "Objectif Contrats (mois)"},
    activiteRecente: [ { id: 1, commercial: "Sophie Marchand", action: "Nouveau contrat", type: "CONTRAT", temps: "hier" }, { id: 2, commercial: "Nicolas Blanc", action: "RDV pris", type: "RDV", temps: "hier" }, { id: 3, commercial: "Camille Picard", action: "RDV pris", type: "RDV", temps: "mardi" }, { id: 4, commercial: "Axel Garnier", action: "Refus client", type: "REFUS", temps: "mardi" }, ],
    portesTopeesData: [{ name: 'S1', Visites: 100, RDV: 15, Refus: 10 }, { name: 'S2', Visites: 120, RDV: 20, Refus: 15 }, { name: 'S3', Visites: 90, RDV: 18, Refus: 8 }, { name: 'S4', Visites: 140, RDV: 17, Refus: 12 }],
    repartitionManagersData: [{ name: 'M. Dupont', value: 150 }, { name: 'Mme Martin', value: 180 }, { name: 'M. Bernard', value: 120 }],
    classementManagersGraphData: [{ name: 'Martin', value: 180 }, { name: 'Dupont', value: 150 }, { name: 'Bernard', value: 120 }, { name: 'Robert', value: 110 }],
  },
  last_month: {}, year_to_date: {}
};
// @ts-ignore
dashboardData.last_month = dashboardData.month;
// @ts-ignore
dashboardData.year_to_date = dashboardData.month;
// @ts-ignore
dashboardData.last_week = dashboardData.week;

type ActiviteRecenteItem = {
  id: number;
  commercial: string;
  action: string;
  type: string;
  temps: string;
};

const ActivityBadge = ({ type }: { type: string }) => {
    switch (type) {
        case 'CONTRAT': return <Badge className="bg-emerald-100 text-emerald-800 border-emerald-300">Contrat</Badge>;
        case 'RDV': return <Badge className="bg-sky-100 text-sky-800 border-sky-300">RDV</Badge>;
        case 'REFUS': return <Badge className="bg-red-100 text-red-800 border-red-300">Refus</Badge>;
        default: return <Badge variant="secondary">{type}</Badge>;
    }
};

const CustomDatePicker = ({ onCancel, onValidate }: { onCancel: () => void; onValidate: (range: {from: Date, to: Date}) => void; }) => {
    const [startDate, setStartDate] = React.useState<Date | undefined>();
    const [endDate, setEndDate] = React.useState<Date | undefined>();
    return (
        <div className="flex flex-wrap items-center gap-2 rounded-lg border p-2 bg-background shadow-sm">
            <Popover>
                <PopoverTrigger asChild><Button variant="outline" className="w-[200px] font-normal justify-start text-left"><CalendarIcon className="mr-2 h-4 w-4" />{startDate ? format(startDate, 'd LLL y', { locale: fr }) : <span>Date de début</span>}</Button></PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={startDate} onSelect={setStartDate} initialFocus /></PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild><Button variant="outline" className="w-[200px] font-normal justify-start text-left"><CalendarIcon className="mr-2 h-4 w-4" />{endDate ? format(endDate, 'd LLL y', { locale: fr }) : <span>Date de fin</span>}</Button></PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={endDate} onSelect={setEndDate} initialFocus /></PopoverContent>
            </Popover>
            <Button className="bg-green-600 hover:bg-green-700" onClick={() => onValidate({ from: startDate!, to: endDate! })} disabled={!startDate || !endDate}>Valider</Button>
            <Button variant="ghost" onClick={onCancel}>Annuler</Button>
        </div>
    );
};

const TextStatCard = ({ title, value, Icon, color }: { title: string; value: string; Icon: React.ElementType; color?: string; }) => {
    return (
      <Card className="transition-transform duration-300 hover:scale-[1.03] hover:shadow-lg">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">{title}</CardTitle>
          <Icon className={cn("h-4 w-4 text-muted-foreground", color)} />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{value}</div>
        </CardContent>
      </Card>
    );
};


const DashboardAdmin = () => {
    const [isLoading, setIsLoading] = useState(true);
    const [timeFilter, setTimeFilter] = useState('week');
    const [activePreset, setActivePreset] = useState('week');
    const [isCustomMode, setIsCustomMode] = useState(false);
    const [displayRangeLabel, setDisplayRangeLabel] = useState<string | null>(null);

    const handleTimeFilterChange = (filterKey: string) => {
        setIsLoading(true);
        setActivePreset(filterKey);
        setDisplayRangeLabel(null);
        // @ts-ignore
        setTimeFilter(dashboardData[filterKey] ? filterKey : 'week');
        setTimeout(() => setIsLoading(false), 600);
    };

    const handleCustomValidate = (range: {from: Date, to: Date}) => {
        const newLabel = `${format(range.from, "d LLL y", { locale: fr })} - ${format(range.to, "d LLL y", { locale: fr })}`;
        setDisplayRangeLabel(newLabel);
        handleTimeFilterChange("year_to_date");
        setIsCustomMode(false);
        setActivePreset("custom");
    };

    useEffect(() => {
        const timer = setTimeout(() => setIsLoading(false), 1000);
        return () => clearTimeout(timer);
    }, []);

    if (isLoading) return <DashboardSkeleton />;

    // @ts-ignore
    const currentData = dashboardData[timeFilter] || dashboardData.week;

    return (
        <div className="space-y-8 bg-zinc-50/50 p-4 sm:p-6 rounded-xl">
            <div className="flex flex-wrap gap-4 justify-between items-center animate-in fade-in duration-500 border-b pb-4">
                <h2 className="text-2xl font-semibold flex items-baseline gap-3 text-zinc-900">
                    <BarChart3 className="h-6 w-6 text-primary self-center"/>
                    <span>Statistiques d'ensemble</span>
                    {displayRangeLabel && <span className="text-lg font-normal text-muted-foreground tracking-tight">({displayRangeLabel})</span>}
                </h2>
                {!isCustomMode ? (
                     <div className="flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
                        {/* --- CORRECTION ICI --- */}
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'week' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('week')}>Cette semaine</Button>
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'month' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('month')}>Ce mois</Button>
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'last_month' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('last_month')}>Mois dernier</Button>
                        <Button variant='ghost' className={cn("transition-all", activePreset === 'year_to_date' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')} onClick={() => handleTimeFilterChange('year_to_date')}>Cette année</Button>
                        <Button variant="ghost" className="border-l rounded-l-none" onClick={() => setIsCustomMode(true)}>Personnalisé</Button>
                     </div>
                ) : ( <CustomDatePicker onCancel={() => { setIsCustomMode(false); setActivePreset(timeFilter); }} onValidate={handleCustomValidate} /> )}
            </div>

            <section>
                <h3 className="text-lg font-semibold mb-4 text-zinc-900">Indicateurs Commerciaux</h3>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 animate-in fade-in-0 [animation-delay:100ms] duration-500">
                    <StatCard title="Contrats Signés" value={currentData.stats.contratsSignes} Icon={FileSignature} color="text-emerald-500" />
                    <StatCard title="RDV Pris" value={currentData.stats.rdvPris} Icon={Briefcase} color="text-sky-500" />
                    <StatCard title="Taux de Signature" value={currentData.stats.tauxSignature} Icon={Sparkles} suffix="%" color="text-violet-500" />
                    <StatCard title="Performance Moyenne" value={currentData.stats.perfMoyenne} Icon={Target} suffix="%" color="text-amber-500" />
                </div>
            </section>
            
            <section>
                <h3 className="text-lg font-semibold mb-4 text-zinc-900">Indicateurs Managers</h3>
                 <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 animate-in fade-in-0 [animation-delay:200ms] duration-500">
                    <TextStatCard title="Meilleur Manager" value={currentData.managerStats.meilleurManager} Icon={Award} color="text-yellow-500" />
                    <StatCard title="Taux Conclusion Moyen" value={currentData.managerStats.tauxConclusionMoyen} Icon={Percent} suffix="%" color="text-green-500" />
                    <StatCard title="RDV Moyen / Manager" value={currentData.managerStats.rdvMoyen} Icon={ClipboardCheck} color="text-blue-500" />
                    <StatCard title="Effectif total des managers" value={currentData.managerStats.effectifTotal} Icon={UserCheck} color="text-indigo-500" />
                </div>
            </section>

            <section className="grid grid-cols-1 lg:grid-cols-3 gap-6 animate-in fade-in-0 [animation-delay:300ms] duration-500">
                <GenericRadialBarChart title={currentData.objectifMensuel.title} value={currentData.objectifMensuel.value} total={currentData.objectifMensuel.total} color="fill-emerald-500" />
                <div className="lg:col-span-2">
                    <Card className="h-full"><CardHeader><CardTitle>Flux d'activité récent</CardTitle><CardDescription>Les dernières actions importantes enregistrées.</CardDescription></CardHeader>
                        <CardContent><Table><TableBody>
                            {currentData.activiteRecente.map((item: ActiviteRecenteItem) => (
                                <TableRow key={item.id} className="animate-in fade-in slide-in-from-bottom-2 duration-700">
                                    <TableCell><div className="font-medium">{item.commercial}</div></TableCell>
                                    <TableCell><ActivityBadge type={item.type} /></TableCell>
                                    <TableCell className="text-right text-muted-foreground">{item.temps}</TableCell>
                                </TableRow>
                            ))}
                        </TableBody></Table></CardContent>
                    </Card>
                </div>
            </section>
            
            <section className="animate-in fade-in-0 [animation-delay:400ms] duration-500">
                 <GenericBarChart title="Performances par Manager (Portes Prospectées)" data={currentData.classementManagersGraphData} xAxisDataKey="name" barDataKey="value" fillColor={() => 'hsl(var(--chart-1))'}/>
            </section>

            <section className="grid gap-6 md:grid-cols-2 lg:grid-cols-7 animate-in fade-in-0 [animation-delay:500ms] duration-500">
                <div className="lg:col-span-4">
                  <GenericLineChart title="Activité de prospection" data={currentData.portesTopeesData} xAxisDataKey="name" lines={[ { dataKey: 'Visites', name: "Visites", stroke: 'hsl(var(--chart-1))' }, { dataKey: 'RDV', name: "RDV", stroke: 'hsl(var(--chart-2))' }, { dataKey: 'Refus', name: "Refus", stroke: 'hsl(var(--chart-3))' } ]}/>
                </div>
                <div className="lg:col-span-3">
                  <GenericPieChart title="Répartition des Visites par Manager" data={currentData.repartitionManagersData} dataKey="value" nameKey="name" colors={['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-4))']}/>
                </div>
            </section>
        </div>
    );
};

export default DashboardAdmin;


# --- pages/admin/commerciaux/CommerciauxPage.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CommerciauxPage.tsx

import React, { useState, useEffect, useMemo } from "react";
import type { Commercial } from "./commerciaux-table/columns";
import { createColumns } from "./commerciaux-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import type { RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { commercialService } from "@/services/commercial.service";
import { equipeService } from "@/services/equipe.service";
import { managerService } from "@/services/manager.service";

type EquipeFromAPI = { id: string; nom: string; managerId: string };

const CommerciauxPage = () => {
  const [data, setData] = useState<Commercial[]>([]);
  const [equipes, setEquipes] = useState<EquipeFromAPI[]>([]);
  const [managers, setManagers] = useState<ManagerFromAPI[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<Commercial[]>([]);
  
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  
  const initialFormState = { nom: "", prenom: "", email: "", telephone: "", equipeId: "", managerId: "" };
  const [newCommercialData, setNewCommercialData] = useState(initialFormState);
  const [editingCommercial, setEditingCommercial] = useState<Commercial | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [commerciauxFromApi, equipesFromApi, managersFromApi] = await Promise.all([
        commercialService.getCommerciaux(), equipeService.getEquipes(), managerService.getManagers(),
      ]);

      setEquipes(equipesFromApi);
      setManagers(managersFromApi);

      const equipesMap = new Map(equipesFromApi.map((e) => [e.id, e.nom] as const));
      const managersMap = new Map(managersFromApi.map((m) => [m.id, `${m.prenom} ${m.nom}`] as const));

      const enrichedCommerciaux: Commercial[] = commerciauxFromApi.map((comm) => {
        const totalContratsSignes = comm.historiques.reduce(
          (sum, history) => sum + history.nbContratsSignes,
          0,
        );
        return {
          id: comm.id,
          nom: comm.nom,
          prenom: comm.prenom,
          email: comm.email,
          telephone: comm.telephone || '',
          equipeId: comm.equipeId,
          managerId: comm.managerId,
          manager: managersMap.get(comm.managerId) || 'N/A',
          equipe: comm.equipeId ? equipesMap.get(comm.equipeId) || 'Non assignée' : 'Non assignée',
          totalContratsSignes: totalContratsSignes,
        };
      });

      // Sort commercials by totalContratsSignes for ranking
      enrichedCommerciaux.sort(
        (a, b) => b.totalContratsSignes - a.totalContratsSignes,
      );

      const rankedCommerciaux = enrichedCommerciaux.map((comm, index) => ({
        ...comm,
        classement: index + 1,
      }));

      setData(rankedCommerciaux);
    } catch (error) { console.error("Erreur lors de la récupération des données:", error); } 
    finally { setLoading(false); }
  };

  const handleEditOpen = (commercial: Commercial) => {
    setEditingCommercial(commercial);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingCommercial) return;
    setEditingCommercial({ ...editingCommercial, [e.target.name]: e.target.value });
  };
  
  const handleEditSelectChange = (managerId: string) => {
    if (!editingCommercial) return;
    setEditingCommercial({ ...editingCommercial, managerId });
  };

  const handleUpdateCommercial = async () => {
    if (!editingCommercial) return;
    try {
      const { id, nom, prenom, email, telephone, managerId } = editingCommercial;
      
      const payload = {
        nom, prenom, email, managerId,
        telephone: telephone || undefined,
      };

      await commercialService.updateCommercial(id, payload);

      setIsEditModalOpen(false);
      setEditingCommercial(null);
      fetchData();
    } catch (error) {
      console.error("Erreur de mise à jour du commercial:", error);
    }
  };

  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewCommercialData((prev) => ({ ...prev, [e.target.id]: e.target.value }));
  };
  const handleAddSelectChange = (equipeId: string) => {
    setNewCommercialData((prev) => ({ ...prev, equipeId }));
  };
  const handleAddCommercial = async () => {
    const { nom, prenom, email, managerId } = newCommercialData;
    if (!nom || !prenom || !email || !managerId) {
      alert("Veuillez remplir tous les champs obligatoires.");
      return;
    }

    try {
      await commercialService.createCommercial({
        ...newCommercialData,
        managerId: managerId, 
      });
      setIsAddModalOpen(false);
      setNewCommercialData(initialFormState);
      fetchData();
    } catch (error) {
      console.error("Erreur lors de l'ajout du commercial:", error);
    }
  };

  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map((c) => commercialService.deleteCommercial(c.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) { console.error("Erreur lors de la suppression:", error); }
  };

  const toggleDeleteMode = () => { setIsDeleteMode((prev) => !prev); setRowSelection({}); };
  const handleConfirmDelete = (selectedItems: Commercial[]) => { setItemsToDelete(selectedItems); };

  const columns = useMemo(() => createColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
    return <div>Chargement des commerciaux...</div>;
  }

  return (
    <>
      <DataTable
        columns={columns}
        data={data}
        title="Gestion des Commerciaux"
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de commercial..."
        addEntityButtonText="Ajouter un Commercial"
        onAddEntity={() => setIsAddModalOpen(true)}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
      />

      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])}>
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} commercial(ux) suivant(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map((item) => <li key={item.id}>{item.prenom} {item.nom}</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button variant="destructive" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)}>
        <h2 className="text-lg font-semibold mb-4">Ajouter un nouveau commercial</h2>
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" placeholder="Nom de famille" value={newCommercialData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" placeholder="Prénom" value={newCommercialData.prenom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" placeholder="adresse@email.com" value={newCommercialData.email} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="telephone">Téléphone (optionnel)</Label><Input id="telephone" type="tel" placeholder="0612345678" value={newCommercialData.telephone} onChange={handleAddInputChange} /></div>
          <div className="space-y-1">
            <Label htmlFor="managerId">Manager</Label>
            <Select onValueChange={(value) => setNewCommercialData((prev) => ({ ...prev, managerId: value }))} value={newCommercialData.managerId}>
              <SelectTrigger id="managerId"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
              <SelectContent>
                {managers.map((manager) => (
                  <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddCommercial} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>
      
      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)}>
        <h2 className="text-lg font-semibold mb-4">Modifier le commercial</h2>
        {editingCommercial && (
            <div className="grid gap-4">
            <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" name="nom" value={editingCommercial.nom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" name="prenom" value={editingCommercial.prenom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" name="email" type="email" value={editingCommercial.email} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" name="telephone" type="tel" value={editingCommercial.telephone || ''} onChange={handleEditInputChange} /></div>
            <div className="space-y-1">
                <Label htmlFor="managerId">Manager</Label>
                <Select onValueChange={handleEditSelectChange} value={editingCommercial.managerId}>
                <SelectTrigger id="managerId"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
                <SelectContent>
                    {managers.map((manager) => ( <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem> ))}
                </SelectContent>
                </Select>
            </div>
            </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
            <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
            <Button onClick={handleUpdateCommercial} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  );
};

export default CommerciauxPage;


# --- pages/admin/assignment-goals/AssignmentGoalsPage.tsx ---
import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui-admin/select';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Label } from '@/components/ui-admin/label';
import { Users, MapPin, Target } from 'lucide-react';
import { commercialService } from '@/services/commercial.service';
import { zoneService } from '@/services/zone.service';
import { managerService } from '@/services/manager.service';
import { assignmentGoalsService } from '@/services/assignment-goals.service';
import MapComponent from '@/components/MapComponent';

export enum AssignmentType {
  COMMERCIAL = 'COMMERCIAL',
  MANAGER = 'MANAGER',
}

interface Commercial {
  id: string;
  nom: string;
  prenom: string;
}

interface Manager {
  id: string;
  nom: string;
  prenom: string;
}

interface Zone {
  id: string;
  nom: string;
  latitude: number;
  longitude: number;
  rayonMetres: number;
}

const AssignmentGoalsPage = () => {
  const [commercials, setCommercials] = useState<Commercial[]>([]);
  const [managers, setManagers] = useState<Manager[]>([]);
  const [zones, setZones] = useState<Zone[]>([]);
  const [selectedZone, setSelectedZone] = useState<string>('');
  const [selectedZoneDetails, setSelectedZoneDetails] = useState<Zone | null>(null);
  const [selectedAssigneeType, setSelectedAssigneeType] = useState<AssignmentType>(AssignmentType.COMMERCIAL);
  const [selectedAssigneeId, setSelectedAssigneeId] = useState<string>('');
  const [monthlyGoalCommercialId, setMonthlyGoalCommercialId] = useState<string>('');
  const [monthlyGoal, setMonthlyGoal] = useState<number>(0);

  useEffect(() => {
    const fetchData = async () => {
      const [commercialsData, zonesData, managersData] = await Promise.all([
        commercialService.getCommerciaux(),
        zoneService.getZones(),
        managerService.getManagers(),
      ]);
      setCommercials(commercialsData);
      setZones(zonesData);
      setManagers(managersData);
    };
    fetchData();
  }, []);

  useEffect(() => {
    if (selectedZone) {
      const zone = zones.find(z => z.id === selectedZone);
      setSelectedZoneDetails(zone || null);
    }
  }, [selectedZone, zones]);

  const handleAssignZone = async () => {
    if (selectedZone && selectedAssigneeId && selectedAssigneeType) {
      try {
        await assignmentGoalsService.assignZone(selectedZone, selectedAssigneeId, selectedAssigneeType);
        alert('Zone assignée avec succès!');
      } catch (error) {
        console.error("Erreur lors de l'assignation de la zone:", error);
        alert("Erreur lors de l'assignation de la zone.");
      }
    } else {
      alert('Veuillez sélectionner une zone, un type d\'assignation et un assigné.');
    }
  };

  const handleSetGoal = async () => {
    if (monthlyGoalCommercialId && monthlyGoal > 0) {
      try {
        await assignmentGoalsService.setMonthlyGoal(monthlyGoalCommercialId, monthlyGoal, new Date().getMonth() + 1, new Date().getFullYear());
        alert('Objectif mensuel défini avec succès!');
      } catch (error) {
        console.error("Erreur lors de la définition de l'objectif:", error);
        alert("Erreur lors de la définition de l'objectif.");
      }
    } else {
      alert('Veuillez sélectionner un commercial et définir un objectif valide.');
    }
  };

  const assigneeOptions = selectedAssigneeType === AssignmentType.COMMERCIAL
    ? commercials.map(c => ({ id: c.id, nom: `${c.prenom} ${c.nom}` }))
    : managers.map(m => ({ id: m.id, nom: `${m.prenom} ${m.nom}` }));

  return (
    <div className="min-h-screen bg-gray-50 p-8 flex flex-col">
      <h1 className="text-4xl font-extrabold text-gray-800 mb-8 border-b-2 pb-4 border-gray-200">Assignations et Objectifs</h1>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-10 flex-grow">
        <div className="space-y-10">
          <Card className="shadow-lg border-l-4 border-blue-500">
            <CardHeader>
              <CardTitle className="flex items-center text-blue-700">
                <MapPin className="mr-2 h-6 w-6" /> Assignation de Zone
              </CardTitle>
              <CardDescription>Assignez des zones géographiques aux commerciaux ou aux managers pour la prospection.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6 p-6">
              <div className="space-y-4">
                <div className="flex items-center space-x-2">
                  <MapPin className="h-5 w-5 text-gray-500" />
                  <Select onValueChange={setSelectedZone} value={selectedZone}>
                    <SelectTrigger id="zone-select" className="w-full"><SelectValue placeholder="Sélectionner une zone" /></SelectTrigger>
                    <SelectContent>
                      {zones.map(z => (
                        <SelectItem key={z.id} value={z.id}>{z.nom}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="assignee-type-select">Type d'assignation</Label>
                  <div className="flex items-center space-x-2">
                    <Users className="h-5 w-5 text-gray-500" />
                    <Select onValueChange={(value: AssignmentType) => {
                      setSelectedAssigneeType(value);
                      setSelectedAssigneeId('');
                    }} value={selectedAssigneeType}>
                      <SelectTrigger id="assignee-type-select" className="w-full"><SelectValue placeholder="Sélectionner un type" /></SelectTrigger>
                      <SelectContent>
                        <SelectItem value={AssignmentType.COMMERCIAL}>Commercial</SelectItem>
                        <SelectItem value={AssignmentType.MANAGER}>Manager</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="assignee-select">Assigner à</Label>
                  <div className="flex items-center space-x-2">
                    <Users className="h-5 w-5 text-gray-500" />
                    <Select onValueChange={setSelectedAssigneeId} value={selectedAssigneeId}>
                      <SelectTrigger id="assignee-select" className="w-full"><SelectValue placeholder="Sélectionner un assigné" /></SelectTrigger>
                      <SelectContent>
                        {assigneeOptions.map(assignee => (
                          <SelectItem key={assignee.id} value={assignee.id}>{assignee.nom}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <Button onClick={handleAssignZone} className="bg-blue-600 text-white hover:bg-blue-700">Assigner la Zone</Button>
              </div>
            </CardContent>
          </Card>

          <Card className="shadow-lg border-l-4 border-green-500">
            <CardHeader>
              <CardTitle className="flex items-center text-green-700">
                <Target className="mr-2 h-6 w-6" /> Définir un Objectif Mensuel
              </CardTitle>
              <CardDescription>Définissez des objectifs de contrats mensuels pour les commerciaux.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6 p-6">
              <div className="space-y-4">
                <div className="flex items-center space-x-2">
                  <Users className="h-5 w-5 text-gray-500" />
                  <Select onValueChange={setMonthlyGoalCommercialId} value={monthlyGoalCommercialId}>
                    <SelectTrigger id="commercial-select-goal" className="w-full"><SelectValue placeholder="Sélectionner un commercial" /></SelectTrigger>
                    <SelectContent>
                      {commercials.map(c => (
                        <SelectItem key={c.id} value={c.id}>{c.prenom} {c.nom}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2 mb-4">
                  <Label htmlFor="monthly-goal">Objectif (Contrats)</Label>
                  <div className="flex items-center space-x-2">
                    <Target className="h-5 w-5 text-gray-500" />
                    <Input id="monthly-goal" type="number" value={monthlyGoal} onChange={e => setMonthlyGoal(parseInt(e.target.value))} min="0" className="w-full" />
                  </div>
                </div>
                <Button onClick={handleSetGoal} className="bg-green-600 text-white hover:bg-green-700">Définir l'Objectif</Button>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="flex flex-col space-y-10">
          <Card className="shadow-lg border-l-4 border-purple-500 h-full flex flex-col">
            <CardHeader>
              <CardTitle className="flex items-center text-purple-700">
                <MapPin className="mr-2 h-6 w-6" /> Vue de la Zone
              </CardTitle>
              <CardDescription>Visualisez la zone sélectionnée sur la carte.</CardDescription>
            </CardHeader>
            <CardContent className="p-6 flex-grow flex items-center justify-center">
              {selectedZoneDetails ? (
                <MapComponent
                  latitude={selectedZoneDetails.latitude}
                  longitude={selectedZoneDetails.longitude}
                  zoom={14} // Adjust zoom level as needed
                  radius={selectedZoneDetails.rayonMetres}
                />
              ) : (
                <p className="text-gray-500">Sélectionnez une zone pour la visualiser sur la carte.</p>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AssignmentGoalsPage;


# --- pages/admin/Equipes/EquipesPage.tsx ---
// frontend-shadcn/src/pages/admin/Equipes/EquipesPage.tsx

import React, { useState, useEffect, useMemo } from "react";
import type { Equipe } from "./equipes-table/columns";
import { createEquipesColumns } from "./equipes-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import type { RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { equipeService } from "@/services/equipe.service";
import { managerService } from "@/services/manager.service";
import type { Manager } from '../Managers/managers-table/columns';

const EquipesPage = () => {
  const [data, setData] = useState<Equipe[]>([]);
  const [managersList, setManagersList] = useState<Manager[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<Equipe[]>([]);

  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const initialFormState = { nom: '', managerId: '' };
  const [newEquipeData, setNewEquipeData] = useState(initialFormState);
  const [editingEquipe, setEditingEquipe] = useState<Equipe | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [equipesFromApi, managersFromApi] = await Promise.all([
        equipeService.getEquipes(),
        managerService.getManagers(),
      ]);

      setManagersList(managersFromApi);

      const managersMap = new Map(managersFromApi.map(m => [m.id, m]));
      const enrichedEquipes: Equipe[] = equipesFromApi.map((equipe, index) => {
        const manager = managersMap.get(equipe.managerId);
        return {
          id: equipe.id,
          nom: equipe.nom,
          manager: {
            id: manager?.id || '',
            nom: manager ? `${manager.prenom} ${manager.nom}` : "N/A",
            avatarFallback: manager ? `${manager.prenom[0]}${manager.nom[0]}` : "?",
          },
          // @ts-ignore
          nbCommerciaux: equipe._count?.commerciaux || 0,
          classementGeneral: index + 1, // Note: Le classement est toujours basé sur l'ordre de l'API
        };
      });
      
      setData(enrichedEquipes);
    } catch (error) {
      console.error("Erreur:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleEditOpen = (equipe: Equipe) => {
    setEditingEquipe(equipe);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingEquipe) return;
    setEditingEquipe({ ...editingEquipe, nom: e.target.value });
  };
  
  const handleEditSelectChange = (managerId: string) => {
    if (!editingEquipe) return;
    const manager = managersList.find(m => m.id === managerId);
    if (manager) {
        setEditingEquipe({
            ...editingEquipe,
            manager: {
                ...editingEquipe.manager,
                id: manager.id,
                nom: `${manager.prenom} ${manager.nom}`
            }
        });
    }
  };

  const handleUpdateEquipe = async () => {
    if (!editingEquipe) return;
    try {
      const payload = {
        nom: editingEquipe.nom,
        managerId: editingEquipe.manager.id,
      };
      await equipeService.updateEquipe(editingEquipe.id, payload);
      setIsEditModalOpen(false);
      setEditingEquipe(null);
      fetchData();
    } catch(error) {
      console.error("Erreur de mise à jour de l'équipe:", error);
    }
  };

  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewEquipeData(prev => ({ ...prev, nom: e.target.value }));
  };

  const handleAddSelectChange = (managerId: string) => {
    setNewEquipeData(prev => ({ ...prev, managerId }));
  };

  const handleAddEquipe = async () => {
    if (!newEquipeData.nom || !newEquipeData.managerId) {
      alert("Veuillez remplir tous les champs.");
      return;
    }
    try {
      await equipeService.createEquipe(newEquipeData);
      setIsAddModalOpen(false);
      setNewEquipeData(initialFormState);
      fetchData();
    } catch (error) {
      console.error("Erreur lors de l'ajout de l'équipe:", error);
    }
  };

  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map(e => equipeService.deleteEquipe(e.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) {
      console.error("Erreur lors de la suppression:", error);
    }
  };

  const toggleDeleteMode = () => { setIsDeleteMode(prev => !prev); setRowSelection({}); };
  const handleConfirmDelete = (selectedItems: Equipe[]) => { setItemsToDelete(selectedItems); };

  const columns = useMemo(() => createEquipesColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
    return <div>Chargement des équipes...</div>;
  }

  return (
    <>
      <DataTable 
        columns={columns} data={data} title="Gestion des Équipes" filterColumnId="nom"
        filterPlaceholder="Filtrer par nom d'équipe..." addEntityButtonText="Ajouter une Équipe"
        onAddEntity={() => setIsAddModalOpen(true)} isDeleteMode={isDeleteMode} onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection} setRowSelection={setRowSelection} onConfirmDelete={handleConfirmDelete}
      />

      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])}>
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} équipe(s) suivante(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map(item => <li key={item.id}>{item.nom} (Manager: {item.manager.nom})</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button variant="destructive" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)}>
        <h2 className="text-lg font-semibold mb-4">Ajouter une nouvelle équipe</h2>
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom-equipe">Nom de l'équipe</Label><Input id="nom-equipe" placeholder="Ex: Oméga" value={newEquipeData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1">
            <Label htmlFor="manager-equipe">Manager responsable</Label>
            <Select onValueChange={handleAddSelectChange} value={newEquipeData.managerId}>
              <SelectTrigger id="manager-equipe"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
              <SelectContent>
                {managersList.map(manager => (
                  <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddEquipe} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>

      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)}>
        <h2 className="text-lg font-semibold mb-4">Modifier l'équipe</h2>
        {editingEquipe && (
          <div className="grid gap-4">
            <div className="space-y-1"><Label htmlFor="nom-equipe-edit">Nom de l'équipe</Label><Input id="nom-equipe-edit" value={editingEquipe.nom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1">
              <Label htmlFor="manager-equipe-edit">Manager responsable</Label>
              <Select onValueChange={handleEditSelectChange} value={editingEquipe.manager.id}>
                <SelectTrigger id="manager-equipe-edit"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
                <SelectContent>
                  {managersList.map(manager => (
                    <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
          <Button onClick={handleUpdateEquipe} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  )
}

export default EquipesPage;


# --- pages/admin/immeubles/portes/ImmeubleDetailsPage.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/portes/ImmeubleDetailsPage.tsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { 
    ArrowLeft, Building, Users, Check, X, MoveUpRight, KeyRound 
} from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Skeleton } from '@/components/ui-admin/skeleton';
import { DataTable } from '@/components/data-table/DataTable';
import type { Porte } from './portes-columns';
import { createPortesColumns } from './portes-columns';
import { GenericRadialBarChart } from '@/components/ui-admin/GenericRadialBarChart';
import { immeubleService, type ImmeubleDetailsFromApi } from '@/services/immeuble.service';

// Types locaux pour la clarté du composant
interface Prospector {
    id: string;
    nom: string;
}

interface ImmeubleDetails {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  prospectors: Prospector[];
  prospectingMode: 'SOLO' | 'DUO';
  hasElevator: boolean;
  digicode: string | null;
  nbPortesTotal: number;
  portes: Porte[];
  stats: {
    contratsSignes: number;
    rdvPris: number;
  };
}

// --- Composants UI ---
const ProspectorBadge = ({ Icon, label, prospectors }: { Icon: React.ElementType, label: string, prospectors: Prospector[] }) => (
    <div className="flex items-start gap-3 rounded-lg border bg-card p-3 h-full">
        <div className="bg-muted p-2 rounded-md"><Icon className="h-5 w-5 text-muted-foreground" /></div>
        <div className="flex flex-col gap-1.5">
            <div className="text-sm text-muted-foreground">{label}</div>
            <div className="text-base font-semibold flex flex-col items-start">
                {prospectors.map(p => (
                    <Link key={p.id} to={`/admin/commerciaux/${p.id}`} className="hover:underline hover:text-primary">
                        {p.nom}
                    </Link>
                ))}
            </div>
        </div>
    </div>
);

const InfoBadge = ({ Icon, label, value }: { Icon: React.ElementType, label: string, value: string | React.ReactNode }) => (
    <div className="flex items-center gap-3 rounded-lg border bg-card p-3 h-full">
        <div className="bg-muted p-2 rounded-md"><Icon className="h-5 w-5 text-muted-foreground" /></div>
        <div>
            <div className="text-sm text-muted-foreground">{label}</div>
            <div className="text-base font-semibold">{value}</div>
        </div>
    </div>
);


const ImmeubleDetailsPage = () => {
    const { immeubleId } = useParams<{ immeubleId: string }>();
    const navigate = useNavigate();
    const [immeuble, setImmeuble] = useState<ImmeubleDetails | null>(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (immeubleId) {
            fetchData(immeubleId);
        }
    }, [immeubleId]);

    const fetchData = async (id: string) => {
        setLoading(true);
        try {
            const detailsFromApi = await immeubleService.getImmeubleDetails(id);

            const formattedDetails: ImmeubleDetails = {
                id: detailsFromApi.id,
                adresse: detailsFromApi.adresse,
                ville: detailsFromApi.ville,
                codePostal: detailsFromApi.codePostal,
                prospectors: (detailsFromApi.prospectors || []).map(p => ({
                    id: p.id,
                    nom: `${p.prenom} ${p.nom}`
                })),
                prospectingMode: detailsFromApi.prospectingMode,
                hasElevator: detailsFromApi.hasElevator,
                digicode: detailsFromApi.digicode,
                nbPortesTotal: detailsFromApi.nbPortesTotal,
                portes: (detailsFromApi.portes || []).map(p => {
                    let statusText: Porte['statut'] = 'Non visité';
                    switch(p.statut) {
                        case 'VISITE': statusText = 'Visité'; break;
                        case 'ABSENT': statusText = 'Absent'; break;
                        case 'REFUS': statusText = 'Refus'; break;
                        case 'CURIEUX': statusText = 'Curieux'; break;
                        case 'CONTRAT_SIGNE': statusText = 'Contrat signé'; break;
                    }
                    return {
                        id: p.id,
                        numeroPorte: p.numeroPorte,
                        statut: statusText,
                        passage: p.passage,
                        commentaire: p.commentaire || '',
                    }
                }),
                stats: detailsFromApi.stats,
            };
            setImmeuble(formattedDetails);
        } catch (error) {
            console.error("Erreur de chargement des détails:", error);
            setImmeuble(null);
        } finally {
            setLoading(false);
        }
    };

    const portesData = useMemo(() => {
        if (!immeuble) return [];
        const visitesMap = new Map(immeuble.portes.map(p => [p.numeroPorte, p]));
        const allPortes: Porte[] = [];
        for (let i = 1; i <= immeuble.nbPortesTotal; i++) {
            const numeroPorteStr = String(i);
            if (immeuble.prospectingMode === 'DUO' && i % 2 !== 0) continue;

            const visiteExistante = visitesMap.get(numeroPorteStr);
            if (visiteExistante) {
                allPortes.push({ ...visiteExistante });
            } else {
                allPortes.push({ id: `porte-non-visitee-${i}`, numeroPorte: numeroPorteStr, statut: 'Non visité', passage: 0, commentaire: "" });
            }
        }
        return allPortes;
    }, [immeuble]);

    const portesColumns = useMemo(() => createPortesColumns(), []);

    if (loading) {
        return (
            <div className="space-y-6 animate-pulse">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-40 w-full" />
                <div className="grid lg:grid-cols-3 gap-6">
                    <Skeleton className="lg:col-span-2 h-96" />
                    <Skeleton className="lg:col-span-1 h-96" />
                </div>
            </div>
        )
    }
    
    if (!immeuble) {
        return (
          <div className="text-center p-8">
            <h2 className="text-xl font-semibold">Immeuble non trouvé</h2>
            <p className="text-muted-foreground mt-2">Les détails pour cet immeuble n'ont pas pu être chargés.</p>
            <Button variant="outline" onClick={() => navigate(-1)} className="mt-4">
                <ArrowLeft className="mr-2 h-4 w-4" /> Retour
            </Button>
          </div>
        );
    }

    const portesProspectees = immeuble.portes.length;
    
    return (
        <div className="space-y-6">
            <Button variant="outline" onClick={() => navigate(-1)}>
                <ArrowLeft className="mr-2 h-4 w-4" />
                Retour à la liste des immeubles
            </Button>
            
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-2xl">
                        <Building className="h-6 w-6" />
                        {immeuble.adresse}, {immeuble.codePostal} {immeuble.ville}
                    </CardTitle>
                    <CardDescription>Détails et informations sur la prospection de cet immeuble.</CardDescription>
                </CardHeader>
                <CardContent className="grid grid-cols-2 md:grid-cols-4 gap-4">
                   <ProspectorBadge Icon={Users} label={immeuble.prospectingMode === 'DUO' ? "Duo de Prospection" : "Prospecteur"} prospectors={immeuble.prospectors} />
                   <InfoBadge Icon={Check} label="Contrats Signés" value={immeuble.stats.contratsSignes} />
                   <InfoBadge Icon={MoveUpRight} label="RDV Pris" value={immeuble.stats.rdvPris} />
                   <InfoBadge Icon={KeyRound} label="Digicode" value={immeuble.digicode || "Aucun"} />
                </CardContent>
            </Card>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2">
                    <DataTable
                        columns={portesColumns}
                        data={portesData}
                        title="Détail des Portes"
                        filterColumnId="numeroPorte"
                        filterPlaceholder="Filtrer par n° de porte..."
                        isDeleteMode={false}
                        onToggleDeleteMode={() => {}}
                        rowSelection={{}}
                        setRowSelection={() => {}}
                        onConfirmDelete={() => {}}
                    />
                </div>
                <div className="lg:col-span-1">
                    <GenericRadialBarChart
                        title="Taux de Couverture"
                        value={portesProspectees}
                        total={immeuble.nbPortesTotal}
                        color="fill-sky-500"
                    />
                </div>
            </div>
        </div>
    );
};

export default ImmeubleDetailsPage;


# --- pages/admin/Managers/ManagerDetailsPage.tsx ---
// frontend-shadcn/src/pages/admin/Managers/ManagerDetailsPage.tsx
import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import type { RowSelectionState } from "@tanstack/react-table";
import { ArrowLeft, Briefcase, CheckCircle, Target, Users, User, Mail, Phone } from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Skeleton } from '@/components/ui-admin/skeleton';
import StatCard from '@/components/ui-admin/StatCard';
import { DataTable } from "@/components/data-table/DataTable";
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { managerService } from '@/services/manager.service';
import type { Commercial } from '../commerciaux/commerciaux-table/columns';
import { createColumns as createCommerciauxColumns } from "../commerciaux/commerciaux-table/columns";
import { createEquipesColumns, type EquipeDuManager } from './managers-table/equipes-columns';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';

import { statisticsService } from '@/services/statistics.service';

const ManagerDetailsPage = () => {
    const { managerId } = useParams<{ managerId: string }>();
    const navigate = useNavigate();
    
    const [manager, setManager] = useState<any>(null);
    const [stats, setStats] = useState<any>(null);
    const [perfHistory, setPerfHistory] = useState<any[]>([]);
    const [loading, setLoading] = useState(true);
    
    const [selectedTeam, setSelectedTeam] = useState<EquipeDuManager | null>(null);
    const [teamRowSelection, setTeamRowSelection] = React.useState<RowSelectionState>({});

    // Les colonnes des tableaux
    const equipesColumns = useMemo(() => createEquipesColumns(), []);
    // On exclut les colonnes redondantes pour la liste des commerciaux
    const commerciauxColumns = useMemo(() => {
        const allCols = createCommerciauxColumns(false, () => {}, managerId);
        return allCols.filter(col => col.id !== 'manager' && col.id !== 'equipe');
    }, [managerId]);

    // Chargement des données au montage
    useEffect(() => {
        if (managerId) {
            setLoading(true);
            Promise.all([
                managerService.getManagerDetails(managerId),
                statisticsService.getStatsForManager(managerId),
                statisticsService.getManagerPerformanceHistory(managerId)
            ]).then(([managerData, statsData, historyData]) => {
                const formattedEquipes = managerData.equipes.map((e: any) => ({
                    id: e.id,
                    nom: e.nom,
                    nbCommerciaux: e.commerciaux.length,
                    commerciaux: e.commerciaux.map((c: any, index: number) => ({
                        ...c,
                        manager: `${managerData.prenom} ${managerData.nom}`,
                        managerId: managerData.id,
                        equipe: e.nom,
                        equipeId: e.id,
                        classement: index + 1,
                        telephone: c.telephone || '',
                    }))
                }));
                setManager({ ...managerData, equipes: formattedEquipes });
                setStats(statsData);
                setPerfHistory(historyData);
                setLoading(false);
            }).catch(err => {
                console.error("Erreur de chargement des détails du manager:", err);
                setLoading(false);
            });
        }
    }, [managerId]);

    // Gère le clic sur une ligne d'équipe pour afficher/cacher ses commerciaux
    const handleTeamRowClick = (equipe: EquipeDuManager) => {
        if (selectedTeam?.id === equipe.id) {
            setSelectedTeam(null);
            setTeamRowSelection({});
        } else {
            setSelectedTeam(equipe);
            setTeamRowSelection({ [equipe.id]: true });
        }
    };
    
    // Affichage de chargement
    if (loading) {
        return (
            <div className="space-y-6 animate-pulse">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-24 w-full" />
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    <Skeleton className="h-28 rounded-lg" /><Skeleton className="h-28 rounded-lg" />
                    <Skeleton className="h-28 rounded-lg" /><Skeleton className="h-28 rounded-lg" />
                </div>
                <Skeleton className="h-96 w-full" />
            </div>
        );
    }
    
    // Si le manager n'est pas trouvé
    if (!manager) return <div>Manager non trouvé.</div>;

    // Préparation des données pour les graphiques et stats
    const currentStats = stats?.kpis || { rdvPris: 0, contratsSignes: 0, tauxConclusion: 0 };
    const commerciauxDeLequipeSelectionnee = manager.equipes.find((e: any) => e.id === selectedTeam?.id)?.commerciaux || [];

    return (
        <div className="space-y-8">
            <Button variant="outline" onClick={() => navigate(-1)}><ArrowLeft className="mr-2 h-4 w-4" /> Retour</Button>
            

            <Card>
                <CardHeader>
                    <CardTitle>Informations Personnelles</CardTitle>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div className="flex items-center space-x-2">
                        <User className="h-5 w-5 text-gray-500" />
                        <span>{manager.prenom} {manager.nom}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <Mail className="h-5 w-5 text-gray-500" />
                        <span>{manager.email}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <Phone className="h-5 w-5 text-gray-500" />
                        <span>{manager.telephone || 'N/A'}</span>
                    </div>
                </CardContent>
            </Card>

            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <StatCard title="Contrats (Total)" value={currentStats.contratsSignes} Icon={CheckCircle} color="text-emerald-500" />
                <StatCard title="RDV (Total)" value={currentStats.rdvPris} Icon={Briefcase} color="text-sky-500"/>
                <StatCard title="Taux Conclusion" value={currentStats.tauxConclusion} Icon={Target} suffix="%" color="text-amber-500"/>
                <StatCard title="Nb. Équipes" value={manager.equipes.length} Icon={Users} color="text-yellow-500"/>
            </div>

            <GenericLineChart 
                title="Évolution de la Performance Globale"
                data={perfHistory} 
                xAxisDataKey="name" 
                lines={[{ dataKey: 'perf', stroke: '#3b82f6', name: 'Performance (%)' }]} 
            />
            
            <div className="space-y-4">
                <DataTable
                    columns={equipesColumns} data={manager.equipes} title="Équipes Managées"
                    filterColumnId="nom" filterPlaceholder="Filtrer par équipe..."
                    onRowClick={handleTeamRowClick} rowSelection={teamRowSelection} setRowSelection={setTeamRowSelection}
                    isDeleteMode={false} onToggleDeleteMode={() => {}} onConfirmDelete={() => {}}
                />
                
                {selectedTeam && (
                    <div className="animate-in fade-in-0 duration-500">
                        <DataTable
                            columns={commerciauxColumns} data={commerciauxDeLequipeSelectionnee}
                            title={`Commerciaux de l'équipe : ${selectedTeam.nom}`}
                            filterColumnId="nom" filterPlaceholder="Filtrer par commercial..."
                            isDeleteMode={false} onToggleDeleteMode={() => {}} rowSelection={{}} setRowSelection={() => {}} onConfirmDelete={() => {}}
                        />
                    </div>
                )}
            </div>
        </div>
    );
};

export default ManagerDetailsPage;


# --- pages/admin/zones/ZoneMap.tsx ---
// frontend-shadcn/src/pages/admin/zones/ZoneMap.tsx

import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Circle, Popup, useMap, FeatureGroup, Marker } from 'react-leaflet';
import type { FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { cn } from '@/lib/utils';
import { Maximize, Shrink } from 'lucide-react';
import { Button } from '@/components/ui-admin/button';
import { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';
import 'leaflet-geosearch/dist/geosearch.css';

// --- Patch et icônes ---
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

const zoneCenterIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(222.2 47.4% 11.2%)" stroke="white" stroke-width="2"><circle cx="12" cy="12" r="6"/></svg>'),
    iconSize: [16, 16],
    iconAnchor: [8, 8],
    popupAnchor: [0, -8],
});

const searchMarkerIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(206, 92%, 52%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search-code"><path d="M15.5 15.5 20 20"/><path d="M9 13a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z"/><path d="m14 14-2.5 2.5"/><path d="m14 6-2.5-2.5"/><path d="m6 14-2.5 2.5"/><path d="m6 6 2.5-2.5"/></svg>'),
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
});


interface Zone {
  id: string;
  name: string;
  assignedTo: string;
  color: string;
  latlng: L.LatLngExpression;
  radius: number;
}

interface Immeuble {
  id: string;
  adresse: string;
  latlng: L.LatLngExpression;
  status: string;
}

interface ZoneMapProps {
  existingZones: Zone[];
  immeubles?: Immeuble[]; // Rendre les immeubles optionnels
  onAddZoneClick: () => void;
  zoneToFocus: string | null;
  onFocusClear: () => void;
}

const SearchControl = () => {
    const map = useMap();
    useEffect(() => {
        const provider = new OpenStreetMapProvider({
            params: { countrycodes: 'fr', 'accept-language': 'fr' },
        });
        // @ts-ignore
        const searchControl = new GeoSearchControl({
            provider: provider,
            style: 'bar',
            marker: { icon: searchMarkerIcon, draggable: false },
            showPopup: false, autoClose: true, retainZoomLevel: false,
            animateZoom: true, keepResult: true, searchLabel: 'Entrez une adresse en France...', updateMap: false, 
        });
        const onLocationFound = (event: any) => {
            const { location } = event;
            if (location && location.y && location.x) {
                map.flyTo(new L.LatLng(location.y, location.x), 14, { animate: true, duration: 1.5 }); 
            }
        };
        map.addControl(searchControl);
        map.on('geosearch/showlocation', onLocationFound);
        return () => { map.removeControl(searchControl); map.off('geosearch/showlocation', onLocationFound); };
    }, [map]);
    return null;
};

const MapBoundsFitter = ({ featureGroupRef, zones }: { featureGroupRef: React.RefObject<FeatureGroupType | null>; zones: Zone[] }) => {
    const map = useMap();
    useEffect(() => {
        console.log("MapBoundsFitter received zones:", zones);
        if (!featureGroupRef.current || zones.length === 0) {
            if (zones.length > 0) {
                map.setView(zones[0].latlng, 12); // Center on the first zone if available
            } else {
                map.setView([48.8566, 2.3522], 12); // Default to Paris
            }
            return;
        }
        const bounds = featureGroupRef.current.getBounds();
        if (bounds.isValid()) {
            map.fitBounds(bounds, { padding: [50, 50] });
        } else if (zones.length > 0) {
            // Fallback if bounds are not valid (e.g., single point or all zones at same coordinate)
            map.setView(zones[0].latlng, 15);
        }
    }, [zones, featureGroupRef, map]); 
    return null;
};

const ZoneDisplay = ({ zone }: { zone: Zone }) => {
    const map = useMap();
    const handleDoubleClick = () => {
        map.flyTo(zone.latlng, 15, { animate: true, duration: 1.5 });
    };
    return (
        <>
            <Circle key={`circle-${zone.id}`} center={zone.latlng} radius={zone.radius} pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2 }}>
                <Popup><b>{zone.name}</b></Popup>
            </Circle>
            <Marker key={`marker-${zone.id}`} position={zone.latlng} icon={zoneCenterIcon} eventHandlers={{ dblclick: handleDoubleClick, }}/>
        </>
    );
};

const MapFocusController = ({ zones, zoneToFocus, onFocusClear }: { zones: Zone[], zoneToFocus: string | null, onFocusClear: () => void }) => {
    const map = useMap();
    useEffect(() => {
        if (zoneToFocus) {
            const zone = zones.find(z => z.id === zoneToFocus);
            if (zone) {
                map.flyTo(zone.latlng, 15, { animate: true, duration: 1.5 });
                onFocusClear(); 
            }
        }
    }, [zoneToFocus, zones, map, onFocusClear]);
    return null;
}

export const ZoneMap = ({ existingZones, immeubles = [], zoneToFocus, onFocusClear }: ZoneMapProps) => {
    const featureGroupRef = useRef<FeatureGroupType>(null);
    const [isModalFullscreen, setIsModalFullscreen] = useState(false);

  return (
    <div className={cn( 'relative h-full w-full', isModalFullscreen && 'fixed inset-0 z-[2000] bg-black/80 p-4' )}>
      <div className={cn( 'relative h-full w-full', isModalFullscreen && 'rounded-lg overflow-hidden' )}>
        
        <div className="absolute top-4 right-4 z-[1001] flex flex-col gap-2">
            <Button size="icon" variant="secondary" className="shadow-lg bg-white hover:bg-slate-100 text-slate-800"
                onClick={() => setIsModalFullscreen(!isModalFullscreen)}>
                {isModalFullscreen ? <Shrink className="h-5 w-5" /> : <Maximize className="h-5 w-5" />}
            </Button>
        </div>

        {/* MODIFICATION : La hauteur est maintenant toujours '100%' et la carte est toujours interactive */}
        <MapContainer 
            key={String(isModalFullscreen)}
            center={[48.8566, 2.3522]} zoom={10} 
            style={{ height: '100%', width: '100%', zIndex: 1 }}
            scrollWheelZoom={true}
            dragging={true}
            touchZoom={true}
            className={cn(!isModalFullscreen && "rounded-lg")}
        >
            <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'/>
            <SearchControl />
            <MapBoundsFitter featureGroupRef={featureGroupRef} zones={existingZones} />
            <MapFocusController zones={existingZones} zoneToFocus={zoneToFocus} onFocusClear={onFocusClear} />

            <FeatureGroup ref={featureGroupRef}>
                {existingZones.map(zone => (
                    <ZoneDisplay key={zone.id} zone={zone} />
                ))}
                {immeubles.map(immeuble => (
                    <Marker key={immeuble.id} position={immeuble.latlng}>
                        <Popup>
                            <b>{immeuble.adresse}</b><br />
                            Statut: {immeuble.status}
                        </Popup>
                    </Marker>
                ))}
            </FeatureGroup>
        </MapContainer>
      </div>
    </div>
  );
};


# --- components/ui-admin/dropdown-menu.tsx ---
// src/components/ui/dropdown-menu.tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-[#EFEDED] bg-white p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# --- pages/admin/zones/ZonesPage.tsx ---
// frontend-shadcn/src/pages/admin/zones/ZonesPage.tsx

import { useState, useEffect, useMemo } from 'react';
import { ZoneMap } from './ZoneMap';
import { Button } from '@/components/ui-admin/button';
import { DataTable } from '@/components/data-table/DataTable';
import { createZoneColumns, type Zone as ZoneTableType } from './columns';
import { Modal } from '@/components/ui-admin/Modal';
import { ZoneCreatorModal } from './ZoneCreatorModal';
import type { RowSelectionState } from '@tanstack/react-table';
import { zoneService, type ZoneFromAPI } from '@/services/zone.service';
import { managerService } from '@/services/manager.service';
import { equipeService } from '@/services/equipe.service';
import { commercialService } from '@/services/commercial.service';
import { AssignmentType } from '@/types/enums';
import L from 'leaflet';
import { ViewToggleContainer } from '@/components/ui-admin/ViewToggleContainer';

interface Assignee {
  id: string;
  nom: string;
}

const ZonesPage = () => {
  const [view, setView] = useState<'table' | 'map'>('table');
  const [existingZones, setExistingZones] = useState<ZoneTableType[]>([]);
  const [loading, setLoading] = useState(true);
  
  const [isCreatorOpen, setIsCreatorOpen] = useState(false);
  const [editingZone, setEditingZone] = useState<ZoneTableType | null>(null);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<ZoneTableType[]>([]);
  const [zoneToFocusId, setZoneToFocusId] = useState<string | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [zones] = await Promise.all([
        zoneService.getZones(),
      ]);

      const formattedZones: ZoneTableType[] = zones.map(z => ({
        id: z.id,
        name: z.nom,
        assignedTo: 'Non assignée', // Plus d'assignation directe ici
        color: z.couleur || 'gray',
        latlng: [z.latitude, z.longitude],
        radius: z.rayonMetres,
        dateCreation: z.createdAt,
      }));

      setExistingZones(formattedZones);
    } catch (error) {
      console.error('Erreur de chargement des données:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEditClick = (zone: ZoneTableType) => {
    setEditingZone(zone);
    setIsCreatorOpen(true);
  };

  const handleCloseCreator = () => {
    setIsCreatorOpen(false);
    setEditingZone(null);
  };

  const handleZoneValidated = async (data: {
    id?: string;
    center: L.LatLng;
    radius: number;
    name: string;
    color: string;
  }) => {
    const payload: any = {
      nom: data.name,
      latitude: data.center.lat,
      longitude: data.center.lng,
      rayonMetres: data.radius,
      couleur: data.color,
      typeAssignation: AssignmentType.EQUIPE, // Valeur par défaut, car l'assignation est gérée ailleurs
    };

    try {
      if (data.id) {
        await zoneService.updateZone(data.id, payload);
      } else {
        await zoneService.createZone(payload);
      }
    } catch (error) {
      console.error('Erreur lors de la sauvegarde de la zone:', error);
    }

    handleCloseCreator();
    fetchData();
  };

  const handleConfirmDelete = (selectedRows: ZoneTableType[]) => setItemsToDelete(selectedRows);
  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map(z => zoneService.deleteZone(z.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) {
      console.error('Erreur de suppression:', error);
    }
  };

  const handleRowClick = (zone: ZoneTableType) => {
    setZoneToFocusId(zone.id);
    setView('map');
  };
  const handleClearFocus = () => setZoneToFocusId(null);
  const toggleDeleteMode = () => {
    setIsDeleteMode(prev => !prev);
    setRowSelection({});
  };
  const zoneColumns = useMemo(() => createZoneColumns(isDeleteMode, handleEditClick), [isDeleteMode]);

  if (loading) return <div>Chargement...</div>;

  const tableComponent = (
    <DataTable
        noCardWrapper
        columns={zoneColumns}
        data={existingZones}
        title=""
        filterColumnId="name"
        filterPlaceholder="Rechercher une zone par son nom..."
        addEntityButtonText="Ajouter une Zone"
        onAddEntity={() => {
          setEditingZone(null);
          setIsCreatorOpen(true);
        }}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
        onRowClick={handleRowClick}
      />
  );
  
  const mapComponent = (
     <ZoneMap
        existingZones={existingZones}
        onAddZoneClick={() => {
          setEditingZone(null);
          setIsCreatorOpen(true);
        }}
        zoneToFocus={zoneToFocusId}
        onFocusClear={handleClearFocus}
      />
  );

  return (
    <div className="h-full flex flex-col gap-6">
      {isCreatorOpen && (
        <ZoneCreatorModal
          onValidate={handleZoneValidated}
          onClose={handleCloseCreator}
          existingZones={existingZones}
          zoneToEdit={editingZone}
        />
      )}
      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])}>
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">
          Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} zone(s) sélectionnée(s)
          ?
        </p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map(item => (<li key={item.id}>{item.name}</li>))}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button variant="destructive" onClick={handleDelete}>Valider la suppression</Button>
        </div>
      </Modal>

      <ViewToggleContainer
        title="Gestion des Zones"
        description="Basculez entre la vue tableau et la vue carte interactive pour créer, modifier et visualiser les zones."
        view={view}
        onViewChange={setView}
        tableComponent={tableComponent}
        mapComponent={mapComponent}
      />
    </div>
  );
};

export default ZonesPage;


# --- pages/admin/commerciaux/commerciaux-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/commerciaux-table/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Mail, Eye, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"

export type Commercial = {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  manager: string;
  managerId: string;
  equipe: string;
  equipeId?: string;
  classement: number;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createColumns = (isDeleteMode: boolean, onEdit: (commercial: Commercial) => void, managerIdForBack?: string): ColumnDef<Commercial>[] => {
  const columns: ColumnDef<Commercial>[] = [
    // --- Colonne de sélection ---
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: any }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      cell: ({ row }: { row: any }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    }] : []),

    // --- Colonnes de données ---
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "prenom",
      header: () => <Header title="Prénom" />,
    },
    {
      accessorKey: "email",
      header: () => <Header title="Email" />,
      cell: ({ row }) => (
        <a href={`mailto:${row.getValue("email")}`} className="flex items-center gap-2 hover:underline">
          <Mail className="h-4 w-4 text-muted-foreground" />
          {row.getValue("email")}
        </a>
      )
    },
    {
      accessorKey: "manager",
      header: () => <Header title="Manager" />,
      cell: ({ row }) => {
        const managerName = row.original.manager;
        const managerId = row.original.managerId;
        return (
            <Link 
                to={`/admin/managers/${managerId}`} 
                className="hover:underline hover:text-primary transition-colors"
                onClick={(e) => e.stopPropagation()}
            >
                {managerName}
            </Link>
        )
      },
    },
    {
      accessorKey: "equipe",
      header: () => <Header title="Équipe" />,
    },
    {
      accessorKey: "classement",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classement") as number;
        // CORRECTION: Rétablissement des couleurs des badges
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300 hover:bg-yellow-200/80";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300 hover:bg-slate-300/80";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300 hover:bg-orange-300/80";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>{classement}</Badge>
          </div>
        );
      },
    },

    // --- Colonne d'Actions (améliorée) ---
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const commercial = row.original;
            return (
                // CORRECTION: Utilisation d'un TooltipProvider et ajout d'espace
                <TooltipProvider delayDuration={100}>
                    <div className="text-right space-x-2">
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button asChild variant="ghost" className="h-8 w-8 p-0">
                                    <Link to={`/admin/commerciaux/${commercial.id}`} state={{ fromManager: managerIdForBack }} onClick={(e) => { e.stopPropagation(); }}>
                                        <Eye className="h-4 w-4" />
                                        <span className="sr-only">Voir les détails</span>
                                    </Link>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Voir les détails</p></TooltipContent>
                        </Tooltip>

                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(commercial); }}>
                                    <Edit className="h-4 w-4" />
                                    <span className="sr-only">Modifier</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Modifier</p></TooltipContent>
                        </Tooltip>
                    </div>
                </TooltipProvider>
            )
        },
    },
  ]
  
  return columns;
}


# --- pages/admin/immeubles/ImmeublesMap.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/ImmeublesMap.tsx
import { useEffect, useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { MapContainer, TileLayer, Circle, Popup, Marker, FeatureGroup } from 'react-leaflet';
import type { Map as LeafletMap, FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { Button } from '@/components/ui-admin/button';
import { type Immeuble } from './columns';
import { type Zone } from '../zones/columns';
import { Eye } from 'lucide-react';

// --- (Icon setup and Leaflet patch) ---
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});
const buildingIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#09090B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-building-2"><path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"/><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"/><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"/><path d="M10 6h4"/><path d="M10 10h4"/><path d="M10 14h4"/><path d="M10 18h4"/></svg>'),
    iconSize: [28, 28],
    iconAnchor: [14, 28],
    popupAnchor: [0, -28]
});
const focusIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="hsl(142.1 76.2% 44.1%)" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [36, 36],
    iconAnchor: [18, 36],
    popupAnchor: [0, -36],
});

interface ImmeublesMapProps {
  zones: Zone[];
  immeubles: Immeuble[];
  immeubleToFocusId: string | null;
  zoneToFocusId: string | null;
  onFocusClear: () => void;
}

export const ImmeublesMap = (props: ImmeublesMapProps) => {
    const { zones, immeubles, immeubleToFocusId, zoneToFocusId, onFocusClear } = props;
    const navigate = useNavigate();
    const [map, setMap] = useState<LeafletMap | null>(null);
    const featureGroupRef = useRef<FeatureGroupType>(null);
    const [selectedImmeuble, setSelectedImmeuble] = useState<Immeuble | null>(null);

    useEffect(() => {
        if (!map) return;

        if (immeubleToFocusId) {
            const immeuble = immeubles.find(i => i.id === immeubleToFocusId);
            if (immeuble) {
                setSelectedImmeuble(immeuble);
                map.flyTo(immeuble.latlng, 17, { animate: true, duration: 1.5 });
            }
            onFocusClear();
        } 
        else if (zoneToFocusId) {
            const zone = zones.find(z => z.id === zoneToFocusId);
            if (zone) {
                setSelectedImmeuble(null);
                map.flyTo(zone.latlng, 14, { animate: true, duration: 1.5 });
            }
            onFocusClear();
        }
    }, [immeubleToFocusId, zoneToFocusId, map, onFocusClear, immeubles, zones]);

    useEffect(() => {
        if (map && featureGroupRef.current) {
            const timer = setTimeout(() => {
                if (featureGroupRef.current && featureGroupRef.current.getLayers().length > 0) {
                     const bounds = featureGroupRef.current.getBounds();
                     if(bounds.isValid()) {
                        map.fitBounds(bounds, { padding: [50, 50], maxZoom: 16 });
                     }
                } else if (zones.length === 0 && immeubles.length === 0) {
                     map.setView([48.8566, 2.3522], 12);
                }
            }, 100);

            return () => clearTimeout(timer);
        }
    }, [map, zones, immeubles]);

    return (
        <div className="h-[70vh] w-full rounded-lg overflow-hidden">
            <MapContainer ref={setMap} center={[48.8566, 2.3522]} zoom={12} style={{ height: '100%', width: '100%' }}>
                <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' />
                
                <FeatureGroup ref={featureGroupRef}>
                    {zones.map(zone => (
                        <Circle key={zone.id} center={zone.latlng} radius={zone.radius} pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.1, weight: 2 }}>
                             <Popup><b>Zone:</b> {zone.name}<br/><b>Assignée à:</b> {zone.assignedTo}</Popup>
                        </Circle>
                    ))}
                    {immeubles.map(immeuble => (
                        <Marker key={immeuble.id} position={immeuble.latlng} icon={buildingIcon}>
                            <Popup>
                                <div className="space-y-2">
                                    <p className="font-bold">{immeuble.adresse}</p>
                                    <p className="text-sm text-muted-foreground">{immeuble.codePostal} {immeuble.ville}</p>
                                    <Button size="sm" className="bg-green-600 text-white hover:bg-green-700" onClick={() => navigate(`/admin/immeubles/${immeuble.id}`)}>
                                        <Eye className="mr-2 h-4 w-4" /> Voir les portes
                                    </Button>
                                </div>
                            </Popup>
                        </Marker>
                    ))}
                </FeatureGroup>

                {selectedImmeuble && (
                    <Marker position={selectedImmeuble.latlng} icon={focusIcon} zIndexOffset={1000}>
                        <Popup>
                            <p className="font-bold">Focus: {selectedImmeuble.adresse}</p>
                        </Popup>
                    </Marker>
                )}
            </MapContainer>
        </div>
    );
};


# --- pages/admin/Equipes/equipes-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/Equipes/equipes-table/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Users as CommerciauxIcon, Eye, Award, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Avatar, AvatarFallback } from "@/components/ui-admin/avatar"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"

export type Equipe = {
  id: string;
  nom: string;
  manager: {
    id: string; // AJOUT: id du manager pour la modale d'édition
    nom: string;
    avatarFallback: string;
  };
  nbCommerciaux: number;
  classementGeneral: number;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)
const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createEquipesColumns = (isDeleteMode: boolean, onEdit: (equipe: Equipe) => void): ColumnDef<Equipe>[] => {
  return [
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: import("@tanstack/react-table").Table<Equipe> }) => (
        <Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />
      ),
      cell: ({ row }: { row: import("@tanstack/react-table").Row<Equipe> }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" onClick={(e) => e.stopPropagation()} />
      ),
      enableSorting: false, enableHiding: false,
    }] : []),
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom de l'équipe" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "manager",
      header: () => <Header title="Manager responsable" />,
      cell: ({ row }) => {
        const manager = row.original.manager
        return (
          <Link to={`/admin/managers/${manager.id}`} className="flex items-center gap-2 group" onClick={(e) => e.stopPropagation()}>
            <Avatar className="h-8 w-8">
              <AvatarFallback>{manager.avatarFallback}</AvatarFallback>
            </Avatar>
            <span className="group-hover:underline group-hover:text-primary transition-colors">{manager.nom}</span>
          </Link>
        )
      },
      sortingFn: (rowA, rowB) => {
        return rowA.original.manager.nom.localeCompare(rowB.original.manager.nom);
      }
    },
    {
      accessorKey: "nbCommerciaux",
      header: () => <div className="text-center"><Header title="Effectif" /></div>,
      cell: ({ row }) => (
        <div className="flex items-center justify-center gap-2">
          <CommerciauxIcon className="h-4 w-4 text-muted-foreground" />
          <span>{row.getValue("nbCommerciaux")}</span>
        </div>
      )
    },
    {
      accessorKey: "classementGeneral",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classementGeneral") as number;
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>
              <Award className="mr-1 h-3 w-3" />
              {classement}
            </Badge>
          </div>
        );
      },
    },
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const equipe = row.original;
            return (
              <TooltipProvider delayDuration={100}>
                <div className="text-right space-x-2">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button asChild variant="ghost" className="h-8 w-8 p-0">
                            <Link to={`/admin/equipes/${equipe.id}`} onClick={(e) => { e.stopPropagation(); }}>
                                <Eye className="h-4 w-4" />
                                <span className="sr-only">Voir les détails de l'équipe</span>
                            </Link>
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent><p>Voir les détails</p></TooltipContent>
                    </Tooltip>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(equipe); }}>
                            <Edit className="h-4 w-4" />
                            <span className="sr-only">Modifier</span>
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent><p>Modifier</p></TooltipContent>
                    </Tooltip>
                </div>
              </TooltipProvider>
            )
        },
    },
  ]
}


# --- pages/admin/Managers/managers-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/Managers/managers-table/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Mail, Phone, Eye, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"


export type Manager = {
  id: string
  nom: string
  prenom: string
  email: string
  telephone: string | null
  nbEquipes: number
  classement: number
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const getColumns = (isDeleteMode: boolean, onEdit: (manager: Manager) => void): ColumnDef<Manager>[] => {
  const columns: ColumnDef<Manager>[] = [
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: import("@tanstack/react-table").Table<Manager> }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      cell: ({ row }: { row: import("@tanstack/react-table").Row<Manager> }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    }] : []),
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "prenom",
      header: () => <Header title="Prénom" />,
    },
    {
      accessorKey: "email",
      header: () => <Header title="Email" />,
      cell: ({ row }) => (
        <a href={`mailto:${row.getValue("email")}`} className="flex items-center gap-2 hover:underline">
          <Mail className="h-4 w-4 text-muted-foreground" />
          {row.getValue("email")}
        </a>
      ),
    },
    {
      accessorKey: "telephone",
      header: () => <Header title="Téléphone" />,
      cell: ({ row }) => (
        <a href={`tel:${row.getValue("telephone")}`} className="flex items-center gap-2 hover:underline">
          <Phone className="h-4 w-4 text-muted-foreground" />
          {row.getValue("telephone")}
        </a>
      ),
    },
    {
      accessorKey: "nbEquipes",
      header: () => <div className="text-center"><Header title="Nb. d'équipes" /></div>,
      cell: ({ row }) => <div className="text-center">{row.getValue("nbEquipes")}</div>,
      meta: { className: "text-center" }
    },
    {
      accessorKey: "classement",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classement") as number;
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300 hover:bg-yellow-200/80";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300 hover:bg-slate-300/80";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300 hover:bg-orange-300/80";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>{classement}</Badge>
          </div>
        );
      },
    },
    {
      id: "actions",
      header: () => <div className="text-right"><Header title="Actions" /></div>,
      cell: ({ row }) => {
        const manager = row.original;
        return (
          <TooltipProvider delayDuration={100}>
            <div className="text-right space-x-2">
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button asChild variant="ghost" className="h-8 w-8 p-0">
                    <Link to={`/admin/managers/${manager.id}`} onClick={(e) => e.stopPropagation()}>
                      <Eye className="h-4 w-4" />
                      <span className="sr-only">Voir les détails</span>
                    </Link>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Voir les détails</p></TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(manager); }}>
                    <Edit className="h-4 w-4" />
                    <span className="sr-only">Modifier</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Modifier</p></TooltipContent>
              </Tooltip>
            </div>
          </TooltipProvider>
        )
      }
    },
  ]
  
  return columns;
}


# --- pages/commercial/ProspectingSetupPage.tsx ---
// src/pages/commercial/ProspectingSetupPage.tsx
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Label } from '@/components/ui-admin/label';
import { User, Users, ArrowRight, Send } from 'lucide-react';
import { cn } from '@/lib/utils';

type ProspectingMode = 'solo' | 'duo';

const ProspectingSetupPage = () => {
    const { buildingId } = useParams<{ buildingId: string }>();
    const navigate = useNavigate();
    const [mode, setMode] = useState<ProspectingMode | null>(null);
    const [duoEmail, setDuoEmail] = useState('');

    console.log(`ProspectingSetupPage loaded with buildingId: ${buildingId}`);

    const handleStartSolo = () => {
        console.log(`Navigating from ProspectingSetupPage with ID: ${buildingId}`);
        console.log(`Démarrage en SOLO pour l'immeuble ${buildingId}`);
        navigate(`/commercial/prospecting/doors/${buildingId}`);
    };

    const handleInviteDuo = () => {
        if (duoEmail) {
            console.log(`Invitation envoyée à ${duoEmail} pour l'immeuble ${buildingId}`);
            alert(`Invitation envoyée à ${duoEmail} !`);
        }
    };

    return (
        <div className="container mx-auto py-8">
            <Card className="max-w-2xl mx-auto">
                <CardHeader>
                    <CardTitle className="text-2xl flex items-center gap-3">
                        <Users className="h-6 w-6 text-primary"/>
                        Étape 2 : Mode de Prospection
                    </CardTitle>
                    <CardDescription>
                        Allez-vous prospecter seul ou en équipe aujourd'hui ?
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Card 
                            onClick={() => setMode('solo')}
                            className={cn(
                                "p-6 text-center cursor-pointer transition-all border-2",
                                mode === 'solo' ? 'border-primary shadow-lg scale-105' : 'hover:border-primary/50'
                            )}
                        >
                            <User className="mx-auto h-12 w-12 text-primary" />
                            <h3 className="mt-4 text-lg font-bold">Mode Solo</h3>
                            <p className="text-sm text-muted-foreground">Prospectez seul à votre rythme.</p>
                        </Card>
                        <Card 
                            onClick={() => setMode('duo')}
                            className={cn(
                                "p-6 text-center cursor-pointer transition-all border-2",
                                mode === 'duo' ? 'border-primary shadow-lg scale-105' : 'hover:border-primary/50'
                            )}
                        >
                            <Users className="mx-auto h-12 w-12 text-primary" />
                            <h3 className="mt-4 text-lg font-bold">Mode Duo</h3>
                            <p className="text-sm text-muted-foreground">Collaborez avec un coéquipier.</p>
                        </Card>
                    </div>

                    {mode === 'duo' && (
                        <div className="space-y-2 animate-in fade-in-0">
                            <Label htmlFor="duo-email">Email du coéquipier</Label>
                            <div className="flex gap-2">
                                <Input 
                                    id="duo-email" 
                                    type="email"
                                    placeholder="nom.prenom@winvest.capital"
                                    value={duoEmail}
                                    onChange={(e) => setDuoEmail(e.target.value)}
                                />
                                <Button 
                                    onClick={handleInviteDuo}
                                    disabled={!duoEmail}
                                    className="bg-green-600 text-white hover:bg-green-700"
                                >
                                    <Send className="mr-2 h-4 w-4" />
                                    Inviter
                                </Button>
                            </div>
                        </div>
                    )}
                </CardContent>

                {mode === 'solo' && (
                    <CardFooter className="flex justify-end">
                        <Button 
                            onClick={handleStartSolo}
                            className="bg-green-600 text-white hover:bg-green-700"
                        >
                            Commencer la prospection <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    </CardFooter>
                )}
            </Card>
        </div>
    );
};

export default ProspectingSetupPage;


# --- pages/admin/suivi/AudioPlayer.tsx ---
// src/pages/admin/suivi/AudioPlayer.tsx
import React, { useEffect, useRef, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { Slider } from '@/components/ui-admin/slider';
import { Volume2, BarChart, MicOff } from 'lucide-react';
import { type Commercial } from './types';
import { Badge } from '@/components/ui-admin/badge';

interface AudioPlayerProps {
  activeCommercial: Commercial | null;
  liveText: string;
  isProspecting: boolean;
  audioChunks: Blob[];
}

export const AudioPlayer = ({ activeCommercial, liveText, isProspecting, audioChunks }: AudioPlayerProps) => {
  const audioContextRef = useRef<AudioContext | null>(null);
  const audioQueueRef = useRef<Blob[]>([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [volume, setVolume] = useState(50);
  const gainNodeRef = useRef<GainNode | null>(null);

  // Initialise l'AudioContext
  useEffect(() => {
    if (!audioContextRef.current) {
      const context = new (window.AudioContext || (window as any).webkitAudioContext)();
      audioContextRef.current = context;
      const gainNode = context.createGain();
      gainNode.connect(context.destination);
      gainNodeRef.current = gainNode;
    }
  }, []);
  
  // Met à jour le volume
  useEffect(() => {
    if (gainNodeRef.current) {
      gainNodeRef.current.gain.value = volume / 100;
    }
  }, [volume]);


  const playNextInQueue = async () => {
    if (audioQueueRef.current.length === 0) {
      setIsPlaying(false);
      return;
    }
    
    setIsPlaying(true);
    const blob = audioQueueRef.current.shift();
    if (!blob || !audioContextRef.current || !gainNodeRef.current) return;

    try {
      const arrayBuffer = await blob.arrayBuffer();
      const audioBuffer = await audioContextRef.current.decodeAudioData(arrayBuffer);
      
      const source = audioContextRef.current.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(gainNodeRef.current);
      source.onended = playNextInQueue; // Joue le prochain morceau quand celui-ci est fini
      source.start();
    } catch (error) {
      console.error("Erreur de décodage audio, passage au suivant.", error);
      playNextInQueue(); // Tente de jouer le prochain
    }
  };

  // Ajoute les nouveaux chunks à la file d'attente et démarre la lecture si nécessaire
  useEffect(() => {
    if (audioChunks.length > 0) {
      audioQueueRef.current.push(...audioChunks);
      if (!isPlaying) {
        playNextInQueue();
      }
    }
  }, [audioChunks, isPlaying]);

  // Réinitialise la file d'attente si le commercial change
  useEffect(() => {
    audioQueueRef.current = [];
    setIsPlaying(false);
  }, [activeCommercial]);


  if (!activeCommercial) {
    return (
      <Card className="bg-white shadow-md">
        <CardHeader>
          <CardTitle>Lecteur Audio</CardTitle>
          <CardDescription>Aucun commercial sélectionné.</CardDescription>
        </CardHeader>
        <CardContent className="flex items-center justify-center h-48 text-muted-foreground">
          <MicOff className="h-12 w-12" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-white shadow-md">
      <CardHeader>
        <div className="flex items-center gap-4">
          <Avatar className="h-12 w-12">
            <AvatarFallback className="text-lg bg-zinc-200 text-zinc-700">{activeCommercial.avatarFallback}</AvatarFallback>
          </Avatar>
          <div>
            <CardTitle>{activeCommercial.name}</CardTitle>
            <CardDescription>Équipe {activeCommercial.equipe} - {isProspecting ? 'En ligne' : 'Hors ligne'}</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="bg-zinc-100 border border-zinc-200 p-3 rounded-lg min-h-[100px] max-h-[200px] overflow-y-auto text-sm text-zinc-700 transition-colors">
          {isProspecting ? (
            liveText || <span className="italic text-zinc-500">En attente de transcription...</span>
          ) : (
            <span className="italic text-zinc-500">Le commercial n'est pas en prospection.</span>
          )}
        </div>
        
        <div className="flex items-center gap-4">
          <div className="flex-1 flex items-center gap-2">
             <Badge variant="outline" className={isProspecting ? "bg-green-100 text-green-800 border-green-300" : "bg-gray-100 text-gray-800 border-gray-300"}>
                {isProspecting ? <BarChart className="h-4 w-4 mr-2 animate-pulse" /> : <MicOff className="h-4 w-4 mr-2" />}
                {isProspecting ? 'EN DIRECT' : 'HORS LIGNE'}
             </Badge>
          </div>
          <div className="flex items-center gap-2 w-[120px]">
            <Volume2 className="h-5 w-5 text-muted-foreground" />
            <Slider defaultValue={[volume]} max={100} step={1} onValueChange={(value) => setVolume(value[0])} />
          </div>
        </div>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/command.tsx ---
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui-admin/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  className,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
  className?: string
  showCloseButton?: boolean
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent
        className={cn("overflow-hidden p-0", className)}
        showCloseButton={showCloseButton}
      >
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



# --- components/ui-admin/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        onPointerDownOutside={(e) => {
          const target = e.target as HTMLElement;
          if (target.closest('[data-radix-select-content]')) {
            e.preventDefault();
          }
        }}
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



# --- components/ui-admin/alert-dialog.tsx ---
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui-admin/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



# --- pages/admin/zones/ZoneDetailsPage.tsx ---
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { zoneService, type ZoneDetailsFromApi } from '@/services/zone.service';
import { Button } from '@/components/ui-admin/button';
import { ArrowLeft, MapPin, Building, CheckCircle, Briefcase } from 'lucide-react';
import { Skeleton } from '@/components/ui-admin/skeleton';
import StatCard from '@/components/ui-admin/StatCard';
import { ZoneMap } from './ZoneMap'; // Assurez-vous que ce composant peut être réutilisé ou adapté

const ZoneDetailsPage = () => {
  const { zoneId } = useParams<{ zoneId: string }>();
  const navigate = useNavigate();
  const [zoneDetails, setZoneDetails] = useState<ZoneDetailsFromApi | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (zoneId) {
      setLoading(true);
      zoneService.getZoneDetails(zoneId)
        .then(data => {
          setZoneDetails(data);
        })
        .catch(error => {
          console.error('Erreur lors de la récupération des détails de la zone:', error);
          setZoneDetails(null);
        })
        .finally(() => {
          setLoading(false);
        });
    }
  }, [zoneId]);

  if (loading) {
    return (
      <div className="space-y-6 animate-pulse">
        <Skeleton className="h-10 w-48" />
        <Skeleton className="h-24 w-full" />
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[...Array(3)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}
        </div>
        <Skeleton className="h-96 w-full" />
      </div>
    );
  }

  if (!zoneDetails) {
    return <div>Zone non trouvée ou erreur de chargement.</div>;
  }

  return (
    <div className="h-full flex flex-col space-y-8">
      <Button variant="outline" onClick={() => navigate(-1)}>
        <ArrowLeft className="mr-2 h-4 w-4" />
        Retour à la liste des zones
      </Button>

      <div className="space-y-2">
        <h1 className="text-3xl font-bold flex items-center gap-3">
          <MapPin className="h-8 w-8 text-primary" />
          Zone: {zoneDetails.nom}
        </h1>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <StatCard title="Nombre d'immeubles" value={zoneDetails.stats.nbImmeubles} Icon={Building} color="text-blue-500" />
        <StatCard title="Contrats Signés" value={zoneDetails.stats.totalContratsSignes} Icon={CheckCircle} color="text-emerald-500" />
        <StatCard title="RDV Pris" value={zoneDetails.stats.totalRdvPris} Icon={Briefcase} color="text-sky-500" />
      </div>

      <div className="flex-grow flex flex-col">
        <h2 className="text-2xl font-bold mb-4">Carte de la Zone</h2>
        <div className="flex-grow w-full">
          <ZoneMap
            existingZones={[{
              id: zoneDetails.id,
              name: zoneDetails.nom,
              assignedTo: '', // L'assignation n'est pas nécessaire ici
              color: zoneDetails.couleur,
              latlng: [zoneDetails.latitude, zoneDetails.longitude],
              radius: zoneDetails.rayonMetres,
              dateCreation: zoneDetails.createdAt,
            }]}
            immeubles={zoneDetails.immeubles.map(imm => ({
              id: imm.id,
              adresse: imm.adresse,
              status: imm.status, // Le statut est déjà une chaîne de caractères
              latlng: [imm.latitude, imm.longitude],
            }))}
            zoneToFocus={zoneDetails.id}
            onFocusClear={() => {}}
            onAddZoneClick={() => {}}
          />
        </div>
      </div>
    </div>
  );
};

export default ZoneDetailsPage;



# --- pages/commercial/doors-columns.tsx ---
// src/pages/commercial/doors-columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Edit, MessageSquare, Repeat, Hash, Check, BellOff, User, Smile, Frown, Landmark } from "lucide-react"
import { cn } from "@/lib/utils"

export type PorteStatus = "Non visité" | "Absent" | "Refus" | "Curieux" | "RDV" | "Contrat";

export type Porte = {
  id: string; 
  numero: string;
  statut: PorteStatus;
  commentaire: string;
  repassage: boolean;
  nbPassages: number;
};

export const statusConfig: Record<PorteStatus, { className: string; icon: React.ElementType }> = {
    "Non visité": { className: "bg-gray-100 text-gray-800 border-gray-300", icon: BellOff },
    "Absent": { className: "bg-yellow-100 text-yellow-800 border-yellow-300", icon: User },
    "Curieux": { className: "bg-purple-100 text-purple-800 border-purple-300", icon: Smile },
    "Refus": { className: "bg-red-100 text-red-800 border-red-300", icon: Frown },
    "RDV": { className: "bg-sky-100 text-sky-800 border-sky-300", icon: Check },
    "Contrat": { className: "bg-emerald-100 text-emerald-800 border-emerald-300", icon: Landmark },
};

export const statusList = Object.keys(statusConfig) as PorteStatus[];

export const createDoorsColumns = (
    onEdit: (porteId: string) => void
): ColumnDef<Porte>[] => [
    {
      accessorKey: "numero",
      header: "Porte",
      cell: ({ row }) => (
        <div className="font-bold flex items-center gap-2">
            <Hash className="h-4 w-4 text-muted-foreground"/>
            {row.original.numero}
        </div>
      ),
      meta: { className: "w-[100px]" }
    },
    {
      accessorKey: "statut",
      header: "Statut",
      cell: ({ row }) => {
        const statut = row.original.statut;
        const config = statusConfig[statut];
        return <Badge variant="outline" className={cn("font-medium", config.className)}><config.icon className="mr-1.5 h-3 w-3"/>{statut}</Badge>;
      }
    },
    {
        accessorKey: "nbPassages",
        header: "Passages",
        cell: ({ row }) => {
            return <span>{row.original.nbPassages}</span>
        }
    },
    {
        accessorKey: "repassage",
        header: "Repassage",
        cell: ({ row }) => {
            if (!row.original.repassage) return <span className="text-muted-foreground">-</span>;
            return (
                <div className="flex items-center gap-2 text-yellow-600 font-semibold">
                    <Repeat className="h-4 w-4" />
                    <span>À revoir</span>
                </div>
            )
        }
    },
    {
      accessorKey: "commentaire",
      header: "Commentaire",
      cell: ({ row }) => {
        const commentaire = row.original.commentaire;
        if (!commentaire) return <span className="italic text-muted-foreground">Aucun commentaire</span>;
        return (
          <div className="flex items-start gap-2">
            <MessageSquare className="h-4 w-4 text-muted-foreground mt-1 shrink-0" />
            <span className="max-w-xs truncate">{commentaire}</span>
          </div>
        )
      },
    },
    {
        id: "actions",
        cell: ({ row }) => (
            <div className="text-right">
                <Button variant="ghost" size="icon" onClick={() => onEdit(row.original.id)}>
                    <Edit className="h-4 w-4" />
                </Button>
            </div>
        )
    }
];


# --- components/ui-admin/ustomDatePicker.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CustomDatePicker.tsx 
// (Ou à l'intérieur de CommercialDetailsPage.tsx)
import React from 'react';
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { Calendar as CalendarIcon } from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Calendar } from "@/components/ui-admin/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover";

interface CustomDatePickerProps {
  onCancel: () => void;
  onValidate: (range: { from: Date; to: Date }) => void;
}

export const CustomDatePicker = ({ onCancel, onValidate }: CustomDatePickerProps) => {
    const [startDate, setStartDate] = React.useState<Date | undefined>();
    const [endDate, setEndDate] = React.useState<Date | undefined>();

    // Ferme le popover après sélection
    const handleStartDateSelect = (date?: Date) => {
        setStartDate(date);
    };

    const handleEndDateSelect = (date?: Date) => {
        setEndDate(date);
    };

    return (
        <div className="flex flex-wrap items-center gap-2 rounded-lg border p-2 bg-background shadow-sm">
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" className="w-[200px] font-normal justify-start text-left">
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {startDate ? format(startDate, 'd LLL y', { locale: fr }) : <span>Date de début</span>}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                    <Calendar
                        mode="single"
                        selected={startDate}
                        onSelect={handleStartDateSelect}
                        initialFocus
                        locale={fr}
                    />
                </PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" className="w-[200px] font-normal justify-start text-left">
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {endDate ? format(endDate, 'd LLL y', { locale: fr }) : <span>Date de fin</span>}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                    <Calendar
                        mode="single"
                        selected={endDate}
                        onSelect={handleEndDateSelect}
                        initialFocus
                        locale={fr}
                    />
                </PopoverContent>
            </Popover>
            <Button 
                className="bg-green-600 hover:bg-green-700" 
                onClick={() => onValidate({ from: startDate!, to: endDate! })} 
                disabled={!startDate || !endDate}
            >
                Valider
            </Button>
            <Button variant="ghost" onClick={onCancel}>
                Annuler
            </Button>
        </div>
    );
};


# --- hooks/useSpeechRecognition.ts ---
// frontend-shadcn/src/hooks/useSpeechRecognition.ts
import { useState, useEffect, useRef } from 'react';

// --- Définitions de types ---
interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  onresult: (event: SpeechRecognitionEvent) => void;
  onerror: (event: SpeechRecognitionErrorEvent) => void;
  onend: () => void;
  start: () => void;
  stop: () => void;
}
type SpeechRecognitionConstructor = new () => SpeechRecognition;
interface SpeechRecognitionEvent extends Event {
  resultIndex: number;
  results: SpeechRecognitionResultList;
}
interface SpeechRecognitionErrorEvent extends Event {
  error: string;
}
interface CustomWindow extends Window {
  SpeechRecognition?: SpeechRecognitionConstructor;
  webkitSpeechRecognition?: SpeechRecognitionConstructor;
}
declare const window: CustomWindow;
const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;

export const useSpeechRecognition = () => {
  const [text, setText] = useState('');
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const stopIntentionallyRef = useRef(false);
  const finalTranscriptRef = useRef('');

  useEffect(() => {
    if (!SpeechRecognitionAPI) {
      console.warn("L'API Web Speech n'est pas supportée par ce navigateur.");
      return;
    }
    const recognition = new SpeechRecognitionAPI();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'fr-FR';

    recognition.onresult = (event: SpeechRecognitionEvent) => {
      let interimTranscript = '';
      for (let i = event.resultIndex; i < event.results.length; ++i) {
        if (event.results[i].isFinal) {
          finalTranscriptRef.current += event.results[i][0].transcript;
        } else {
          interimTranscript += event.results[i][0].transcript;
        }
      }
      setText(finalTranscriptRef.current + interimTranscript);
    };

    recognition.onerror = (event: SpeechRecognitionErrorEvent) => {
      console.error('Erreur de reconnaissance vocale:', event.error);
      setIsListening(false);
    };
    
    recognition.onend = () => {
      if (!stopIntentionallyRef.current) {
        try { recognition.start(); } 
        catch (error) { setIsListening(false); }
      } else {
        setIsListening(false);
      }
    };
    
    recognitionRef.current = recognition;
    return () => { recognitionRef.current?.stop(); };
  }, []);

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      finalTranscriptRef.current = ''; 
      setText('');
      stopIntentionallyRef.current = false;
      setIsListening(true);
      try { recognitionRef.current.start(); } 
      catch (error) { setIsListening(false); }
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      stopIntentionallyRef.current = true;
      recognitionRef.current.stop();
    }
  };

  return { text, isListening, startListening, stopListening, hasSupport: !!SpeechRecognitionAPI };
};


# --- components/ui-admin/table.tsx ---
// frontend-shadcn/src/components/ui/table.tsx

import * as React from "react"
import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  // + Ajout du div wrapper pour le scroll horizontal
  <div className="relative w-full overflow-auto"> 
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

// ... le reste du fichier ne change pas ...
const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


# --- layout/UserNavMenu.tsx ---
// src/layout/UserNavMenu.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui-admin/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { ChevronsUpDown, LogOut } from 'lucide-react';
import { cn } from '@/lib/utils';

interface UserNavMenuProps {
  isCollapsed: boolean;
}

export function UserNavMenu({ isCollapsed }: UserNavMenuProps) {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };

  const initials = user.name.split(' ').map((n) => n[0]).join('').toUpperCase();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className={cn(
            `w-full h-auto px-2 py-2 transition-all duration-300 text-black hover:bg-zinc-100`,
            isCollapsed ? 'justify-center' : 'justify-between'
          )}
        >
          <div className="flex items-center gap-3">
            <Avatar className="h-8 w-8"><AvatarFallback>{initials}</AvatarFallback></Avatar>
            {!isCollapsed && (
              <div className="flex flex-col items-start truncate text-left">
                <span className="text-sm font-medium">{user.name}</span>
                <span className="text-xs text-muted-foreground">{user.role}</span>
              </div>
            )}
          </div>
          {!isCollapsed && <ChevronsUpDown className="h-4 w-4 text-muted-foreground" />}
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.name}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.role}@winvest.capital
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer text-red-600 focus:text-red-600 focus:bg-red-50">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Déconnexion</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


# --- components/ui-admin/DatePickerWithPresets.tsx ---
// src/components/ui/DatePickerWithPresets.tsx

import { format } from "date-fns"
import { fr } from "date-fns/locale"
import type { DateRange } from "react-day-picker"
import { Calendar as CalendarIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui-admin/button"
import { Calendar } from "@/components/ui-admin/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover"

interface DatePickerWithPresetsProps {
  className?: string
  selectedDate: DateRange | undefined
  onDateChange: (date: DateRange | undefined) => void
  onPresetSelect: (preset: string) => void
}

export function DatePickerWithPresets({
  className,
  selectedDate,
  onDateChange,
  onPresetSelect,
}: DatePickerWithPresetsProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          id="date"
          variant="outline"
          className={cn(
            "w-[280px] justify-start text-left font-normal h-11",
            !selectedDate && "text-muted-foreground",
            className
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {selectedDate?.from ? (
            selectedDate.to ? (
              <>
                {format(selectedDate.from, "d LLL y", { locale: fr })} -{" "}
                {format(selectedDate.to, "d LLL y", { locale: fr })}
              </>
            ) : (
              format(selectedDate.from, "d LLL y", { locale: fr })
            )
          ) : (
            <span>Choisir une période</span>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="flex w-auto flex-col space-y-2 p-2" align="end">
        <div className="flex items-center gap-2">
            <Button variant="ghost" size="sm" onClick={() => onPresetSelect('week')}>Cette semaine</Button>
            <Button variant="ghost" size="sm" onClick={() => onPresetSelect('month')}>Ce mois</Button>
            <Button variant="ghost" size="sm" onClick={() => onPresetSelect('year')}>Cette année</Button>
        </div>
        <div className="rounded-md border">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={selectedDate?.from}
            selected={selectedDate}
            onSelect={onDateChange}
            numberOfMonths={2}
            locale={fr}
          />
        </div>
      </PopoverContent>
    </Popover>
  )
}


# --- pages/admin/statitistiques/LeaderboardTable.tsx ---
// src/pages/admin/statitistiques/LeaderboardTable.tsx

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui-admin/table';
import { Badge } from '@/components/ui-admin/badge';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';

interface Performer {
  rank: number;
  name: string;
  avatar: string;
  value: number;
  change: number;
}

interface LeaderboardTableProps {
  title: string;
  description: string;
  data: Performer[];
  unit: string;
}

const rankColor = (rank: number) => {
    if (rank === 1) return "bg-yellow-400/20 text-yellow-700 border-yellow-400/50";
    if (rank === 2) return "bg-slate-400/20 text-slate-700 border-slate-400/50";
    if (rank === 3) return "bg-orange-400/20 text-orange-700 border-orange-400/50";
    return "bg-muted text-muted-foreground border-transparent";
}

export const LeaderboardTable = ({ title, description, data, unit }: LeaderboardTableProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent className="p-0">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">Rank</TableHead>
              <TableHead>Nom</TableHead>
              <TableHead className="text-right">{unit}</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((item) => (
              <TableRow key={item.rank}>
                <TableCell>
                    <Badge variant="outline" className={rankColor(item.rank)}>
                        {item.rank}
                    </Badge>
                </TableCell>
                <TableCell className="font-medium flex items-center gap-3">
                    <Avatar className="h-8 w-8">
                        <AvatarFallback>{item.avatar}</AvatarFallback>
                    </Avatar>
                    {item.name}
                </TableCell>
                <TableCell className="text-right font-bold text-lg">{item.value}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/Combobox.tsx ---
// frontend-shadcn/src/components/ui/Combobox.tsx
"use client"

import * as React from "react"
import { Check, ChevronsUpDown } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui-admin/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui-admin/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui-admin/popover"

interface ComboboxProps {
  options: { value: string; label: string }[];
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  emptyMessage?: string;
}

export function Combobox({ options, value, onChange, placeholder = "Sélectionner...", emptyMessage = "Aucun résultat." }: ComboboxProps) {
  const [open, setOpen] = React.useState(false)

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between h-8"
        >
          {value
            ? options.find((option) => option.value === value)?.label
            : placeholder}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-full p-0" style={{minWidth: "var(--radix-popover-trigger-width)"}}>
        <Command>
          <CommandInput placeholder="Rechercher..." />
          <CommandList>
            <CommandEmpty>{emptyMessage}</CommandEmpty>
            <CommandGroup>
              {options.map((option) => (
                <CommandItem
                  key={option.value}
                  value={option.value}
                  onSelect={(currentValue) => {
                    onChange(currentValue === value ? "" : currentValue)
                    setOpen(false)
                  }}
                >
                  <Check
                    className={cn(
                      "mr-2 h-4 w-4",
                      value === option.value ? "opacity-100" : "opacity-0"
                    )}
                  />
                  {option.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )
}


# --- layout/UserNav.tsx ---
// src/layout/UserNav.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuGroup,
} from '@/components/ui-admin/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { LogOut, User as UserIcon } from 'lucide-react';

export function UserNav() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };

  const initials = (user.name || '').split(' ').map((n) => n[0]).join('').toUpperCase();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-10 w-10 rounded-full hover:bg-black/10">
          <Avatar className="h-10 w-10 border-2 border-white/50">
            <AvatarFallback className="bg-transparent text-white font-bold">{initials}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.name}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.email || `${user.role}@winvest.capital`}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem className="cursor-pointer">
            <UserIcon className="mr-2 h-4 w-4" />
            <span>Profil</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer text-red-600 focus:text-red-600 focus:bg-red-50">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Déconnexion</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


# --- components/ui-admin/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



# --- layout/AdminHeader.tsx ---
// src/layout/AdminHeader.tsx
import { useState } from 'react'; // 'useEffect' a été retiré car non utilisé
import { Button } from '@/components/ui-admin/button';
import { Sheet, SheetContent, SheetHeader, SheetTrigger } from '@/components/ui-admin/sheet';
import { Menu } from 'lucide-react';
import { AdminNavContent } from './AdminNavContent';
import { BrandLogo } from '@/components/ui-commercial/BrandLogo';
import { DateTimeDisplay } from './DateTimeDisplay';
import { UserNav } from './UserNav';

const AdminHeader = () => {
  const [isSheetOpen, setIsSheetOpen] = useState(false);

  return (
    <header className="sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b border-b-[hsl(var(--winvest-blue-moyen))] bg-[hsl(var(--winvest-blue-moyen))] px-4 text-white sm:px-6">
      {/* Section de gauche : Titre et menu hamburger pour mobile */}
      <div className="flex items-center gap-4">
        <div className="lg:hidden">
          <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon" className="border-white/30 bg-transparent text-white hover:bg-black/10">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[250px] p-0 bg-white">
              <SheetHeader className='p-4 border-b'><BrandLogo /></SheetHeader>
              <div className="py-4">
                <AdminNavContent isCollapsed={false} onLinkClick={() => setIsSheetOpen(false)} />
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <h1 className="text-xl md:text-2xl font-bold">Espace Admin</h1>
      </div>
      
      {/* Section de droite : Date, Heure et Menu Utilisateur */}
      <div className="flex items-center gap-4">
        <DateTimeDisplay />
        <div className="border-l h-8"></div> {/* Votre séparateur est bien conservé */}
        <UserNav />
      </div>
    </header>
  );
};

export default AdminHeader;


# --- components/ui-admin/StatCard.tsx ---
// src/components/ui/StatCard.tsx

import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui-admin/card';
import type { LucideIcon } from 'lucide-react';
import CountUp from 'react-countup';
import { cn } from '@/lib/utils';
import { ArrowUp, ArrowDown } from 'lucide-react'; // <-- 1. Importer les icônes

interface StatCardProps {
  title: string;
  value: number;
  Icon: LucideIcon;
  prefix?: string;
  suffix?: string;
  color?: string;
  change?: number; // <-- 2. Ajouter la nouvelle prop 'change'
}

const StatCard = ({ title, value, Icon, prefix, suffix, color, change }: StatCardProps) => {
  // 3. Déterminer si le changement est positif ou non
  const isPositive = change !== undefined && change >= 0;

  return (
    <Card className="transition-transform duration-300 hover:scale-[1.03] hover:shadow-lg">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className={cn("h-4 w-4 text-muted-foreground", color)} />
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">
          <CountUp
            start={0}
            end={value}
            duration={1.5}
            separator=" "
            prefix={prefix}
            suffix={suffix}
            decimals={value % 1 !== 0 ? 1 : 0} 
          />
        </div>
        {/* --- 4. LOGIQUE POUR AFFICHER L'ÉVOLUTION --- */}
        {change !== undefined && (
          <p className={cn(
             "text-xs text-muted-foreground flex items-center gap-1 mt-1",
             isPositive ? "text-emerald-600" : "text-red-600"
          )}>
            {isPositive ? <ArrowUp className="h-3 w-3" /> : <ArrowDown className="h-3 w-3" />}
            <span>
              {isPositive && '+'}{change.toFixed(1)}% vs période précédente
            </span>
        </p>
        )}
      </CardContent>
    </Card>
  );
};

export default StatCard;


# --- layout/AdminSidebar.tsx ---
// src/layout/AdminSidebar.tsx
import { Button } from '@/components/ui-admin/button';
import { PanelLeftClose, PanelLeftOpen } from 'lucide-react';
import { AdminNavContent } from './AdminNavContent';
import { UserNavMenu } from './UserNavMenu';
import logo from '@/assets/logo.png';

interface AdminSidebarProps {
  isCollapsed: boolean;
  toggleSidebar: () => void;
}

export const AdminSidebar = ({ isCollapsed, toggleSidebar }: AdminSidebarProps) => {
  return (
    <aside
      className={`hidden lg:flex flex-col bg-[#FAFAFA] transition-all duration-300 sticky top-0 h-screen ${
        isCollapsed ? 'w-20' : 'w-64'
      }`}
    >
      {/* HEADER CORRIGÉ */}
      <div
        className={`flex items-center h-20 px-4 shrink-0 ${ // shrink-0 empêche le header de se réduire
          isCollapsed ? 'justify-center' : 'justify-between'
        }`}
      >
        {/* Le logo n'est visible que si la sidebar est dépliée */}
        {!isCollapsed && (
          // Le logo est dans un conteneur pour ne pas perturber le flexbox
          <div className="flex-1"> 
            <img
              src={logo}
              alt="Logo Groupe Finanssor"
              className="h-30 w-auto object-contain -translate-x-6" // Votre style est conservé
            />
          </div>
        )}

        {/* Bouton pour plier/déplier */}
        <Button
          variant="ghost"
          size="icon"
          onClick={toggleSidebar}
        >
          {isCollapsed ? <PanelLeftOpen className="h-5 w-5" /> : <PanelLeftClose className="h-5 w-5" />}
        </Button>
      </div>

      {/* NAVIGATION */}
      <div className="flex-1 overflow-y-auto"> {/* Ajout de overflow-y-auto pour les petits écrans */}
        <AdminNavContent isCollapsed={isCollapsed} />
      </div>

      {/* USER MENU */}
      <div className="p-2 border-t mt-auto shrink-0">
        <UserNavMenu isCollapsed={isCollapsed} />
      </div>
    </aside>
  );
};


# --- layout/CommercialHeader.tsx ---
// src/layout/CommercialHeader.tsx
import { useState } from 'react';
import { Button } from '@/components/ui-admin/button';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui-admin/sheet';
import { Menu } from 'lucide-react';
import { CommercialNavContent } from './CommercialNavContent';
import { BrandLogo } from '@/components/ui-commercial/BrandLogo';
import { DateTimeDisplay } from './DateTimeDisplay';
import { UserNav } from './UserNav';

const CommercialHeader = () => {
  const [isSheetOpen, setIsSheetOpen] = useState(false);

  return (
    <header className="sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b border-b-[hsl(var(--winvest-blue-moyen))] bg-[hsl(var(--winvest-blue-moyen))] px-4 text-white sm:px-6">
      
      {/* Section de gauche */}
      <div className="flex items-center gap-4">
        <div className="lg:hidden">
          <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon" className="border-white/30 bg-transparent text-white hover:bg-black/10">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[250px] p-0 bg-white">
              <div className="p-4 border-b"><BrandLogo /></div>
              <div className="py-4 px-2">
                <CommercialNavContent isCollapsed={false} onLinkClick={() => setIsSheetOpen(false)} />
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <h1 className="text-xl md:text-2xl font-bold">Espace Commercial</h1>
      </div>
      
      {/* Section de droite */}
      <div className="flex items-center gap-4">
        <DateTimeDisplay />
        <UserNav />
      </div>
    </header>
  );
};

export default CommercialHeader;


# --- components/ui-admin/GenericRadialBarChart.tsx ---
// src/components/charts/GenericRadialBarChart.tsx

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { ResponsiveContainer, PolarAngleAxis, RadialBarChart, RadialBar } from 'recharts';

interface GenericRadialChartProps {
  title: string;
  value: number;
  total: number;
  color: string;
}

export const GenericRadialBarChart = ({ title, value, total, color }: GenericRadialChartProps) => {
  const percentage = total > 0 ? (value / total) * 100 : 0;
  const data = [{ name: 'objectif', value: percentage }];

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent className="flex-1 flex justify-center items-center relative">
        <ResponsiveContainer width="100%" height={200}>
          <RadialBarChart
            innerRadius="80%"
            outerRadius="100%"
            data={data}
            startAngle={90}
            endAngle={-270}
            cx="50%"
            cy="50%"
            barSize={15}
          >
            <PolarAngleAxis
              type="number"
              domain={[0, 100]}
              angleAxisId={0}
              tick={false}
            />
            <RadialBar
              background
              dataKey="value"
              cornerRadius={10}
              angleAxisId={0}
              className={color} // Utilise la classe de couleur passée
            />
          </RadialBarChart>
        </ResponsiveContainer>
        <div className="absolute flex flex-col items-center justify-center">
          <span className="text-4xl font-bold">{Math.round(percentage)}%</span>
          <span className="text-sm text-muted-foreground">{value} / {total}</span>
        </div>
      </CardContent>
    </Card>
  );
};


# --- layout/DateTimeDisplay.tsx ---
    // src/layout/DateTimeDisplay.tsx
import { useState, useEffect } from 'react';

// Hook personnalisé pour formater la date et l'heure
const useDateTime = () => {
    const [date, setDate] = useState(new Date());

    useEffect(() => {
        const timerId = setInterval(() => setDate(new Date()), 1000);
        return () => clearInterval(timerId);
    }, []);

    const day = date.toLocaleDateString('fr-FR', { weekday: 'long' });
    const dayNumber = date.getDate();
    const month = date.toLocaleDateString('fr-FR', { month: 'long' });

    const time = date.toLocaleTimeString('fr-FR', {
        hour: '2-digit',
        minute: '2-digit',
    });
    const seconds = date.toLocaleTimeString('fr-FR', { second: '2-digit' });

    // Capitaliser la première lettre du jour et du mois
    const formattedDay = day.charAt(0).toUpperCase() + day.slice(1);
    const formattedMonth = month.charAt(0).toUpperCase() + month.slice(1);

    return {
        dateString: `${formattedDay} ${dayNumber} ${formattedMonth}`,
        timeString: time,
        secondsString: seconds,
    };
};


export const DateTimeDisplay = () => {
  const { dateString, timeString} = useDateTime();

  return (
    <div className="hidden md:flex items-center gap-4 bg-black/10 px-4 py-1.5 rounded-lg border border-white/90">
      {/* Section Date */}
      <div className="text-right">
        <span className="text-sm font-semibold tracking-wide">{dateString}</span>
      </div>

      {/* Séparateur */}
      <div className="h-6 w-px bg-white/30"></div>

      {/* Section Heure */}
      <div className="flex items-baseline gap-1.5">
        <span className="text-2xl font-bold tracking-tighter">{timeString}</span>
        {/* Les secondes clignotent avec une opacité variable */}
      </div>
    </div>
  );
};


# --- services/commercial.service.ts ---
// frontend-shadcn/src/services/commercial.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/commerciaux';

export type CommercialFromAPI = {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  equipeId?: string;
  managerId: string;
};

type CreateCommercialPayload = {
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
  equipeId?: string;
  managerId: string; // Ajout du managerId
};

// AJOUT: Type pour la mise à jour
type UpdateCommercialPayload = Partial<CreateCommercialPayload>;

const getCommerciaux = async (): Promise<CommercialFromAPI[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const createCommercial = async (data: CreateCommercialPayload): Promise<CommercialFromAPI> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

// AJOUT: Fonction pour mettre à jour un commercial
const updateCommercial = async (id: string, data: UpdateCommercialPayload): Promise<CommercialFromAPI> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};

const deleteCommercial = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};
// frontend-shadcn/src/services/commercial.service.ts
// ... (haut du fichier inchangé)

// AJOUT DE LA NOUVELLE FONCTION
const getCommercialDetails = async (id: string): Promise<any> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

export const commercialService = {
  getCommerciaux,
  getCommercialDetails, // AJOUT
  createCommercial,
  updateCommercial,
  deleteCommercial,
};



# --- components/ui-admin/badge.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }



# --- services/equipe.service.ts ---
// frontend-shadcn/src/services/equipe.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/equipes';

export interface EquipeFromApi {
  id: string;
  nom: string;
  managerId: string;
}

export interface EquipeDetailsFromApi {
    id: string;
    nom: string;
    manager: string;
    stats: {
        contratsSignes: number;
        rdvPris: number;
        perfMoyenne: number;
        classementGeneral: number | string;
        nbCommerciaux: number;
    };
    perfHistory: { name: string; perf: number }[];
    commerciaux: {
        id: string;
        nom: string;
        prenom: string;
        email: string;
        classement: number;
    }[];
}

const getEquipes = async (): Promise<EquipeFromApi[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getEquipeDetails = async (id: string): Promise<EquipeDetailsFromApi> => {
    const response = await axios.get(`${API_URL}/${id}/details`);
    return response.data;
};

const createEquipe = async (equipeData: { nom: string; managerId: string }) => {
  const response = await axios.post(API_URL, equipeData);
  return response.data;
};

const updateEquipe = async (id: string, equipeData: { nom: string; managerId: string }) => {
  const response = await axios.patch(`${API_URL}/${id}`, equipeData);
  return response.data;
};

const deleteEquipe = async (id: string) => {
  const response = await axios.delete(`${API_URL}/${id}`);
  return response.data;
};

export const equipeService = {
  getEquipes,
  getEquipeDetails,
  createEquipe,
  updateEquipe,
  deleteEquipe,
};


# --- pages/auth/Login.tsx ---
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';

const Login = () => {
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleLogin = (role: 'admin' | 'manager' | 'directeur' | 'backoffice' | 'commercial') => {
    login(role);
    navigate('/'); // On redirige vers la racine, qui s'occupera de dispatcher vers le bon dashboard
  };

  return (
    <div className="flex items-center justify-center h-screen bg-secondary">
      <Card className="w-[400px]">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl">Finanssor</CardTitle>
          <CardDescription>Veuillez vous connecter en choisissant un rôle.</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={() => handleLogin('admin')}>Connexion Admin</Button>
          <Button variant="outline" onClick={() => handleLogin('manager')}>Connexion Manager</Button>
          <Button variant="outline" onClick={() => handleLogin('directeur')}>Connexion Directeur</Button>
          <Button variant="outline" onClick={() => handleLogin('backoffice')}>Connexion Back-office</Button>
          <Button variant="outline" onClick={() => handleLogin('commercial')}>Connexion Commercial</Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default Login;


# --- services/statistics.service.ts ---
// frontend-shadcn/src/services/statistics.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/statistics';

// Définition des types pour les filtres
export type PeriodType = 'WEEKLY' | 'MONTHLY' | 'YEARLY';
export type StatEntityType = 'COMMERCIAL' | 'EQUIPE' | 'MANAGER';

export interface StatisticsQuery {
  period: PeriodType;
  entityType?: StatEntityType;
  entityId?: string;
}

// Le service pour récupérer les statistiques
const getStatistics = async (query: StatisticsQuery) => {
  // On utilise `params` pour qu'axios formate correctement les query params dans l'URL
  const response = await axios.get(API_URL, { params: query });
  return response.data;
};

const getStatsForCommercial = async (commercialId: string) => {
  const response = await axios.get(`${API_URL}/commercial/${commercialId}`);
  return response.data;
};

const getCommercialHistory = async (commercialId: string) => {
  const response = await axios.get(`${API_URL}/commercial/${commercialId}/history`);
  return response.data;
};

const getStatsForManager = async (managerId: string) => {
  const response = await axios.get(`${API_URL}/manager/${managerId}`);
  return response.data;
};

const getManagerPerformanceHistory = async (managerId: string) => {
  const response = await axios.get(`${API_URL}/manager/${managerId}/history`);
  return response.data;
};

export const statisticsService = {
  getStatistics,
  getStatsForCommercial,
  getCommercialHistory,
  getStatsForManager,
  getManagerPerformanceHistory,
};


# --- layout/LogoutButton.tsx ---
// src/layout/LogoutButton.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"
import { LogOut } from 'lucide-react';
import { cn } from '@/lib/utils';

interface LogoutButtonProps {
  // Contexte pour adapter le style (fond bleu vs fond blanc)
  context?: 'header' | 'sidebar';
}

export function LogoutButton({ context = 'sidebar' }: LogoutButtonProps) {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };
  
  // Styles différents pour le bouton selon où il se trouve
  const buttonVariant = context === 'header' ? 'ghost' : 'outline';
  const buttonClasses = context === 'header' ? 'text-white hover:bg-black/10 hover:text-white border-white/30' : '';

  return (
    <TooltipProvider delayDuration={100}>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant={buttonVariant}
            size="icon"
            onClick={handleLogout}
            className={cn(buttonClasses)}
          >
            <LogOut className="h-4 w-4" />
            <span className="sr-only">Déconnexion</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>Déconnexion</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}


# --- services/immeuble.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/immeubles';

export interface ImmeubleFromApi {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  zone: { nom: string };
  prospectors: { prenom: string; nom: string }[];
  status: string;
}

export interface ImmeubleDetailsFromApi extends ImmeubleFromApi {
  stats: {
    contratsSignes: number;
    rdvPris: number;
  };
  nbPortesTotal: number;
  prospectingMode: 'SOLO' | 'DUO';
  portes: { id: string; numeroPorte: string; statut: string }[];
}

const getImmeubles = async (): Promise<ImmeubleFromApi[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getImmeubleDetails = async (id: string): Promise<ImmeubleDetailsFromApi> => {
  const response = await axios.get(`${API_URL}/${id}/details`);
  return response.data;
};

const createImmeuble = async (immeubleData: any) => {
  const response = await axios.post(API_URL, immeubleData);
  return response.data;
};

const updateImmeuble = async (id: string, immeubleData: any) => {
  const response = await axios.patch(`${API_URL}/${id}`, immeubleData);
  return response.data;
};

const deleteImmeuble = async (id: string) => {
  const response = await axios.delete(`${API_URL}/${id}`);
  return response.data;
};

export const immeubleService = {
  getImmeubles,
  getImmeubleDetails,
  createImmeuble,
  updateImmeuble,
  deleteImmeuble,
};



# --- services/porte.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/portes';

export type PorteFromAPI = {
  id: string;
  numeroPorte: string;
  status: string; // Assuming string for now, can be refined with an enum if available
  nbPassages: number;
  commentaire: string | null;
  immeubleId: string;
};

type CreatePortePayload = {
  numeroPorte: string;
  status: string;
  nbPassages?: number;
  commentaire?: string;
  repassage?: boolean;
  immeubleId: string;
};

type UpdatePortePayload = Partial<CreatePortePayload>;

const getPortes = async (): Promise<PorteFromAPI[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getPorteDetails = async (id: string): Promise<PorteFromAPI> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

const createPorte = async (data: CreatePortePayload): Promise<PorteFromAPI> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

const updatePorte = async (id: string, data: UpdatePortePayload): Promise<PorteFromAPI> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};

const deletePorte = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

export const porteService = {
  getPortes,
  getPorteDetails,
  createPorte,
  updatePorte,
  deletePorte,
};



# --- services/zone.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/zones';

export interface ZoneFromApi {
  id: string;
  nom: string;
  couleur: string;
  latitude: number;
  longitude: number;
  rayonMetres: number;
  createdAt: string;
}

export interface ZoneDetailsFromApi extends ZoneFromApi {
  stats: {
    nbImmeubles: number;
    totalContratsSignes: number;
    totalRdvPris: number;
  };
  immeubles: any[]; // Pour l'instant, on garde any pour la simplicité
}

const getZones = async (): Promise<ZoneFromApi[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getZoneDetails = async (id: string): Promise<ZoneDetailsFromApi> => {
  const response = await axios.get(`${API_URL}/${id}/details`);
  return response.data;
};

const createZone = async (zoneData: any) => {
  const response = await axios.post(API_URL, zoneData);
  return response.data;
};

const updateZone = async (id: string, zoneData: any) => {
  const response = await axios.patch(`${API_URL}/${id}`, zoneData);
  return response.data;
};

const deleteZone = async (id: string) => {
  const response = await axios.delete(`${API_URL}/${id}`);
  return response.data;
};

export const zoneService = {
  getZones,
  getZoneDetails,
  createZone,
  updateZone,
  deleteZone,
};



# --- components/ui-admin/checkbox.tsx ---
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }



# --- pages/admin/suivi/SuiviSidebar.tsx ---
// src/pages/admin/suivi/SuiviSidebar.tsx
import { AudioPlayer } from './AudioPlayer';
import { HistoryList } from './HistoryList';
import type { Commercial, Transcription } from './types';

interface SuiviSidebarProps {
  activeCommercial: Commercial | null;
  transcriptions: Transcription[];
  commercialsMap: { [id: string]: { name: string; avatarFallback: string } };
  onHistoryItemClick: (transcription: Transcription) => void;
  liveText: string;
  isProspecting: boolean;
  audioChunks: Blob[]; // NOUVEAU
}

export const SuiviSidebar = (props: SuiviSidebarProps) => {
  return (
    <div className="bg-zinc-50 rounded-lg flex flex-col h-full gap-6 p-4 border border-zinc-200 shadow-sm">
      <AudioPlayer 
        activeCommercial={props.activeCommercial}
        liveText={props.liveText}
        isProspecting={props.isProspecting}
        audioChunks={props.audioChunks} // Transmission des données audio
      />
      <HistoryList 
        transcriptions={props.transcriptions} 
        onHistoryItemClick={props.onHistoryItemClick}
        commercials={props.commercialsMap}
      />
    </div>
  );
};


# --- components/ui-admin/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }



# --- components/ui-admin/Modal.tsx ---
// src/components/ui/Modal.tsx
import type { ReactNode } from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  children: ReactNode;
}

export const Modal = ({ isOpen, onClose, children }: ModalProps) => {
  if (!isOpen) {
    return null;
  }

  return (
    // Le conteneur principal qui couvre toute la page
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/80 animate-in fade-in-0"
      onClick={onClose} // Ferme la modale si on clique sur le fond
    >
      {/* La boîte de dialogue elle-même */}
      <div
        className="relative bg-white rounded-lg shadow-xl p-6 w-full max-w-md animate-in zoom-in-95"
        onClick={(e) => e.stopPropagation()} // Empêche la fermeture si on clique à l'intérieur
      >
        {/* Le contenu que l'on passera à la modale */}
        {children}
      </div>
    </div>
  );
};


# --- layout/AdminLayout.tsx ---
// src/layout/AdminLayout.tsx
import { useState } from 'react';
import { Outlet } from 'react-router-dom';
import { AdminSidebar } from './AdminSidebar';
import AdminHeader from './AdminHeader';

const AdminLayout = () => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div className="flex h-screen bg-muted/40">
      <AdminSidebar isCollapsed={isCollapsed} toggleSidebar={toggleSidebar} />
      <div className="flex-1 flex flex-col">
        <AdminHeader />
        <main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default AdminLayout;


# --- pages/admin/suivi/types.ts ---
// src/pages/admin/suivi/types.ts

// Type pour un commercial, peut être enrichi
export interface Commercial {
    id: string;
    name: string;
    avatarFallback: string;
    position: [number, number]; // [latitude, longitude]
    equipe: string;
  }
  
  // Type pour une entrée de l'historique des transcriptions
  export interface Transcription {
    id: string;
    commercialId: string;
    commercialName: string;
    date: Date;
    snippet: string; // Un extrait de la transcription
    fullText: string; // La transcription complète
  }
  
  // Type pour une zone géographique
  export interface Zone {
    id: string;
    name: string;
    color: string;
    latlng: [number, number];
    radius: number;
  }


# --- pages/admin/Dashboard/TableSkeleton.tsx ---
// frontend-shadcn/src/pages/admin/TableSkeleton.tsx
import { Skeleton } from "@/components/ui-admin/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui-admin/card";

export const TableSkeleton = () => (
  <Card className="animate-in fade-in-0 duration-500">
    <CardHeader>
      <Skeleton className="h-6 w-1/2" />
    </CardHeader>
    <CardContent className="space-y-3">
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-10 w-full" />
    </CardContent>
  </Card>
);


# --- routes/PrivateRoute.tsx ---
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const PrivateRoute = () => {
  const { isAuthenticated } = useAuth();
  // Si l'utilisateur est authentifié, on affiche le contenu de la route (via Outlet)
  // Sinon, on le redirige vers la page de login
  return isAuthenticated ? <Outlet /> : <Navigate to="/login" replace />;
};

export default PrivateRoute;


# --- components/ui-admin/skeleton.tsx ---
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }



# --- pages/backoffice/DashboardBackoffice.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardBackoffice = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau office - Admin</h1>
      </div>
    );
  };
  export default DashboardBackoffice;


# --- pages/manager/DashboardManager.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardManager = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau de Bord - Admin</h1>
      </div>
    );
  };
  export default DashboardManager;
