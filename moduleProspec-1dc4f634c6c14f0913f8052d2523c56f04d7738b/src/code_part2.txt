

# --- pages/admin/statitistiques/StatistiquesPage.tsx ---
// src/pages/admin/statistiques/StatistiquesPage.tsx
import { useState, useMemo, useEffect } from 'react';
import { statisticsService } from '@/services/statistics.service';
import type { PeriodType, StatEntityType } from '@/services/statistics.service';
import { motion } from 'framer-motion';

// --- Imports des Composants ---
import StatCard from '@/components/ui-admin/StatCard';
import { GenericBarChart } from '@/components/charts/GenericBarChart';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { LeaderboardTable } from './LeaderboardTable';
import { Button } from '@/components/ui-admin/button';
import { cn } from '@/lib/utils';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { StatistiquesSkeleton } from './StatistiquesSkeleton';

// --- Imports des Icônes ---
import { 
    BarChart3, Briefcase, FileSignature, Target, X
} from 'lucide-react';
import { managerService } from '@/services/manager.service';
import { equipeService } from '@/services/equipe.service';
import { commercialService } from '@/services/commercial.service';

const StatistiquesPage = () => {
    const [timeFilter, setTimeFilter] = useState<PeriodType>('MONTH');
    const [entityType, setEntityType] = useState<StatEntityType | 'ALL'>('ALL');
    const [entityId, setEntityId] = useState<string | undefined>(undefined);
    
    const [statsData, setStatsData] = useState<any>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const [entities, setEntities] = useState<{ id: string, nom: string }[]>([]);
    const [loadingEntities, setLoadingEntities] = useState(false);

    useEffect(() => {
        const fetchEntities = async () => {
            if (entityType === 'ALL') {
                setEntities([]);
                setEntityId(undefined);
                return;
            }
            setLoadingEntities(true);
            try {
                let data: any[] = [];
                if (entityType === 'MANAGER') {
                    data = await managerService.getManagers();
                } else if (entityType === 'EQUIPE') {
                    data = await equipeService.getEquipes();
                } else if (entityType === 'COMMERCIAL') {
                    data = await commercialService.getCommerciaux();
                }
                setEntities(data.map((e: any) => ({ id: e.id, nom: e.nom || `${e.prenom} ${e.nom}` })));
            } catch (err) {
                console.error("Failed to fetch entities:", err);
                setEntities([]);
            } finally {
                setLoadingEntities(false);
            }
        };

        fetchEntities();
    }, [entityType]);

    useEffect(() => {
        const fetchStatistics = async () => {
            setLoading(true);
            setError(null);
            try {
                const query = {
                    period: timeFilter,
                    ...(entityType !== 'ALL' && { entityType }),
                    ...(entityType !== 'ALL' && entityId && { entityId }),
                };
                const data = await statisticsService.getStatistics(query);
                setStatsData(data);
            } catch (err) {
                setError("Impossible de charger les statistiques.");
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        fetchStatistics();
    }, [timeFilter, entityType, entityId]);

    const handleEntityTypeChange = (value: string) => {
        setEntityType(value as StatEntityType | 'ALL');
        setEntityId(undefined); // Reset entityId when type changes
    };

    const handleEntityIdChange = (value: string) => {
        setEntityId(value === 'ALL' ? undefined : value);
    };

    const currentData = useMemo(() => {
        if (!statsData) return null;
        
        const kpis = {
            contratsSignes: statsData.totalContrats ?? 0,
            rdvPris: statsData.totalRdv ?? 0,
            tauxConclusionGlobal: statsData.tauxConclusion ?? 0,
            portesVisitees: statsData.totalPortesVisitees ?? 0,
        };

        const mapToPerformer = (item: any, index: number) => ({
            rank: index + 1,
            name: item.name,
            avatar: item.name.substring(0, 2).toUpperCase(),
            value: item.value,
            change: 0, // La propriété 'change' n'est pas fournie par l'API
        });

        const leaderboards = {
            managers: statsData.leaderboards?.managers.map(mapToPerformer) ?? [],
            equipes: statsData.leaderboards?.equipes.map(mapToPerformer) ?? [],
            commerciaux: statsData.leaderboards?.commerciaux.map(mapToPerformer) ?? [],
        };

        const charts = {
            contratsParEquipe: statsData.contratsParEquipe ?? [],
            repartitionParManager: statsData.repartitionParManager ?? [],
        };

        return { kpis, leaderboards, charts };
    }, [statsData]);

    if (loading) return <StatistiquesSkeleton />;
    if (error) return <div className="text-red-500">{error}</div>;
    if (!currentData) return <div>Aucune donnée disponible.</div>;

    return (
        <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-8 p-8 bg-white min-h-screen font-sans"
        >
            <div className="flex flex-wrap gap-6 justify-between items-center pb-6 border-b border-gray-200">
                <h1 className="text-4xl font-extrabold tracking-tight text-gray-900">Tableau de Bord des Statistiques</h1>
                <div className="flex items-center gap-3">
                    {entityType === 'ALL' ? (
                        <Select onValueChange={handleEntityTypeChange} value={entityType}>
                            <SelectTrigger className="w-[200px] h-11 rounded-lg border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all duration-200">
                                <SelectValue placeholder="Filtrer par type d'entité" />
                            </SelectTrigger>
                            <SelectContent className="rounded-lg shadow-lg">
                                <SelectItem value="ALL">Toutes les Entités</SelectItem>
                                <SelectItem value="MANAGER">Manager</SelectItem>
                                <SelectItem value="EQUIPE">Équipe</SelectItem>
                                <SelectItem value="COMMERCIAL">Commercial</SelectItem>
                            </SelectContent>
                        </Select>
                    ) : (
                        <div className="flex items-center gap-2">
                            <Select onValueChange={handleEntityIdChange} value={entityId || 'ALL'} disabled={loadingEntities}>
                                <SelectTrigger className="w-[200px] h-11 rounded-lg border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all duration-200">
                                    <SelectValue placeholder="Choisir lequel" />
                                </SelectTrigger>
                                <SelectContent className="rounded-lg shadow-lg">
                                    <SelectItem value="ALL">Tous</SelectItem>
                                    {entities.map(e => <SelectItem key={e.id} value={e.id}>{e.nom}</SelectItem>)}
                                </SelectContent>
                            </Select>
                            <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => {
                                    setEntityType('ALL');
                                    setEntityId(undefined);
                                }}
                                className="h-9 w-9 rounded-full bg-gray-100 text-gray-500 hover:bg-gray-200 hover:text-gray-700 flex items-center justify-center p-0"
                            >
                                <X className="h-5 w-5" />
                            </Button>
                        </div>
                    )}
                </div>
                <div className="flex items-center gap-2 p-1 bg-white rounded-xl shadow-sm border border-gray-200">
                    <Button 
                        variant='ghost' 
                        onClick={() => setTimeFilter('WEEK')} 
                        className={cn(
                            "px-5 py-2 rounded-lg text-base font-medium transition-all duration-300", 
                            timeFilter === 'WEEK' 
                                ? 'bg-[hsl(var(--winvest-blue-moyen))] text-white shadow-md hover:bg-[hsl(var(--winvest-blue-moyen))] hover:text-white' 
                                : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                        )}
                    >Cette semaine</Button>
                    <Button 
                        variant='ghost' 
                        onClick={() => setTimeFilter('MONTH')} 
                        className={cn(
                            "px-5 py-2 rounded-lg text-base font-medium transition-all duration-300", 
                            timeFilter === 'MONTH' 
                                ? 'bg-[hsl(var(--winvest-blue-moyen))] text-white shadow-md hover:bg-[hsl(var(--winvest-blue-moyen))] hover:text-white' 
                                : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                        )}
                    >Ce mois</Button>
                    <Button 
                        variant='ghost' 
                        onClick={() => setTimeFilter('YEAR')} 
                        className={cn(
                            "px-5 py-2 rounded-lg text-base font-medium transition-all duration-300", 
                            timeFilter === 'YEAR' 
                                ? 'bg-[hsl(var(--winvest-blue-moyen))] text-white shadow-md hover:bg-[hsl(var(--winvest-blue-moyen))] hover:text-white' 
                                : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                        )}
                    >Cette année</Button>
                </div>
            </div>

            <section className="mt-8">
                <h2 className="text-2xl font-bold mb-6 text-gray-800">Indicateurs Clés de Performance (KPIs)</h2>
                <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
                    <StatCard title="Contrats Signés" value={currentData.kpis.contratsSignes} Icon={FileSignature} color="text-emerald-600" />
                    <StatCard title="RDV Pris" value={currentData.kpis.rdvPris} Icon={Briefcase} color="text-sky-600" />
                    <StatCard title="Portes Visitées" value={currentData.kpis.portesVisitees} Icon={BarChart3} color="text-orange-600" />
                    <StatCard title="Taux de Conclusion Global" value={currentData.kpis.tauxConclusionGlobal} Icon={Target} suffix="%" color="text-violet-600" />
                </div>
            </section>

            <div className="grid grid-cols-1 gap-6 mt-8">
                {/* Main Content Column (Charts) */}
                <div className="space-y-6">
                    <Card className="shadow-lg border border-gray-200 rounded-xl overflow-hidden transition-all duration-300 hover:shadow-xl">
                        <CardHeader className="bg-gray-50 border-b border-gray-200 py-4 px-6">
                            <CardTitle className="text-lg font-semibold text-gray-800">Contrats par Équipe</CardTitle>
                            <CardDescription className="text-sm text-gray-600">Répartition des contrats signés par équipe.</CardDescription>
                        </CardHeader>
                        <CardContent className="p-6">
                            <GenericBarChart
                                title="Contrats par Équipe"
                                data={currentData.charts.contratsParEquipe}
                                xAxisDataKey="name"
                                barDataKey="value"
                                fillColor="hsl(var(--winvest-blue-moyen))"
                            />
                        </CardContent>
                    </Card>

                    <Card className="shadow-lg border border-gray-200 rounded-xl overflow-hidden transition-all duration-300 hover:shadow-xl">
                        <CardHeader className="bg-gray-50 border-b border-gray-200 py-4 px-6">
                            <CardTitle className="text-lg font-semibold text-gray-800">Répartition des Contrats par Manager</CardTitle>
                            <CardDescription className="text-sm text-gray-600">Pourcentage des contrats attribués à chaque manager.</CardDescription>
                        </CardHeader>
                        <CardContent className="p-6">
                            <GenericPieChart
                                title="Répartition des Contrats par Manager"
                                data={currentData.charts.repartitionParManager}
                                dataKey="value"
                                nameKey="name"
                                colors={['hsl(var(--winvest-blue-moyen))', 'hsl(var(--winvest-blue-clair))', 'hsl(var(--winvest-blue-nuit))', 'hsl(var(--winvest-blue-profond))']}
                            />
                        </CardContent>
                    </Card>
                </div>
            </div>

            <section className="mt-8">
                <h2 className="text-2xl font-bold mb-6 text-gray-800">Classements</h2>
                <div className="grid gap-6 md:grid-cols-1 lg:grid-cols-3">
                    <LeaderboardTable title="Top Managers" description="Basé sur le nombre de contrats signés par leurs équipes." data={currentData.leaderboards.managers} unit="Contrats" />
                    <LeaderboardTable title="Top Équipes" description="Basé sur le nombre total de contrats signés." data={currentData.leaderboards.equipes} unit="Contrats" />
                    <LeaderboardTable title="Top Commerciaux" description="Basé sur leurs contrats signés individuels." data={currentData.leaderboards.commerciaux} unit="Contrats" />
                </div>
            </section>
        </motion.div>
    );
};

export default StatistiquesPage;


# --- pages/admin/Managers/ManagerDetailsPage.tsx ---
import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import type { RowSelectionState } from "@tanstack/react-table";
import { ArrowLeft, Briefcase, CheckCircle, Target, Users, User, Mail, Phone } from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Skeleton } from '@/components/ui-admin/skeleton';
import StatCard from '@/components/ui-admin/StatCard';
import { DataTable } from "@/components/data-table/DataTable";
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { managerService } from '@/services/manager.service';
import type { Commercial } from '../commerciaux/commerciaux-table/columns';
import { createColumns as createCommerciauxColumns } from "../commerciaux/commerciaux-table/columns";
import { createEquipesColumns, type EquipeDuManager } from './managers-table/equipes-columns';
import { Modal } from '@/components/ui-admin/Modal';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';

import { statisticsService } from '@/services/statistics.service';

interface ManagerDetails {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
  equipes: EquipeDuManager[];
}

interface ManagerStats {
  contratsSignes: number;
  rdvPris: number;
  tauxConclusion: number;
}

interface PerformanceHistoryItem {
  name: string;
  performance: number;
  [key: string]: string | number;
}

const ManagerDetailsPage = () => {
    const { managerId } = useParams<{ managerId: string }>();
    const navigate = useNavigate();
    
    const [manager, setManager] = useState<ManagerDetails | null>(null);
    const [stats, setStats] = useState<ManagerStats | null>(null);
    const [perfHistory, setPerfHistory] = useState<PerformanceHistoryItem[]>([]);
    const [loading, setLoading] = useState(true);
    
    const [selectedTeam, setSelectedTeam] = useState<EquipeDuManager | null>(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [teamRowSelection, setTeamRowSelection] = React.useState<RowSelectionState>({});

    const equipesColumns = useMemo(() => createEquipesColumns(), []);
    const commerciauxColumns = useMemo(() => {
        const allCols = createCommerciauxColumns(false, () => {}, managerId);
        return allCols.filter(col => col.id !== 'manager' && col.id !== 'equipe');
    }, [managerId]);

    useEffect(() => {
        if (managerId) {
            setLoading(true);
            Promise.all([
                managerService.getManagerDetails(managerId),
                statisticsService.getStatsForManager(managerId),
                statisticsService.getManagerPerformanceHistory(managerId)
            ]).then(([managerData, statsData, historyData]) => {
                const formattedEquipes = managerData.equipes.map((e: any) => ({
                    id: e.id,
                    nom: e.nom,
                    nbCommerciaux: e.commerciaux.length,
                    commerciaux: e.commerciaux.map((c: Commercial, index: number) => ({
                        ...c,
                        manager: `${managerData.prenom} ${managerData.nom}`,
                        managerId: managerData.id,
                        equipe: e.nom,
                        equipeId: e.id,
                        classement: index + 1,
                        telephone: c.telephone || '',
                    }))
                }));
                setManager({ ...managerData, equipes: formattedEquipes });
                setStats(statsData);
                setPerfHistory(historyData);
                setLoading(false);
            }).catch(err => {
                console.error("Erreur de chargement des détails du manager:", err);
                setLoading(false);
            });
        }
    }, [managerId]);

    const explanations = [
        {
            title: "À Propos de la Performance Globale",
            content: (
                <div className="text-sm text-gray-600 space-y-4">
                    <div>
                        <h4 className="font-semibold text-gray-800">Qu'est-ce que c'est ?</h4>
                        <p>Cet indicateur illustre l'évolution mensuelle du taux de conversion des RDV en contrats pour l'ensemble des équipes.</p>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-800">Comment est-ce calculé ?</h4>
                        <p>(Contrats Signés du mois / RDV Pris du mois) * 100.</p>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-800">À quoi ça sert ?</h4>
                        <p>Il permet de visualiser les tendances de performance et d'identifier les mois les plus productifs.</p>
                    </div>
                </div>
            )
        },
        {
            title: "À Propos du Taux de Conclusion",
            content: (
                <div className="text-sm text-gray-600 space-y-4">
                    <div>
                        <h4 className="font-semibold text-gray-800">Qu'est-ce que c'est ?</h4>
                        <p>C'est le pourcentage global de RDV qui ont abouti à un contrat signé sur toute la période.</p>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-800">Comment est-ce calculé ?</h4>
                        <p>(Total Contrats Signés / Total RDV Pris) * 100.</p>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-800">À quoi ça sert ?</h4>
                        <p>Il donne une mesure de l'efficacité de la conversion finale, un indicateur clé de la performance commerciale.</p>
                    </div>
                </div>
            )
        }
    ];

    const [activeExplanationIndex, setActiveExplanationIndex] = useState(0);

    useEffect(() => {
        const interval = setInterval(() => {
            setActiveExplanationIndex(prevIndex => (prevIndex + 1) % explanations.length);
        }, 7000); // Change slide every 7 seconds

        return () => clearInterval(interval);
    }, []);

    const handleTeamRowClick = (equipe: EquipeDuManager) => {
        setSelectedTeam(equipe);
        setIsModalOpen(true);
    };
    
    if (loading) {
        return (
            <div className="space-y-6 animate-pulse">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-24 w-full" />
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    <Skeleton className="h-28 rounded-lg" /><Skeleton className="h-28 rounded-lg" />
                    <Skeleton className="h-28 rounded-lg" /><Skeleton className="h-28 rounded-lg" />
                </div>
                <Skeleton className="h-96 w-full" />
            </div>
        );
    }
    
    if (!manager) return <div>Manager non trouvé.</div>;

    const currentStats = {
      rdvPris: stats?.rdvPris ?? 0,
      contratsSignes: stats?.contratsSignes ?? 0,
      tauxConclusion: stats?.tauxConclusion ?? 0,
    };
    const commerciauxDeLequipeSelectionnee = manager.equipes.find((e) => e.id === selectedTeam?.id)?.commerciaux || [];

    return (
        <div className="space-y-8">
            <Button variant="outline" onClick={() => navigate(-1)}><ArrowLeft className="mr-2 h-4 w-4" /> Retour</Button>
            

            <Card>
                <CardHeader>
                    <CardTitle>Informations Personnelles</CardTitle>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div className="flex items-center space-x-2">
                        <User className="h-5 w-5 text-gray-500" />
                        <span>{manager.prenom} {manager.nom}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <Mail className="h-5 w-5 text-gray-500" />
                        <span>{manager.email}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <Phone className="h-5 w-5 text-gray-500" />
                        <span>{manager.telephone || 'N/A'}</span>
                    </div>
                </CardContent>
            </Card>

            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <StatCard title="Contrats (Total)" value={currentStats.contratsSignes} Icon={CheckCircle} color="text-emerald-500" />
                <StatCard title="RDV (Total)" value={currentStats.rdvPris} Icon={Briefcase} color="text-sky-500"/>
                <StatCard title="Taux Conclusion" value={currentStats.tauxConclusion} Icon={Target} suffix="%" color="text-amber-500"/>
                <StatCard title="Nb. Équipes" value={manager.equipes.length} Icon={Users} color="text-yellow-500"/>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
                <div className="lg:col-span-2">
                    <GenericLineChart 
                        title="Évolution de la Performance Globale"
                        data={perfHistory} 
                        xAxisDataKey="name" 
                        lines={[{ dataKey: 'performance', stroke: '#3b82f6', name: 'Performance (%)' }]} 
                    />
                </div>
                <Card>
                    <CardHeader>
                        <CardTitle className="text-md">{explanations[activeExplanationIndex].title}</CardTitle>
                    </CardHeader>
                    <CardContent key={activeExplanationIndex} className="animate-in fade-in duration-500">
                        {explanations[activeExplanationIndex].content}
                    </CardContent>
                    <div className="flex justify-center p-4">
                        {explanations.map((_, index) => (
                            <span
                                key={index}
                                className={`h-2 w-2 rounded-full mx-1 cursor-pointer ${index === activeExplanationIndex ? 'bg-blue-500' : 'bg-gray-300'}`}
                                onClick={() => setActiveExplanationIndex(index)}
                            />
                        ))}
                    </div>
                </Card>
            </div>
            
            <div className="space-y-4">
                <DataTable
                    columns={equipesColumns}
                    data={manager.equipes}
                    title="Équipes Managées"
                    filterColumnId="nom"
                    filterPlaceholder="Filtrer par équipe..."
                    onRowClick={handleTeamRowClick}
                    isDeleteMode={false}
                    onToggleDeleteMode={() => {}}
                    onConfirmDelete={() => {}}
                    rowSelection={teamRowSelection}
                    setRowSelection={setTeamRowSelection}
                />
            </div>

            {selectedTeam && (
                <Modal
                    isOpen={isModalOpen}
                    onClose={() => setIsModalOpen(false)}
                    title={`Commerciaux de l'équipe : ${selectedTeam.nom}`}
                >
                    {commerciauxDeLequipeSelectionnee.length > 0 ? (
                        <DataTable
                            columns={commerciauxColumns} data={commerciauxDeLequipeSelectionnee}
                            title=""
                            filterColumnId="nom" filterPlaceholder="Filtrer par commercial..."
                            isDeleteMode={false} onToggleDeleteMode={() => {}} rowSelection={{}} setRowSelection={() => {}} onConfirmDelete={() => {}}
                        />
                    ) : (
                        <div className="text-center text-gray-500 py-8">
                            <p>Cette équipe n'a aucun commercial pour le moment.</p>
                        </div>
                    )}
                </Modal>
            )}
        </div>
    );
};

export default ManagerDetailsPage;


# --- pages/admin/commerciaux/CommerciauxPage.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CommerciauxPage.tsx

import React, { useState, useEffect, useMemo } from "react";
import type { Commercial } from "./commerciaux-table/columns";
import { createColumns } from "./commerciaux-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import type { RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { commercialService } from "@/services/commercial.service";
import { equipeService } from "@/services/equipe.service";
import { managerService } from "@/services/manager.service";
import type { Manager } from "@/types/types";



const CommerciauxPage = () => {
  const [data, setData] = useState<Commercial[]>([]);
  const [managers, setManagers] = useState<Manager[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<Commercial[]>([]);
  
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  
  const initialFormState = { nom: "", prenom: "", email: "", telephone: "", equipeId: "", managerId: "" };
  const [newCommercialData, setNewCommercialData] = useState(initialFormState);
  const [editingCommercial, setEditingCommercial] = useState<Commercial | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [commerciauxFromApi, equipesFromApi, managersFromApi] = await Promise.all([
        commercialService.getCommerciaux(), equipeService.getEquipes(), managerService.getManagers(),
      ]);

      setManagers(managersFromApi);

      const equipesMap = new Map(equipesFromApi.map((e) => [e.id, e.nom] as const));
      const managersMap = new Map(managersFromApi.map((m) => [m.id, `${m.prenom} ${m.nom}`] as const));

      const enrichedCommerciaux: Commercial[] = commerciauxFromApi.map((comm) => {
        const totalContratsSignes = comm.historiques.reduce(
          (sum: number, history: any) => sum + history.nbContratsSignes,
          0,
        );
        return {
          id: comm.id,
          nom: comm.nom,
          prenom: comm.prenom,
          email: comm.email,
          telephone: comm.telephone || '',
          equipeId: comm.equipeId,
          managerId: comm.managerId,
          manager: managersMap.get(comm.managerId) || 'N/A',
          equipe: comm.equipeId ? equipesMap.get(comm.equipeId) || 'Non assignée' : 'Non assignée',
          classement: 0, // Temporary, will be set after sorting
          totalContratsSignes,
        };
      });

      // Sort commercials by totalContratsSignes for ranking
      enrichedCommerciaux.sort(
        (a, b) => {
          const aTotal = commerciauxFromApi.find(c => c.id === a.id)?.historiques.reduce((sum: number, h: any) => sum + h.nbContratsSignes, 0) || 0;
          const bTotal = commerciauxFromApi.find(c => c.id === b.id)?.historiques.reduce((sum: number, h: any) => sum + h.nbContratsSignes, 0) || 0;
          return bTotal - aTotal;
        }
      );

      const rankedCommerciaux = enrichedCommerciaux.map((comm, index) => ({
        ...comm,
        classement: index + 1,
      }));

      setData(rankedCommerciaux);
    } catch (error) { console.error("Erreur lors de la récupération des données:", error); } 
    finally { setLoading(false); }
  };

  const handleEditOpen = (commercial: Commercial) => {
    setEditingCommercial(commercial);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingCommercial) return;
    setEditingCommercial({ ...editingCommercial, [e.target.name]: e.target.value });
  };
  
  const handleEditSelectChange = (managerId: string) => {
    if (!editingCommercial) return;
    setEditingCommercial({ ...editingCommercial, managerId });
  };

  const handleUpdateCommercial = async () => {
    if (!editingCommercial) return;
    try {
      const { id, nom, prenom, email, telephone, managerId } = editingCommercial;
      
      const payload = {
        nom, prenom, email, managerId,
        telephone: telephone || undefined,
      };

      await commercialService.updateCommercial(id, payload);

      setIsEditModalOpen(false);
      setEditingCommercial(null);
      fetchData();
    } catch (error) {
      console.error("Erreur de mise à jour du commercial:", error);
    }
  };

  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewCommercialData((prev) => ({ ...prev, [e.target.id]: e.target.value }));
  };
  const handleAddCommercial = async () => {
    const { nom, prenom, email, telephone, managerId } = newCommercialData;
    if (!nom || !prenom || !email || !managerId) {
      alert("Veuillez remplir tous les champs obligatoires.");
      return;
    }

    try {
      await commercialService.createCommercial({ nom, prenom, email, telephone, managerId });
      setIsAddModalOpen(false);
      setNewCommercialData(initialFormState);
      fetchData();
    } catch (error) {
      console.error("Erreur lors de l'ajout du commercial:", error);
    }
  };

  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map((c) => commercialService.deleteCommercial(c.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) { console.error("Erreur lors de la suppression:", error); }
  };

  const toggleDeleteMode = () => { setIsDeleteMode((prev) => !prev); setRowSelection({}); };
  const handleConfirmDelete = (selectedItems: Commercial[]) => { setItemsToDelete(selectedItems); };

  const columns = useMemo(() => createColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
    return <div>Chargement des commerciaux...</div>;
  }

  return (
    <>
      <DataTable
        columns={columns}
        data={data}
        title="Gestion des Commerciaux"
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de commercial..."
        addEntityButtonText="Ajouter un Commercial"
        onAddEntity={() => setIsAddModalOpen(true)}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
      />

      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])} title="Confirmer la suppression">
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} commercial(ux) suivant(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map((item) => <li key={item.id}>{item.prenom} {item.nom}</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)} title="Ajouter un nouveau commercial">
        <h2 className="text-lg font-semibold mb-4">Ajouter un nouveau commercial</h2>
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" placeholder="Nom de famille" value={newCommercialData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" placeholder="Prénom" value={newCommercialData.prenom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" placeholder="adresse@email.com" value={newCommercialData.email} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="telephone">Téléphone (optionnel)</Label><Input id="telephone" type="tel" placeholder="0612345678" value={newCommercialData.telephone} onChange={handleAddInputChange} /></div>
          <div className="space-y-1">
            <Label htmlFor="managerId">Manager</Label>
            <Select onValueChange={(value) => setNewCommercialData((prev) => ({ ...prev, managerId: value }))} value={newCommercialData.managerId}>
              <SelectTrigger id="managerId"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
              <SelectContent>
                {managers.map((manager) => (
                  <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddCommercial} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>
      
      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} title="Modifier le commercial">
        <h2 className="text-lg font-semibold mb-4">Modifier le commercial</h2>
        {editingCommercial && (
            <div className="grid gap-4">
            <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" name="nom" value={editingCommercial.nom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" name="prenom" value={editingCommercial.prenom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" name="email" type="email" value={editingCommercial.email} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" name="telephone" type="tel" value={editingCommercial.telephone || ''} onChange={handleEditInputChange} /></div>
            <div className="space-y-1">
                <Label htmlFor="managerId">Manager</Label>
                <Select onValueChange={handleEditSelectChange} value={editingCommercial.managerId}>
                <SelectTrigger id="managerId"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
                <SelectContent>
                    {managers.map((manager) => ( <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem> ))}
                </SelectContent>
                </Select>
            </div>
            </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
            <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
            <Button onClick={handleUpdateCommercial} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  );
};

export default CommerciauxPage;


# --- pages/admin/Equipes/EquipesPage.tsx ---
import React, { useState, useEffect, useMemo } from "react";
import type { Equipe } from "./equipes-table/columns";
import { createEquipesColumns } from "./equipes-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import type { RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { equipeService } from "@/services/equipe.service";
import { managerService } from "@/services/manager.service";
import type { Manager } from '@/types/types';

const EquipesPage = () => {
  const [data, setData] = useState<Equipe[]>([]);
  const [managersList, setManagersList] = useState<Manager[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<Equipe[]>([]);

  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const initialFormState = { nom: '', managerId: '' };
  const [newEquipeData, setNewEquipeData] = useState(initialFormState);
  const [editingEquipe, setEditingEquipe] = useState<Equipe | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [equipesFromApi, managersFromApi] = await Promise.all([
        equipeService.getEquipes(),
        managerService.getManagers(),
      ]);

      setManagersList(managersFromApi);

      const managersMap = new Map(managersFromApi.map(m => [m.id, m]));

      const enrichedEquipes: Equipe[] = equipesFromApi.map((equipe) => {
        const manager = managersMap.get(equipe.managerId);
        const totalContratsSignes = equipe.commerciaux.reduce((acc: number, commercial: any) => {
          return acc + commercial.historiques.reduce((accHist: number, hist: any) => accHist + hist.nbContratsSignes, 0);
        }, 0);

        return {
          id: equipe.id,
          nom: equipe.nom,
          manager: {
            id: manager?.id || '',
            nom: manager ? `${manager.prenom} ${manager.nom}` : "N/A",
            avatarFallback: manager ? `${manager.prenom[0]}${manager.nom[0]}` : "?",
          },
          nbCommerciaux: equipe.commerciaux.length,
          totalContratsSignes: totalContratsSignes,
          classementGeneral: 0, // Placeholder, will be calculated next
        };
      });

      // Sort by totalContratsSignes to determine ranking
      enrichedEquipes.sort((a, b) => b.totalContratsSignes - a.totalContratsSignes);

      // Assign classementGeneral based on sorted order
      const rankedEquipes = enrichedEquipes.map((equipe, index) => ({
        ...equipe,
        classementGeneral: index + 1,
      }));
      
      setData(rankedEquipes);
    } catch (error) {
      console.error("Erreur:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleEditOpen = (equipe: Equipe) => {
    setEditingEquipe(equipe);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingEquipe) return;
    setEditingEquipe({ ...editingEquipe, nom: e.target.value });
  };
  
  const handleEditSelectChange = (managerId: string) => {
    if (!editingEquipe) return;
    const manager = managersList.find(m => m.id === managerId);
    if (manager) {
        setEditingEquipe({
            ...editingEquipe,
            manager: {
                ...editingEquipe.manager,
                id: manager.id,
                nom: `${manager.prenom} ${manager.nom}`
            }
        });
    }
  };

  const handleUpdateEquipe = async () => {
    if (!editingEquipe) return;
    try {
      const payload = {
        nom: editingEquipe.nom,
        managerId: editingEquipe.manager.id,
      };
      await equipeService.updateEquipe(editingEquipe.id, payload);
      setIsEditModalOpen(false);
      setEditingEquipe(null);
      fetchData();
    } catch(error) {
      console.error("Erreur de mise à jour de l'équipe:", error);
    }
  };

  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewEquipeData(prev => ({ ...prev, nom: e.target.value }));
  };

  const handleAddSelectChange = (managerId: string) => {
    setNewEquipeData(prev => ({ ...prev, managerId }));
  };

  const handleAddEquipe = async () => {
    if (!newEquipeData.nom || !newEquipeData.managerId) {
      alert("Veuillez remplir tous les champs.");
      return;
    }
    try {
      await equipeService.createEquipe(newEquipeData);
      setIsAddModalOpen(false);
      setNewEquipeData(initialFormState);
      fetchData();
    } catch (error) {
      console.error("Erreur lors de l'ajout de l'équipe:", error);
    }
  };

  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map(e => equipeService.deleteEquipe(e.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) {
      console.error("Erreur lors de la suppression:", error);
    }
  };

  const toggleDeleteMode = () => { setIsDeleteMode(prev => !prev); setRowSelection({}); };
  const handleConfirmDelete = (selectedItems: Equipe[]) => { setItemsToDelete(selectedItems); };

  const columns = useMemo(() => createEquipesColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
    return <div>Chargement des équipes...</div>;
  }

  return (
    <>
      <DataTable 
        columns={columns} data={data} title="Gestion des Équipes" filterColumnId="nom"
        filterPlaceholder="Filtrer par nom d'équipe..." addEntityButtonText="Ajouter une Équipe"
        onAddEntity={() => setIsAddModalOpen(true)} isDeleteMode={isDeleteMode} onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection} setRowSelection={setRowSelection} onConfirmDelete={handleConfirmDelete}
      />

      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])} title="Confirmer la suppression">
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} équipe(s) suivante(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map(item => <li key={item.id}>{item.nom} (Manager: {item.manager.nom})</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button variant="destructive" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)} title="Ajouter une nouvelle équipe">
        <h2 className="text-lg font-semibold mb-4">Ajouter une nouvelle équipe</h2>
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom-equipe">Nom de l'équipe</Label><Input id="nom-equipe" placeholder="Ex: Oméga" value={newEquipeData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1">
            <Label htmlFor="manager-equipe">Manager responsable</Label>
            <Select onValueChange={handleAddSelectChange} value={newEquipeData.managerId}>
              <SelectTrigger id="manager-equipe"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
              <SelectContent>
                {managersList.map(manager => (
                  <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddEquipe} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>

      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} title="Modifier l'équipe">
        <h2 className="text-lg font-semibold mb-4">Modifier l'équipe</h2>
        {editingEquipe && (
          <div className="grid gap-4">
            <div className="space-y-1"><Label htmlFor="nom-equipe-edit">Nom de l'équipe</Label><Input id="nom-equipe-edit" value={editingEquipe.nom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1">
              <Label htmlFor="manager-equipe-edit">Manager responsable</Label>
              <Select onValueChange={handleEditSelectChange} value={editingEquipe.manager.id}>
                <SelectTrigger id="manager-equipe-edit"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
                <SelectContent>
                  {managersList.map(manager => (
                    <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
          <Button onClick={handleUpdateEquipe} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  )
}

export default EquipesPage;


# --- pages/admin/Managers/ManagersPage.tsx ---
// frontend-shadcn/src/pages/admin/Managers/ManagersPage.tsx

import React, { useState, useEffect, useMemo } from "react";
import type { Manager } from "./managers-table/columns";
import { getColumns } from "./managers-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import { type RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { managerService } from "@/services/manager.service";

type ManagerWithEquipes = Manager & { equipes: any[] };

const ManagersPage = () => {
  const [data, setData] = useState<ManagerWithEquipes[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [managersToDelete, setManagersToDelete] = useState<ManagerWithEquipes[]>([]);
  
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const initialFormState = { nom: '', prenom: '', email: '', telephone: '' };
  const [newManagerData, setNewManagerData] = useState(initialFormState);
  const [editingManager, setEditingManager] = useState<ManagerWithEquipes | null>(null);

  useEffect(() => {
    fetchManagers();
  }, []);

  const fetchManagers = async () => {
    setLoading(true);
    try {
      const managers = await managerService.getManagers() as ManagerWithEquipes[];
      const formattedManagers = managers.map((m) => {
        const nbEquipes = m.equipes.length;
        const totalContratsSignes = m.equipes.reduce((accEquipe: number, equipe: any) => {
          return (
            accEquipe +
            equipe.commerciaux.reduce((accCommercial: number, commercial: any) => {
              return (
                accCommercial +
                commercial.historiques.reduce((accHistory: number, history: any) => {
                  return accHistory + history.nbContratsSignes;
                }, 0)
              );
            }, 0)
          );
        }, 0);

        return {
          ...m,
          telephone: m.telephone || '',
          nbEquipes: nbEquipes,
          totalContratsSignes: totalContratsSignes,
          equipes: m.equipes,
        };
      });

      // Sort managers by totalContratsSignes for ranking
      formattedManagers.sort((a, b) => b.totalContratsSignes - a.totalContratsSignes);

      const rankedManagers = formattedManagers.map((m, index) => ({
        ...m,
        classement: index + 1,
      }));

      setData(rankedManagers);
    } catch (error) {
      console.error("Erreur lors de la récupération des managers:", error);
    } finally {
      setLoading(false);
    }
  };

  // --- LOGIQUE D'ÉDITION ---
  const handleEditOpen = (manager: ManagerWithEquipes) => {
    setEditingManager(manager);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingManager) return;
    setEditingManager({ ...editingManager, [e.target.id]: e.target.value });
  };
  
  const handleUpdateManager = async () => {
    if (!editingManager) return;
    try {
      const { id, nom, prenom, email, telephone } = editingManager;
      const payload = { nom, prenom, email, telephone: telephone || undefined };
      await managerService.updateManager(id, payload);
      setIsEditModalOpen(false);
      setEditingManager(null);
      fetchManagers();
    } catch (error) {
      console.error("Erreur de mise à jour du manager:", error);
    }
  };

  // --- LOGIQUE D'AJOUT ---
  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewManagerData(prev => ({ ...prev, [e.target.id]: e.target.value }));
  };

  const handleAddManager = async () => {
    if (!newManagerData.nom || !newManagerData.prenom || !newManagerData.email) {
        alert("Les champs Nom, Prénom et Email sont obligatoires.");
        return;
    }
    try {
      await managerService.createManager(newManagerData);
      setIsAddModalOpen(false);
      setNewManagerData(initialFormState);
      fetchManagers();
    } catch (error) {
      console.error("Erreur lors de l'ajout du manager:", error);
    }
  };

  // --- LOGIQUE DE SUPPRESSION ---
  const handleDelete = async () => {
    try {
      await Promise.all(managersToDelete.map(m => managerService.deleteManager(m.id)));
      setManagersToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchManagers();
    } catch (error) {
      console.error("Erreur lors de la suppression:", error);
    }
  };
  
  const toggleDeleteMode = () => {
    setIsDeleteMode(prev => !prev);
    setRowSelection({});
  };

  const handleConfirmDelete = (selectedManagers: ManagerWithEquipes[]) => {
    setManagersToDelete(selectedManagers);
  };
  
  const columns = useMemo(() => getColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
      return <div>Chargement des managers...</div>;
  }

  return (
    <>
      <DataTable 
        columns={columns} 
        data={data} 
        title="Gestion des Managers"
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de manager..."
        addEntityButtonText="Ajouter un Manager"
        onAddEntity={() => setIsAddModalOpen(true)}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
      />

      <Modal
        isOpen={managersToDelete.length > 0}
        onClose={() => setManagersToDelete([])}
        title="Confirmer la suppression"
      >
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {managersToDelete.length} manager(s) suivant(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {managersToDelete.map(m => <li key={m.id}>{m.prenom} {m.nom}</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setManagersToDelete([])}>Annuler</Button>
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        title="Ajouter un nouveau manager"
      >
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" placeholder="Dupont" value={newManagerData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" placeholder="Jean" value={newManagerData.prenom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" placeholder="jean.dupont@example.com" value={newManagerData.email} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" type="tel" placeholder="0612345678" value={newManagerData.telephone} onChange={handleAddInputChange} /></div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddManager} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>

      <Modal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        title="Modifier le manager"
      >
        {editingManager && (
            <div className="grid gap-4">
                <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" value={editingManager.nom} onChange={handleEditInputChange} /></div>
                <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" value={editingManager.prenom} onChange={handleEditInputChange} /></div>
                <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" value={editingManager.email} onChange={handleEditInputChange} /></div>
                <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" type="tel" value={editingManager.telephone || ''} onChange={handleEditInputChange} /></div>
            </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
            <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
            <Button onClick={handleUpdateManager} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  )
}

export default ManagersPage;


# --- pages/admin/immeubles/columns.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/columns.tsx

"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom";
import { ArrowUpDown, Eye, User, MapPin, Percent, Users } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"
import { Avatar, AvatarFallback } from "@/components/ui-admin/avatar";

export type Immeuble = {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  status: "À visiter" | "Visité" | "RDV Pris" | "Inaccessible";
  nbPortes: number;
  nbPortesProspectees: number;
  prospectingMode: "Solo" | "Duo";
  prospectors: {
    id: string;
    nom: string;
    avatarFallback: string;
  }[];
  dateVisite: string | null;
  zone: string;
  zoneId: string;
  latlng: [number, number];
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

const statusConfig = {
    "À visiter": "bg-blue-100 text-blue-800 border-blue-300",
    "Visité": "bg-gray-100 text-gray-800 border-gray-300",
    "RDV Pris": "bg-green-100 text-green-800 border-green-300",
    "Inaccessible": "bg-red-100 text-red-800 border-red-300",
};

export const createColumns = (
    isDeleteMode: boolean, 
    onFocusOnImmeuble: (immeuble: Immeuble) => void = () => {},
    onFocusOnZone: (zoneId: string) => void = () => {}
): ColumnDef<Immeuble>[] => [
    ...(isDeleteMode ? [{ 
        id: "select", 
        header: ({ table }: any) => (<Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />), 
        cell: ({ row }: any) => (<Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" onClick={(e) => e.stopPropagation()} />), 
        enableSorting: false, enableHiding: false, 
    }] : []),

    {
      accessorKey: "adresse",
      header: ({ column }) => <SortableHeader title="Adresse" column={column} />,
      cell: ({ row }) => {
        const immeuble = row.original;
        return (
          <TooltipProvider delayDuration={200}>
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="font-medium text-foreground cursor-pointer hover:text-primary transition-colors" onClick={(e) => { e.stopPropagation(); onFocusOnImmeuble(immeuble); }}>
                  {immeuble.adresse}
                  <div className="text-xs text-muted-foreground">{`${immeuble.codePostal} ${immeuble.ville}`}</div>
                </div>
              </TooltipTrigger>
              <TooltipContent><p>Cliquer pour voir sur la carte</p></TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )
      },
    },
    {
      accessorKey: "status",
      header: ({ column }) => <SortableHeader title="Statut" column={column} />,
      cell: ({ row }) => <Badge variant="outline" className={statusConfig[row.original.status]}>{row.original.status}</Badge>
    },
    {
        id: "couverture",
        header: ({ column }) => <SortableHeader title="Couverture" column={column} />,
        cell: ({ row }) => {
            const { nbPortes, nbPortesProspectees } = row.original;
            if (nbPortes === 0) return <span className="text-muted-foreground">N/A</span>;
            const percentage = (nbPortesProspectees / nbPortes) * 100;
            return (
                <div className="flex items-center gap-2">
                    <Percent className="h-4 w-4 text-muted-foreground" />
                    <span className="font-medium">{percentage.toFixed(0)}%</span>
                    <span className="text-xs text-muted-foreground">({nbPortesProspectees}/{nbPortes})</span>
                </div>
            )
        },
        sortingFn: (rowA, rowB) => {
            const percA = rowA.original.nbPortes > 0 ? (rowA.original.nbPortesProspectees / rowA.original.nbPortes) : -1;
            const percB = rowB.original.nbPortes > 0 ? (rowB.original.nbPortesProspectees / rowB.original.nbPortes) : -1;
            return percA - percB;
        }
    },
    {
        accessorKey: "zone",
        header: ({ column }) => <SortableHeader title="Zone" column={column} />,
        cell: ({ row }) => (
          <TooltipProvider delayDuration={200}>
            <Tooltip>
              <TooltipTrigger asChild>
                  <div className="flex items-center gap-2 cursor-pointer hover:text-primary transition-colors" onClick={(e) => { e.stopPropagation(); onFocusOnZone(row.original.zoneId); }} >
                    <MapPin className="h-4 w-4 text-muted-foreground" />
                    <span>{row.original.zone}</span>
                  </div>
              </TooltipTrigger>
              <TooltipContent><p>Cliquer pour voir la zone sur la carte</p></TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )
    },
    {
        accessorKey: "prospectingMode",
        header: ({ column }) => <SortableHeader title="Mode" column={column} />,
        cell: ({ row }) => {
            const { prospectingMode, prospectors } = row.original;
            if (prospectors.length === 0) {
                return <span className="text-muted-foreground">-</span>;
            }
            const Icon = prospectingMode === 'Duo' ? Users : User;
            return (
                <Badge variant="secondary" className="font-medium">
                    <Icon className="h-3 w-3 mr-1.5" />
                    {prospectingMode}
                </Badge>
            );
        }
    },
    {
        accessorKey: "prospectors",
        header: ({ column }) => <SortableHeader title="Prospecteurs" column={column} />,
        cell: ({ row }) => {
            const { prospectors } = row.original;
            if (!prospectors || prospectors.length === 0) {
                return <span className="text-muted-foreground">N/A</span>;
            }
            return (
                <div className="flex items-center">
                    <div className="flex -space-x-2">
                        {prospectors.map(p => (
                            <TooltipProvider key={p.id} delayDuration={100}>
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Link to={`/admin/commerciaux/${p.id}`} onClick={(e) => e.stopPropagation()} className="hover:z-10">
                                            <Avatar className="h-8 w-8 border-2 border-white">
                                                <AvatarFallback>{p.avatarFallback}</AvatarFallback>
                                            </Avatar>
                                        </Link>
                                    </TooltipTrigger>
                                    <TooltipContent><p>{p.nom}</p></TooltipContent>
                                </Tooltip>
                            </TooltipProvider>
                        ))}
                    </div>
                </div>
            );
        },
        sortingFn: (rowA, rowB) => {
            const nameA = rowA.original.prospectors[0]?.nom || '';
            const nameB = rowB.original.prospectors[0]?.nom || '';
            return nameA.localeCompare(nameB);
        }
    },
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const immeuble = row.original;
            return ( <div className="text-right"><Button asChild variant="ghost" className="h-8 w-8 p-0 cursor-pointer"><Link to={`/admin/immeubles/${immeuble.id}`} onClick={(e) => e.stopPropagation()}><Eye className="h-4 w-4" /><span className="sr-only">Voir les détails de l'immeuble</span></Link></Button></div> )
        },
    },
]


# --- components/ui-admin/dropdown-menu.tsx ---
// src/components/ui/dropdown-menu.tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-[#EFEDED] bg-white p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# --- pages/admin/zones/ZoneMap.tsx ---
// frontend-shadcn/src/pages/admin/zones/ZoneMap.tsx

import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Circle, Popup, useMap, FeatureGroup, Marker } from 'react-leaflet';
import type { FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { cn } from '@/lib/utils';
import { Maximize, Shrink } from 'lucide-react';
import { Button } from '@/components/ui-admin/button';
import { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';
import 'leaflet-geosearch/dist/geosearch.css';

// --- Patch et icônes ---
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

const zoneCenterIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(222.2 47.4% 11.2%)" stroke="white" stroke-width="2"><circle cx="12" cy="12" r="6"/></svg>'),
    iconSize: [16, 16],
    iconAnchor: [8, 8],
    popupAnchor: [0, -8],
});

const searchMarkerIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(206, 92%, 52%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search-code"><path d="M15.5 15.5 20 20"/><path d="M9 13a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z"/><path d="m14 14-2.5 2.5"/><path d="m14 6-2.5-2.5"/><path d="m6 14-2.5 2.5"/><path d="m6 6 2.5-2.5"/></svg>'),
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
});

interface Zone {
  id: string;
  name: string;
  assignedTo: string;
  color: string;
  latlng: L.LatLngExpression;
  radius: number;
}

interface Immeuble {
  id: string;
  adresse: string;
  latlng: L.LatLngExpression;
  status: string;
}

interface ZoneMapProps {
  existingZones: Zone[];
  immeubles?: Immeuble[];
  zoneToFocus: string | null;
}

const SearchControl = () => {
    const map = useMap();
    useEffect(() => {
        const provider = new OpenStreetMapProvider({
            params: { countrycodes: 'fr', 'accept-language': 'fr' },
        });
        // @ts-ignore
        const searchControl = new GeoSearchControl({
            provider: provider, style: 'bar', marker: { icon: searchMarkerIcon, draggable: false },
            showPopup: false, autoClose: true, retainZoomLevel: false,
            animateZoom: true, keepResult: true, searchLabel: 'Entrez une adresse en France...', updateMap: false, 
        });
        const onLocationFound = (event: any) => {
            if (event.location && event.location.y && event.location.x) {
                map.flyTo(new L.LatLng(event.location.y, event.location.x), 14, { animate: true, duration: 1.5 }); 
            }
        };
        map.addControl(searchControl);
        map.on('geosearch/showlocation', onLocationFound);
        return () => { map.removeControl(searchControl); map.off('geosearch/showlocation', onLocationFound); };
    }, [map]);
    return null;
};

// LA LOGIQUE FINALE, SIMPLIFIÉE
const MapViewController = ({ zones, zoneToFocus, featureGroupRef }: { zones: Zone[], zoneToFocus: string | null, featureGroupRef: React.RefObject<FeatureGroupType | null> }) => {
    const map = useMap();

    useEffect(() => {
        const timer = setTimeout(() => {
            if (!map) return;

            // SI UNE ZONE EST CIBLÉE : on zoome dessus. C'est tout.
            if (zoneToFocus) {
                const zone = zones.find(z => z.id === zoneToFocus);
                if (zone) {
                    map.flyTo(zone.latlng, 15, { animate: true, duration: 1.5 });
                }
            } 
            // SINON (aucune zone ciblée) : on affiche toutes les zones.
            else {
                if (featureGroupRef.current && zones.length > 0) {
                    const bounds = featureGroupRef.current.getBounds();
                    if (bounds.isValid()) {
                        map.fitBounds(bounds, { padding: [50, 50], animate: true });
                    }
                }
            }
        }, 50); // Léger délai pour la stabilité

        return () => clearTimeout(timer);
    }, [map, zones, zoneToFocus, featureGroupRef]); // On se base uniquement sur les props

    return null;
}

const ZoneDisplay = ({ zone }: { zone: Zone }) => {
    const map = useMap();
    const handleDoubleClick = () => { map.flyTo(zone.latlng, 15, { animate: true, duration: 1.5 }); };
    return (
        <>
            <Circle key={`circle-${zone.id}`} center={zone.latlng} radius={zone.radius} pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2 }}>
                <Popup><b>{zone.name}</b></Popup>
            </Circle>
            <Marker key={`marker-${zone.id}`} position={zone.latlng} icon={zoneCenterIcon} eventHandlers={{ dblclick: handleDoubleClick }}/>
        </>
    );
};

export const ZoneMap = ({ existingZones, immeubles = [], zoneToFocus }: ZoneMapProps) => {
    const featureGroupRef = useRef<FeatureGroupType>(null);
    const [isModalFullscreen, setIsModalFullscreen] = useState(false);

  return (
    <div className={cn( 'relative h-full w-full', isModalFullscreen && 'fixed inset-0 z-[2000] bg-black/80 p-4' )}>
      <div className={cn( 'relative h-full w-full', isModalFullscreen && 'rounded-lg overflow-hidden' )}>
        <div className="absolute top-4 right-4 z-[1001] flex flex-col gap-2">
            <Button size="icon" variant="secondary" className="shadow-lg bg-white hover:bg-slate-100 text-slate-800"
                onClick={() => setIsModalFullscreen(!isModalFullscreen)}>
                {isModalFullscreen ? <Shrink className="h-5 w-5" /> : <Maximize className="h-5 w-5" />}
            </Button>
        </div>
        <MapContainer 
            key={String(isModalFullscreen) + zoneToFocus} // Astuce : forcer le re-rendu si le focus change
            center={[48.8566, 2.3522]} zoom={10} 
            style={{ height: '100%', width: '100%', zIndex: 1 }}
            scrollWheelZoom={true} dragging={true} touchZoom={true}
            className={cn(!isModalFullscreen && "rounded-lg")}
        >
            <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'/>
            <SearchControl />
            <MapViewController 
                zones={existingZones} 
                zoneToFocus={zoneToFocus} 
                featureGroupRef={featureGroupRef} 
            />
            <FeatureGroup ref={featureGroupRef}>
                {existingZones.map(zone => <ZoneDisplay key={zone.id} zone={zone} />)}
                {immeubles.map(immeuble => (
                    <Marker key={immeuble.id} position={immeuble.latlng}>
                        <Popup><b>{immeuble.adresse}</b><br />Statut: {immeuble.status}</Popup>
                    </Marker>
                ))}
            </FeatureGroup>
        </MapContainer>
      </div>
    </div>
  );
};


# --- pages/admin/zones/ZonesPage.tsx ---
// frontend-shadcn/src/pages/admin/zones/ZonesPage.tsx

import { useState, useEffect, useMemo } from 'react';
import { ZoneMap } from './ZoneMap';
import { Button } from '@/components/ui-admin/button';
import { DataTable } from '@/components/data-table/DataTable';
import { createZoneColumns, type Zone as ZoneTableType } from './columns';
import { Modal } from '@/components/ui-admin/Modal';
import { ZoneCreatorModal } from './ZoneCreatorModal';
import type { RowSelectionState } from '@tanstack/react-table';
import { zoneService } from '@/services/zone.service';
import { AssignmentType } from '@/types/enums';
import L from 'leaflet';
import { ViewToggleContainer } from '@/components/ui-admin/ViewToggleContainer';

const ZonesPage = () => {
  const [view, setView] = useState<'table' | 'map'>('table');
  const [existingZones, setExistingZones] = useState<ZoneTableType[]>([]);
  const [loading, setLoading] = useState(true);
  
  const [isCreatorOpen, setIsCreatorOpen] = useState(false);
  const [editingZone, setEditingZone] = useState<ZoneTableType | null>(null);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<ZoneTableType[]>([]);
  const [zoneToFocusId, setZoneToFocusId] = useState<string | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [zones] = await Promise.all([
        zoneService.getZones(),
      ]);

      const formattedZones: ZoneTableType[] = zones.map(z => ({
        id: z.id,
        name: z.nom,
        assignedTo: 'Non assignée', // Plus d'assignation directe ici
        color: z.couleur || 'gray',
        latlng: [z.latitude, z.longitude],
        radius: z.rayonMetres,
        dateCreation: z.createdAt,
      }));

      setExistingZones(formattedZones);
    } catch (error) {
      console.error('Erreur de chargement des données:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEditClick = (zone: ZoneTableType) => {
    setEditingZone(zone);
    setIsCreatorOpen(true);
  };

  const handleCloseCreator = () => {
    setIsCreatorOpen(false);
    setEditingZone(null);
  };

  const handleZoneValidated = async (data: {
    id?: string;
    center: L.LatLng;
    radius: number;
    name: string;
    color: string;
  }) => {
    const payload: any = {
      nom: data.name,
      latitude: data.center.lat,
      longitude: data.center.lng,
      rayonMetres: data.radius,
      couleur: data.color,
      typeAssignation: AssignmentType.EQUIPE, // Valeur par défaut, car l'assignation est gérée ailleurs
    };

    try {
      if (data.id) {
        await zoneService.updateZone(data.id, payload);
      } else {
        await zoneService.createZone(payload);
      }
    } catch (error) {
      console.error('Erreur lors de la sauvegarde de la zone:', error);
    }

    handleCloseCreator();
    fetchData();
  };

  const handleConfirmDelete = (selectedRows: ZoneTableType[]) => setItemsToDelete(selectedRows);
  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map(z => zoneService.deleteZone(z.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) {
      console.error('Erreur de suppression:', error);
    }
  };

  // MODIFICATION : C'est la fonction qui gère le clic sur une ligne
  const handleRowClick = (zone: ZoneTableType) => {
    setZoneToFocusId(zone.id); // On définit la zone à cibler
    setView('map'); // Et on bascule sur la carte
  };

  // MODIFICATION : C'est la fonction qui gère le changement de vue via les boutons
  const handleViewChange = (newView: 'table' | 'map') => {
    if (newView === 'map') {
      // Si on bascule sur la carte, on s'assure qu'aucune zone n'est ciblée
      setZoneToFocusId(null); 
    }
    setView(newView);
  };
  const toggleDeleteMode = () => {
    setIsDeleteMode(prev => !prev);
    setRowSelection({});
  };
  const zoneColumns = useMemo(() => createZoneColumns(isDeleteMode, handleEditClick), [isDeleteMode]);

  if (loading) return <div>Chargement...</div>;

  const tableComponent = (
    <DataTable
        noCardWrapper
        columns={zoneColumns}
        data={existingZones}
        title=""
        filterColumnId="name"
        filterPlaceholder="Rechercher une zone par son nom..."
        addEntityButtonText="Ajouter une Zone"
        onAddEntity={() => {
          setEditingZone(null);
          setIsCreatorOpen(true);
        }}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
        onRowClick={handleRowClick} // Ce prop est bien utilisé pour cibler une zone
      />
  );
  
  const mapComponent = (
     <ZoneMap
        existingZones={existingZones}
        zoneToFocus={zoneToFocusId}
      />
  );

  return (
    <div className="h-full flex flex-col gap-6">
      {isCreatorOpen && (
        <ZoneCreatorModal
          onValidate={handleZoneValidated}
          onClose={handleCloseCreator}
          existingZones={existingZones}
          zoneToEdit={editingZone}
        />
      )}
      <Modal
        isOpen={itemsToDelete.length > 0}
        onClose={() => setItemsToDelete([])}
        title="Confirmer la suppression"
      >
        <p className="text-sm text-muted-foreground mt-2">
          Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} zone(s) sélectionnée(s)
          ?
        </p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map(item => (<li key={item.id}>{item.name}</li>))}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button variant="destructive" onClick={handleDelete}>Valider la suppression</Button>
        </div>
      </Modal>

      <ViewToggleContainer
        title="Gestion des Zones"
        description="Basculez entre la vue tableau et la vue carte interactive pour créer, modifier et visualiser les zones."
        view={view}
        onViewChange={handleViewChange} // MODIFICATION: Utilisation de la nouvelle fonction de gestion
        tableComponent={tableComponent}
        mapComponent={mapComponent}
      />
    </div>
  );
};

export default ZonesPage;


# --- components/ui-admin/select.tsx ---
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:translate-x-1 data-[side=top]:slide-in-from-bottom-2 relative z-[51] max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}



# --- pages/admin/immeubles/ImmeublesMap.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/ImmeublesMap.tsx
import { useEffect, useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { MapContainer, TileLayer, Circle, Popup, Marker, FeatureGroup } from 'react-leaflet';
import type { Map as LeafletMap, FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { Button } from '@/components/ui-admin/button';
import { type Immeuble } from './columns';
import { type Zone } from '../zones/columns';
import { Eye } from 'lucide-react';

// --- (Icon setup and Leaflet patch) ---
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});
const buildingIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#09090B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-building-2"><path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"/><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"/><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"/><path d="M10 6h4"/><path d="M10 10h4"/><path d="M10 14h4"/><path d="M10 18h4"/></svg>'),
    iconSize: [28, 28],
    iconAnchor: [14, 28],
    popupAnchor: [0, -28]
});
const focusIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="hsl(142.1 76.2% 44.1%)" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [36, 36],
    iconAnchor: [18, 36],
    popupAnchor: [0, -36],
});

interface ImmeublesMapProps {
  zones: Zone[];
  immeubles: Immeuble[];
  immeubleToFocusId: string | null;
  zoneToFocusId: string | null;
  onFocusClear: () => void;
}

export const ImmeublesMap = (props: ImmeublesMapProps) => {
    const { zones, immeubles, immeubleToFocusId, zoneToFocusId, onFocusClear } = props;
    const navigate = useNavigate();
    const [map, setMap] = useState<LeafletMap | null>(null);
    const featureGroupRef = useRef<FeatureGroupType>(null);
    const [selectedImmeuble, setSelectedImmeuble] = useState<Immeuble | null>(null);

    useEffect(() => {
        if (!map) return;

        if (immeubleToFocusId) {
            const immeuble = immeubles.find(i => i.id === immeubleToFocusId);
            if (immeuble) {
                setSelectedImmeuble(immeuble);
                map.flyTo(immeuble.latlng, 17, { animate: true, duration: 1.5 });
            }
            onFocusClear();
        } 
        else if (zoneToFocusId) {
            const zone = zones.find(z => z.id === zoneToFocusId);
            if (zone) {
                setSelectedImmeuble(null);
                map.flyTo(zone.latlng, 14, { animate: true, duration: 1.5 });
            }
            onFocusClear();
        }
    }, [immeubleToFocusId, zoneToFocusId, map, onFocusClear, immeubles, zones]);

    useEffect(() => {
        if (map && featureGroupRef.current) {
            const timer = setTimeout(() => {
                if (featureGroupRef.current && featureGroupRef.current.getLayers().length > 0) {
                     const bounds = featureGroupRef.current.getBounds();
                     if(bounds.isValid()) {
                        map.fitBounds(bounds, { padding: [50, 50], maxZoom: 16 });
                     }
                } else if (zones.length === 0 && immeubles.length === 0) {
                     map.setView([48.8566, 2.3522], 12);
                }
            }, 100);

            return () => clearTimeout(timer);
        }
    }, [map, zones, immeubles]);

    return (
        <div className="h-[70vh] w-full rounded-lg overflow-hidden">
            <MapContainer ref={setMap} center={[48.8566, 2.3522]} zoom={12} style={{ height: '100%', width: '100%' }}>
                <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' />
                
                <FeatureGroup ref={featureGroupRef}>
                    {zones.map(zone => (
                        <Circle key={zone.id} center={zone.latlng} radius={zone.radius} pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.1, weight: 2 }}>
                             <Popup><b>Zone:</b> {zone.name}<br/><b>Assignée à:</b> {zone.assignedTo}</Popup>
                        </Circle>
                    ))}
                    {immeubles.map(immeuble => (
                        <Marker key={immeuble.id} position={immeuble.latlng} icon={buildingIcon}>
                            <Popup>
                                <div className="space-y-2">
                                    <p className="font-bold">{immeuble.adresse}</p>
                                    <p className="text-sm text-muted-foreground">{immeuble.codePostal} {immeuble.ville}</p>
                                    <Button size="sm" className="bg-green-600 text-white hover:bg-green-700" onClick={() => navigate(`/admin/immeubles/${immeuble.id}`)}>
                                        <Eye className="mr-2 h-4 w-4" /> Voir les portes
                                    </Button>
                                </div>
                            </Popup>
                        </Marker>
                    ))}
                </FeatureGroup>

                {selectedImmeuble && (
                    <Marker position={selectedImmeuble.latlng} icon={focusIcon} zIndexOffset={1000}>
                        <Popup>
                            <p className="font-bold">Focus: {selectedImmeuble.adresse}</p>
                        </Popup>
                    </Marker>
                )}
            </MapContainer>
        </div>
    );
};


# --- index.css ---
/* src/index.css */
/* 
  1. NOUVELLES VARIABLES DE COULEUR "WINVEST CAPITAL"
*/
:root {
  /* Fonds et Cartes */
  --background: 255 100% 100%; /* #FFFFFF */
  --foreground: 240 10% 3.9%;   /* #0A0A0A (Presque noir pour le texte) */
  --card: 255 100% 100%;
  --card-foreground: 240 10% 3.9%;

  /* Couleurs primaires (Winvest Blue) */
  --primary: 216 70% 61%;         /* #4d86df (Bleu moyen) */
  --primary-foreground: 255 100% 100%; /* #FFFFFF (Texte sur les boutons primaires) */
  
  /* Couleurs secondaires */
  --secondary: 218 81% 83%;      /* #A5BDF1 (Bleu clair pastel) */
  --secondary-foreground: 221 100% 31%; /* #002D9F (Texte contrasté sur le secondaire) */

  /* Couleurs d'accentuation (pour les hovers, fonds subtils) */
  --accent: 0 0% 95%;           /* #F2F2F2 (Un gris très clair) */
  --accent-foreground: 240 10% 3.9%;
  
  /* Bordures et Inputs */
  --border: 0 0% 85.1%;          /* #d9d9d9 */
  --input: 0 0% 85.1%;

  /* Ring (focus) */
  --ring: 216 70% 61%;           /* #4d86df */

  /* NOUVELLES VARIABLES POUR LES ACCENTS ET DÉGRADÉS */
  --winvest-accent-purple: 259 92% 67%; /* Un violet pour les accents forts */
  --winvest-accent-cyan: 190 85% 60%;  /* Un cyan pour les dégradés */  /* Autres */

  
  --popover: 255 100% 100%;
  --popover-foreground: 240 10% 3.9%;
  --muted: 0 0% 95%;
  --muted-foreground: 240 3.8% 46.1%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  /* On définit les couleurs spécifiques mentionnées */
  --winvest-blue-clair: 218 81% 83%;    /* #A5BDF1 */
  --winvest-blue-moyen: 216 70% 61%;    /* #4d86df */
  --winvest-blue-nuit: 221 100% 31%;     /* #002D9F */
  --winvest-blue-profond: 201 77% 35%; /* #14659e */
  --winvest-grey: 0 0% 85.1%;          /* #d9d9d9 */
  --radius: 0.5rem;
}

/* On force le même thème en mode sombre pour la cohérence */
.dark {
  --background: 255 100% 100%;
  --foreground: 240 10% 3.9%;
  --card: 255 100% 100%;
  --card-foreground: 240 10% 3.9%;
  --primary: 216 70% 61%;
  --primary-foreground: 255 100% 100%;
  --secondary: 218 81% 83%;
  --secondary-foreground: 221 100% 31%;
  --accent: 0 0% 95%;
  --accent-foreground: 240 10% 3.9%;
  --border: 0 0% 85.1%;
  --input: 0 0% 85.1%;
  --ring: 216 70% 61%;
  --popover: 255 100% 100%;
  --popover-foreground: 240 10% 3.9%;
  --muted: 0 0% 95%;
  --muted-foreground: 240 3.8% 46.1%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;
}

@import "tailwindcss";

/* ... autres styles ... */

/* 
  =======================================================================
  PATCH DE DERNIER RECOURS POUR LES ÉLÉMENTS FLOTTANTS
  =======================================================================
*/

/* --- Patch pour le Dropdown Menu --- */
[data-radix-popper-content-wrapper] {
  z-index: 100 !important; /* S'assure qu'il est au-dessus de tout */
  background-color: white !important;
  border: 1px solid #EFEDED !important;
  border-radius: 0.5rem !important;
}
[data-radix-popper-content-wrapper] [role="menuitem"]:focus {
  background-color: #f4f4f5 !important;
}
/* etc. pour les autres styles du dropdown... */


/* --- Patch pour le Dialog (Modale / Popup) --- */

/* 1. Le voile d'arrière-plan */
[data-radix-dialog-overlay] {
  background-color: hsl(0 0% 0% / 0.8) !important;
  z-index: 99 !important; /* Un z-index élevé */
}

/* 2. Le contenu de la modale */
[data-radix-dialog-content-wrapper] {
  z-index: 100 !important; /* z-index PLUS ÉLEVÉ que l'overlay */
  background-color: white !important;
  border-radius: 0.5rem !important;
}

/* 3. On s'assure que le texte est lisible (au cas où il hériterait d'une couleur blanche) */
[data-radix-dialog-content-wrapper] *,
[data-radix-dialog-content-wrapper] {
  color: #09090B !important;
}

/* --- Dialog (Modale / Popup) --- */
[data-slot="dialog-overlay"] {
  z-index: 1998 !important; /* Overlay juste en dessous du contenu */
}
[data-slot="dialog-content"] {
  z-index: 1999 !important; /* Contenu de la modale au-dessus de son overlay */
}

/* --- Créateur de Zone (qui est en plein écran) --- */
[data-slot="zone-creator"] {
  z-index: 1500 !important;
}


/* ... (tout votre CSS existant) ... */

/* ======================================================= */
/*   Amélioration du style pour Leaflet GeoSearch          */
/* ======================================================= */

/* Conteneur principal de la barre de recherche */
.geosearch.bar .search-form {
  background-color: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: 0.5rem; /* Corresponds à rounded-md */
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  transition: all 150ms ease-in-out;
}

.geosearch.bar .search-form:hover {
  border-color: hsl(var(--ring));
}

/* Le champ de saisie */
.geosearch.bar .search-input {
  background-color: transparent;
  border: none;
  color: hsl(var(--foreground));
  outline: none;
}

/* Le bouton de recherche (icône loupe) */
.geosearch.bar .search-btn {
  border: none;
  border-radius: 0.375rem; /* rounded-md */
  color: hsl(var(--muted-foreground));
}
.geosearch.bar .search-btn:hover {
    background-color: hsl(var(--accent));
    color: hsl(var(--accent-foreground));
}

/* Conteneur des résultats */
.geosearch .results {
  background-color: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
}

/* Un résultat individuel */
.geosearch .results > * {
  border-bottom: 1px solid hsl(var(--border));
  color: hsl(var(--muted-foreground));
  padding-left: 1rem;
  padding-right: 1rem;
}
.geosearch .results > *:last-child {
  border-bottom: none;
}
.geosearch .results > *.active,
.geosearch .results > *:hover {
  background-color: hsl(var(--accent));
  color: hsl(var(--accent-foreground));
}



# --- pages/admin/suivi/SuiviPage.tsx ---
// frontend-shadcn/src/pages/admin/suivi/SuiviPage.tsx
import { useState, useMemo, useEffect, useRef } from 'react';
import { SuiviSidebar } from './SuiviSidebar';
import { SuiviMap } from './SuiviMap';
import { FloatingTranscriptPopup } from './FloatingTranscriptPopup';
import type { Commercial, Transcription, Zone } from './types';

// --- MOCK DATA (inchangé) ---
const MOCK_COMMERCIALS: Commercial[] = [
  { id: 'com-001', name: 'Alice Leroy', avatarFallback: 'AL', position: [48.873, 2.34], equipe: 'Alpha' },
  { id: 'com-002', name: 'Paul Girard', avatarFallback: 'PG', position: [48.858, 2.359], equipe: 'Alpha' },
  { id: 'com-003', name: 'Emma Bonnet', avatarFallback: 'EB', position: [48.887, 2.344], equipe: 'Bêta' },
  { id: 'com-004', name: 'Hugo Moreau', avatarFallback: 'HM', position: [48.865, 2.335], equipe: 'Bêta' },
];
const MOCK_TRANSCRIPTIONS: Transcription[] = [
  { id: 't-1', commercialId: 'com-001', commercialName: 'Alice Leroy', date: new Date(Date.now() - 5 * 60000), snippet: 'Bonjour, je suis Alice de Finanssor. Je vous contacte...', fullText: 'Bonjour, je suis Alice de Finanssor. Je vous contacte au sujet de votre éligibilité à notre nouvelle offre. XXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXX XXXXXXX XXXXXXX SCSFSFS ' },
];
const MOCK_ZONES: Zone[] = [
  { id: 'zone-1', name: 'Opéra', color: 'green', latlng: [48.872, 2.34], radius: 1500 },
];

const SuiviPage = () => {
  const [selectedCommercial, setSelectedCommercial] = useState<Commercial | null>(MOCK_COMMERCIALS[0] || null);
  const [selectedTranscription, setSelectedTranscription] = useState<Transcription | null>(null);
  
  const [liveText, setLiveText] = useState('');
  const [isProspecting, setIsProspecting] = useState(false);
  const [audioChunks, setAudioChunks] = useState<Blob[]>([]);
  const prospectingTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    const ws = new WebSocket('ws://localhost:8080');
    ws.onopen = () => console.log('WebSocket connecté (Admin)');
    ws.onclose = () => console.log('WebSocket déconnecté (Admin)');

    ws.onmessage = (event) => {
      // Gérer les données audio binaires
      if (event.data instanceof Blob) {
        setAudioChunks(prev => [...prev, event.data]);
        return;
      }
      
      // Gérer les données texte (transcription)
      try {
        const data = JSON.parse(event.data);
        if (data.type === 'LIVE_TRANSCRIPT' && data.payload.commercialId === selectedCommercial?.id) {
          setIsProspecting(true);
          setLiveText(data.payload.text);

          if (prospectingTimeoutRef.current) clearTimeout(prospectingTimeoutRef.current);
          prospectingTimeoutRef.current = setTimeout(() => {
            setIsProspecting(false);
          }, 3000);
        }
      } catch (error) {
          // Si ce n'est pas du JSON, on l'ignore (ça pourrait être un message de ping/pong, etc.)
      }
    };

    return () => {
      ws.close();
      if(prospectingTimeoutRef.current) clearTimeout(prospectingTimeoutRef.current);
    };
  }, [selectedCommercial]);
  
  // Vider les chunks audio à chaque fois qu'on en reçoit de nouveaux pour éviter une accumulation infinie
  useEffect(() => {
    if(audioChunks.length > 0) {
        const timer = setTimeout(() => setAudioChunks([]), 0);
        return () => clearTimeout(timer);
    }
  }, [audioChunks]);

  useEffect(() => {
    setLiveText('');
    setIsProspecting(false);
    setAudioChunks([]);
  }, [selectedCommercial]);

  const handleSelectCommercial = (commercial: Commercial) => setSelectedCommercial(commercial);
  const handleHistoryItemClick = (transcription: Transcription) => setSelectedTranscription(transcription);
  const handleClosePopup = () => setSelectedTranscription(null);

  const filteredTranscriptions = useMemo(() => {
    if (!selectedCommercial) return [];
    return MOCK_TRANSCRIPTIONS.filter(t => t.commercialId === selectedCommercial.id);
  }, [selectedCommercial]);
  
  const commercialsMap = useMemo(() => MOCK_COMMERCIALS.reduce((acc, comm) => {
    acc[comm.id] = { name: comm.name, avatarFallback: comm.avatarFallback };
    return acc;
  }, {} as { [id: string]: { name: string; avatarFallback: string } }), []);

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-8rem)]">
      <div className="lg:col-span-1 h-full flex flex-col gap-6">
        <SuiviSidebar 
          activeCommercial={selectedCommercial} 
          transcriptions={filteredTranscriptions}
          commercialsMap={commercialsMap}
          onHistoryItemClick={handleHistoryItemClick}
          liveText={liveText}
          isProspecting={isProspecting}
          audioChunks={audioChunks}
        />
      </div>
      
      <div className="lg:col-span-2 h-full relative">
        <SuiviMap 
          zones={MOCK_ZONES} 
          commercials={MOCK_COMMERCIALS}
          onMarkerClick={handleSelectCommercial}
          selectedCommercialId={selectedCommercial?.id}
        />
        {selectedTranscription && (
          <div className="absolute inset-0 z-[1000] flex items-center justify-center p-4 pointer-events-none">
            <FloatingTranscriptPopup
              transcription={selectedTranscription}
              onClose={handleClosePopup}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default SuiviPage;


# --- pages/commercial/prospection/ProspectingSetupPage.tsx ---
// src/pages/commercial/ProspectingSetupPage.tsx
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Label } from '@/components/ui-admin/label';
import { User, Users, ArrowRight, Send } from 'lucide-react';
import { cn } from '@/lib/utils';

type ProspectingMode = 'solo' | 'duo';

const ProspectingSetupPage = () => {
    const { buildingId } = useParams<{ buildingId: string }>();
    const navigate = useNavigate();
    const [mode, setMode] = useState<ProspectingMode | null>(null);
    const [duoEmail, setDuoEmail] = useState('');

    console.log(`ProspectingSetupPage loaded with buildingId: ${buildingId}`);

    const handleStartSolo = () => {
        console.log(`Navigating from ProspectingSetupPage with ID: ${buildingId}`);
        console.log(`Démarrage en SOLO pour l'immeuble ${buildingId}`);
        navigate(`/commercial/prospecting/doors/${buildingId}`);
    };

    const handleInviteDuo = () => {
        if (duoEmail) {
            console.log(`Invitation envoyée à ${duoEmail} pour l'immeuble ${buildingId}`);
            alert(`Invitation envoyée à ${duoEmail} !`);
        }
    };

    return (
        <div className="container mx-auto py-8">
            <Card className="max-w-2xl mx-auto">
                <CardHeader>
                    <CardTitle className="text-2xl flex items-center gap-3">
                        <Users className="h-6 w-6 text-primary"/>
                        Étape 2 : Mode de Prospection
                    </CardTitle>
                    <CardDescription>
                        Allez-vous prospecter seul ou en équipe aujourd'hui ?
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Card 
                            onClick={() => setMode('solo')}
                            className={cn(
                                "p-6 text-center cursor-pointer transition-all border-2",
                                mode === 'solo' ? 'border-primary shadow-lg scale-105' : 'hover:border-primary/50'
                            )}
                        >
                            <User className="mx-auto h-12 w-12 text-primary" />
                            <h3 className="mt-4 text-lg font-bold">Mode Solo</h3>
                            <p className="text-sm text-muted-foreground">Prospectez seul à votre rythme.</p>
                        </Card>
                        <Card 
                            onClick={() => setMode('duo')}
                            className={cn(
                                "p-6 text-center cursor-pointer transition-all border-2",
                                mode === 'duo' ? 'border-primary shadow-lg scale-105' : 'hover:border-primary/50'
                            )}
                        >
                            <Users className="mx-auto h-12 w-12 text-primary" />
                            <h3 className="mt-4 text-lg font-bold">Mode Duo</h3>
                            <p className="text-sm text-muted-foreground">Collaborez avec un coéquipier.</p>
                        </Card>
                    </div>

                    {mode === 'duo' && (
                        <div className="space-y-2 animate-in fade-in-0">
                            <Label htmlFor="duo-email">Email du coéquipier</Label>
                            <div className="flex gap-2">
                                <Input 
                                    id="duo-email" 
                                    type="email"
                                    placeholder="nom.prenom@winvest.capital"
                                    value={duoEmail}
                                    onChange={(e) => setDuoEmail(e.target.value)}
                                />
                                <Button 
                                    onClick={handleInviteDuo}
                                    disabled={!duoEmail}
                                    className="bg-green-600 text-white hover:bg-green-700"
                                >
                                    <Send className="mr-2 h-4 w-4" />
                                    Inviter
                                </Button>
                            </div>
                        </div>
                    )}
                </CardContent>

                {mode === 'solo' && (
                    <CardFooter className="flex justify-end">
                        <Button 
                            onClick={handleStartSolo}
                            className="bg-green-600 text-white hover:bg-green-700"
                        >
                            Commencer la prospection <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    </CardFooter>
                )}
            </Card>
        </div>
    );
};

export default ProspectingSetupPage;


# --- pages/commercial/prospection/SelectBuildingPage.tsx ---
// src/pages/commercial/SelectBuildingPage.tsx
import { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { DataTable } from '@/components/data-table/DataTable';
import type { ColumnDef, RowSelectionState } from '@tanstack/react-table';
import { Button } from '@/components/ui-admin/button';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui-admin/card';
import { ArrowRight, Building} from 'lucide-react';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';

// Type pour les données de la table
export type BuildingData = {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  nbPortes: number;
  dateAjout: Date;
};

// Données simulées pour les immeubles
const MOCK_BUILDINGS: BuildingData[] = [
  { id: 'imm-1', adresse: '10 Rue de la Paix', ville: 'Paris', codePostal: '75002', nbPortes: 25, dateAjout: new Date('2025-06-30') },
  { id: 'imm-2', adresse: '25 Bd des Capucines', ville: 'Paris', codePostal: '75009', nbPortes: 40, dateAjout: new Date('2025-06-28') },
  { id: 'imm-3', adresse: '15 Av. des Champs-Élysées', ville: 'Paris', codePostal: '75008', nbPortes: 60, dateAjout: new Date('2025-06-25') },
];

// Création des colonnes pour la DataTable
const createBuildingColumns = (setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>>): ColumnDef<BuildingData>[] => [
  {
    id: 'select',
    header: () => null,
    cell: ({ row }) => (
      <input
        type="radio"
        name="select-building"
        checked={row.getIsSelected()}
        onChange={() => setRowSelection({ [row.id]: true })}
        className="h-4 w-4 accent-primary"
      />
    ),
  },
  {
    accessorKey: 'adresse',
    header: 'Adresse',
    cell: ({ row }) => (
      <div>
        <div className="font-bold">{row.original.adresse}</div>
        <div className="text-sm text-muted-foreground">{`${row.original.codePostal} ${row.original.ville}`}</div>
      </div>
    ),
  },
  {
    accessorKey: 'nbPortes',
    header: () => <div className="text-center">Portes</div>,
    cell: ({ row }) => <div className="text-center">{row.original.nbPortes}</div>,
  },
  {
    accessorKey: 'dateAjout',
    header: () => <div className="text-right">Ajouté le</div>,
    cell: ({ row }) => (
      <div className="text-right text-muted-foreground">
        {format(row.original.dateAjout, "d MMM yyyy", { locale: fr })}
      </div>
    ),
  },
];

const SelectBuildingPage = () => {
    const navigate = useNavigate();
    const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
    
    const sortedBuildings = useMemo(() => 
        [...MOCK_BUILDINGS].sort((a, b) => b.dateAjout.getTime() - a.dateAjout.getTime()), 
        []
    );

    const columns = useMemo(() => createBuildingColumns(setRowSelection), []);

    const selectedBuildingId = Object.keys(rowSelection).length > 0 ? sortedBuildings[parseInt(Object.keys(rowSelection)[0])].id : undefined;

    const handleNext = () => {
        if (selectedBuildingId) {
            console.log(`Navigating from SelectBuildingPage with ID: ${selectedBuildingId}`);
            navigate(`/commercial/prospecting/setup/${selectedBuildingId}`);
        }
    };

    return (
        <div className="container mx-auto py-8">
            <Card className="max-w-4xl mx-auto">
                <CardHeader>
                    <CardTitle className="text-2xl flex items-center gap-3">
                        <Building className="h-6 w-6 text-primary"/>
                        Étape 1 : Sélection de l'immeuble
                    </CardTitle>
                    <CardDescription>
                        Choisissez l'immeuble que vous souhaitez prospecter. Les plus récents apparaissent en premier.
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <DataTable
                        title="Immeubles"
                        columns={columns}
                        data={sortedBuildings}
                        filterColumnId="adresse"
                        filterPlaceholder="Rechercher une adresse..."
                        rowSelection={rowSelection}
                        setRowSelection={setRowSelection}
                        isDeleteMode={false}
                        onAddEntity={() => {}}
                        onConfirmDelete={() => {}}
                        onToggleDeleteMode={() => {}}
                    />
                    <div className="flex justify-end mt-6">
                        <Button onClick={handleNext} disabled={!selectedBuildingId} className="bg-green-600 hover:bg-green-700 text-white">
                            Suivant <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
};

export default SelectBuildingPage;


# --- pages/admin/suivi/SuiviMap.tsx ---
// src/pages/admin/suivi/SuiviMap.tsx
import { useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Circle, Popup, FeatureGroup, Marker } from 'react-leaflet';
import type { Map as LeafletMap, FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { type Zone, type Commercial } from './types';

// --- Configuration des icônes ---

// Patch pour l'icône par défaut de Leaflet
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

// NOUVEAU : Icône personnalisée pour un commercial non sélectionné
const defaultIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(222.2 47.4% 11.2%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
});

// NOUVEAU : Icône personnalisée pour le commercial sélectionné (plus grosse et colorée)
const selectedIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(142.1 76.2% 44.1%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [40, 40],
    iconAnchor: [20, 40],
    popupAnchor: [0, -40],
});


// --- MODIFICATION des Props ---
interface SuiviMapProps {
  zones: Zone[];
  commercials: Commercial[];
  onMarkerClick: (commercial: Commercial) => void; // Callback pour informer le parent
  selectedCommercialId?: string; // ID du commercial sélectionné pour le style
}

export const SuiviMap = ({ zones, commercials, onMarkerClick, selectedCommercialId }: SuiviMapProps) => {
  const mapRef = useRef<LeafletMap | null>(null);
  const featureGroupRef = useRef<FeatureGroupType>(null);

  useEffect(() => {
    // Centre la carte sur tous les éléments au chargement
    if (mapRef.current && featureGroupRef.current) {
        const bounds = featureGroupRef.current.getBounds();
        if (bounds.isValid()) {
            mapRef.current.fitBounds(bounds, { padding: [50, 50] });
        }
    }
  }, [zones, commercials]);

  return (
    <div className="h-full w-full rounded-lg overflow-hidden shadow-md">
      <MapContainer 
        ref={mapRef} 
        center={[48.8566, 2.3522]} 
        zoom={12} 
        style={{ height: '100%', width: '100%' }}
      >
        <TileLayer 
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" 
          attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' 
        />
        <FeatureGroup ref={featureGroupRef}>
          {/* Affichage des zones */}
          {zones.map(zone => (
            <Circle 
              key={zone.id} 
              center={zone.latlng} 
              radius={zone.radius}
              pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2 }}
            >
              <Popup><b>Zone:</b> {zone.name}</Popup>
            </Circle>
          ))}
          {/* NOUVEAU : Affichage des commerciaux */}
          {commercials.map(commercial => (
            <Marker
              key={commercial.id}
              position={commercial.position}
              icon={selectedCommercialId === commercial.id ? selectedIcon : defaultIcon}
              eventHandlers={{
                click: () => {
                  onMarkerClick(commercial); // Appel du callback au clic
                },
              }}
              zIndexOffset={selectedCommercialId === commercial.id ? 1000 : 0} // Met le marqueur sélectionné au-dessus
            >
              <Popup><b>{commercial.name}</b><br/>Équipe {commercial.equipe}</Popup>
            </Marker>
          ))}
        </FeatureGroup>
      </MapContainer>
    </div>
  );
};


# --- pages/admin/Equipes/EquipeDetailsPage.tsx ---
// frontend-shadcn/src/pages/admin/Equipes/EquipeDetailsPage.tsx

import { useEffect, useState, useMemo } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { createColumns as createCommerciauxColumns } from "../commerciaux/commerciaux-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { ArrowLeft, Users, CheckCircle, Briefcase, Target, Trophy } from "lucide-react";
import { Skeleton } from "@/components/ui-admin/skeleton";
import StatCard from "@/components/ui-admin/StatCard";
import { GenericLineChart } from "@/components/charts/GenericLineChart";
import { equipeService, type EquipeDetailsFromApi } from "@/services/equipe.service";

const EquipeDetailsPage = () => {
  const { equipeId } = useParams<{ equipeId: string }>();
  const navigate = useNavigate();
  const [equipeDetails, setEquipeDetails] = useState<EquipeDetailsFromApi | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (equipeId) {
      setLoading(true);
      equipeService.getEquipeDetails(equipeId)
        .then(data => {
          setEquipeDetails(data);
        })
        .catch(error => {
          console.error("Erreur lors de la récupération des détails de l'équipe:", error);
          setEquipeDetails(null); // Reset in case of error
        })
        .finally(() => {
          setLoading(false);
        });
    }
  }, [equipeId]);

  const commerciauxColumns = useMemo(() => {
    const allCols = createCommerciauxColumns(false, () => {}); // Pas de mode suppression
    // On exclut les colonnes 'manager' et 'equipe' car redondantes ici
    return allCols.filter(col => col.id !== 'manager' && col.id !== 'equipe');
  }, []);

  if (loading) {
    return (
        <div className="space-y-6 animate-pulse">
            <Skeleton className="h-10 w-48" />
            <Skeleton className="h-24 w-full" />
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                {[...Array(4)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}
            </div>
            <Skeleton className="h-96 w-full" />
            <Skeleton className="h-96 w-full" />
        </div>
    )
  }

  if (!equipeDetails) {
    return <div>Équipe non trouvée ou erreur de chargement.</div>;
  }

  return (
    <div className="space-y-8">
      <Button variant="outline" onClick={() => navigate(-1)}>
        <ArrowLeft className="mr-2 h-4 w-4" />
        Retour à la liste des équipes
      </Button>

      <div className="space-y-2">
        <h1 className="text-3xl font-bold flex items-center gap-3">
            <Users className="h-8 w-8 text-primary" />
            Équipe {equipeDetails.nom}
        </h1>
        <p className="text-muted-foreground">Manager : {equipeDetails.manager}</p>
      </div>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard title="Contrats Signés" value={equipeDetails.stats.contratsSignes} Icon={CheckCircle} color="text-emerald-500" />
        <StatCard title="RDV Pris" value={equipeDetails.stats.rdvPris} Icon={Briefcase} color="text-sky-500"/>
        <StatCard title="Performance Moyenne" value={equipeDetails.stats.perfMoyenne} Icon={Target} suffix="%" color="text-amber-500"/>
        <StatCard title="Classement Général" value={Number(equipeDetails.stats.classementGeneral)} Icon={Trophy} prefix="#" color="text-yellow-500"/>
      </div>

      <GenericLineChart
        title="Évolution de la Performance de l'Équipe"
        data={equipeDetails.perfHistory}
        xAxisDataKey="name"
        lines={[{ dataKey: 'perf', stroke: 'hsl(var(--chart-2))', name: 'Performance (%)' }]}
      />

      <DataTable 
        columns={commerciauxColumns as any} 
        data={equipeDetails.commerciaux} 
        title={`Membres de l'équipe (${equipeDetails.commerciaux.length})`}
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de commercial..."
        isDeleteMode={false}
        onToggleDeleteMode={() => {}}
        rowSelection={{}}
        setRowSelection={() => {}}
        onConfirmDelete={() => {}}
      />
    </div>
  )
}

export default EquipeDetailsPage;


# --- components/ui-admin/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        onPointerDownOutside={(e) => {
          const target = e.target as HTMLElement;
          if (target.closest('[data-radix-select-content]')) {
            e.preventDefault();
          }
        }}
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



# --- components/ui-admin/alert-dialog.tsx ---
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui-admin/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



# --- pages/admin/zones/columns.tsx ---
// frontend-shadcn/src/pages/admin/zones/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { format } from "date-fns"
import { fr } from "date-fns/locale"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { ArrowUpDown, Edit, Calendar, Eye } from "lucide-react"
import { Link } from "react-router-dom";

export interface Zone {
  id: string;
  name: string;
  assignedTo: string;
  color: string;
  latlng: [number, number];
  radius: number;
  dateCreation: string;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createZoneColumns = (isDeleteMode: boolean, onEdit: (zone: Zone) => void): ColumnDef<Zone>[] => [
    // Colonne de sélection conditionnelle
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: any) => (<Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />),
      cell: ({ row }: any) => (<Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" onClick={(e) => e.stopPropagation()} />),
      enableSorting: false, enableHiding: false,
    }] : []),
    {
        accessorKey: "name",
        header: ({ column }) => <SortableHeader title="Nom de la zone" column={column} />,
        cell: ({ row }) => <div className="font-medium text-foreground">{row.original.name}</div>,
    },
    {
        accessorKey: "assignedTo",
        header: ({ column }) => <SortableHeader title="Assignée à" column={column} />,
        cell: ({ row }) => {
            const { color, assignedTo } = row.original;
            const badgeStyle = color ? { backgroundColor: color, color: 'white', borderColor: 'transparent' } : {};
            return ( <Badge style={badgeStyle} className="border-transparent">{assignedTo}</Badge> )
        }
    },
    {
        accessorKey: "dateCreation",
        header: ({ column }) => <SortableHeader title="Date d'ajout" column={column} />,
        cell: ({ row }) => (
            <div className="flex items-center gap-2 text-muted-foreground">
                <Calendar className="h-4 w-4" />
                <span>{format(new Date(row.original.dateCreation), "d LLL yyyy", { locale: fr })}</span>
            </div>
        )
    },
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => (
            <div className="text-right space-x-2">
                <Button asChild variant="ghost" size="icon">
                    <Link to={`/admin/zones/${row.original.id}`} onClick={(e) => e.stopPropagation()}>
                        <Eye className="h-4 w-4" />
                        <span className="sr-only">Voir les détails</span>
                    </Link>
                </Button>
                <Button variant="ghost" size="icon" onClick={(e) => { e.stopPropagation(); onEdit(row.original); }}>
                    <Edit className="h-4 w-4" />
                    <span className="sr-only">Modifier la zone</span>
                </Button>
            </div>
        ),
    },
];


# --- pages/admin/immeubles/portes/portes-columns.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/portes/portes-columns.tsx

"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Badge } from "@/components/ui-admin/badge"
import { ArrowUpDown, Hash, MessageSquare, Repeat } from "lucide-react"
import { Button } from "@/components/ui-admin/button"

// --- 1. MISE À JOUR DU TYPE Porte avec les nouveaux statuts ---
export type Porte = {
  id: string
  numeroPorte: string
  statut: "Non visité" | "Visité" | "Absent" | "Refus" | "Curieux" | "Contrat signé"
  passage: number
  commentaire: string
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

// --- 2. MISE À JOUR de la configuration des couleurs des badges ---
const statusConfig = {
    "Non visité": "bg-gray-100 text-gray-800 border-gray-300",
    "Visité": "bg-blue-100 text-blue-800 border-blue-300",
    "Absent": "bg-yellow-100 text-yellow-800 border-yellow-300",
    "Refus": "bg-red-100 text-red-800 border-red-300",
    "Curieux": "bg-purple-100 text-purple-800 border-purple-300",
    "Contrat signé": "bg-green-100 text-green-800 border-green-300",
};

export const createPortesColumns = (): ColumnDef<Porte>[] => [
    {
      accessorKey: "numeroPorte",
      header: ({ column }) => <SortableHeader title="Porte" column={column} />,
      cell: ({ row }) => (
        <div className="flex items-center gap-2 font-medium">
            <Hash className="h-4 w-4 text-muted-foreground" />
            <span>{row.original.numeroPorte}</span>
        </div>
      ),
      meta: { className: "w-[120px]" },
    },
    {
      accessorKey: "statut",
      header: ({ column }) => <SortableHeader title="Statut" column={column} />,
      cell: ({ row }) => {
        const statut = row.original.statut;
        return <Badge variant="outline" className={statusConfig[statut]}>{statut}</Badge>
      }
    },
    {
      accessorKey: "passage",
      header: ({ column }) => <SortableHeader title="Passage" column={column} />,
      cell: ({ row }) => {
        const { statut, passage } = row.original;
        
        // --- 3. MISE À JOUR de la logique de repassage ---
        // Le repassage est applicable pour "Absent" et "Curieux".
        const isRepassageApplicable = statut === 'Absent' || statut === 'Curieux';

        if (!isRepassageApplicable || passage === 0) {
            return <span className="text-muted-foreground">-</span>;
        }

        return (
            <div className="flex items-center gap-2">
                <Repeat className="h-4 w-4 text-muted-foreground" />
                <span>{`Passage n°${passage}`}</span>
            </div>
        );
      }
    },
    {
      accessorKey: "commentaire",
      header: () => <Header title="Commentaire" />,
      cell: ({ row }) => {
        const commentaire = row.original.commentaire;
        if (!commentaire) return <span className="text-muted-foreground italic">Aucun</span>;
        return (
            <div className="flex items-start gap-2">
                <MessageSquare className="h-4 w-4 text-muted-foreground mt-1 shrink-0" />
                <span className="max-w-xs truncate">{commentaire}</span>
            </div>
        )
      },
    },
]


# --- components/ui-admin/ustomDatePicker.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CustomDatePicker.tsx 
// (Ou à l'intérieur de CommercialDetailsPage.tsx)
import React from 'react';
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { Calendar as CalendarIcon } from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Calendar } from "@/components/ui-admin/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover";

interface CustomDatePickerProps {
  onCancel: () => void;
  onValidate: (range: { from: Date; to: Date }) => void;
}

export const CustomDatePicker = ({ onCancel, onValidate }: CustomDatePickerProps) => {
    const [startDate, setStartDate] = React.useState<Date | undefined>();
    const [endDate, setEndDate] = React.useState<Date | undefined>();

    // Ferme le popover après sélection
    const handleStartDateSelect = (date?: Date) => {
        setStartDate(date);
    };

    const handleEndDateSelect = (date?: Date) => {
        setEndDate(date);
    };

    return (
        <div className="flex flex-wrap items-center gap-2 rounded-lg border p-2 bg-background shadow-sm">
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" className="w-[200px] font-normal justify-start text-left">
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {startDate ? format(startDate, 'd LLL y', { locale: fr }) : <span>Date de début</span>}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                    <Calendar
                        mode="single"
                        selected={startDate}
                        onSelect={handleStartDateSelect}
                        initialFocus
                        locale={fr}
                    />
                </PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" className="w-[200px] font-normal justify-start text-left">
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {endDate ? format(endDate, 'd LLL y', { locale: fr }) : <span>Date de fin</span>}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                    <Calendar
                        mode="single"
                        selected={endDate}
                        onSelect={handleEndDateSelect}
                        initialFocus
                        locale={fr}
                    />
                </PopoverContent>
            </Popover>
            <Button 
                className="bg-green-600 hover:bg-green-700" 
                onClick={() => onValidate({ from: startDate!, to: endDate! })} 
                disabled={!startDate || !endDate}
            >
                Valider
            </Button>
            <Button variant="ghost" onClick={onCancel}>
                Annuler
            </Button>
        </div>
    );
};


# --- pages/admin/suivi/HistoryList.tsx ---
// src/pages/admin/suivi/HistoryList.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { ScrollArea } from '@/components/ui-admin/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { formatDistanceToNow } from 'date-fns';
import { fr } from 'date-fns/locale';
import type { Transcription } from './types';
import { ArchiveX } from 'lucide-react'; // Importer une icône pour l'état vide

interface HistoryListProps {
  transcriptions: Transcription[];
  onHistoryItemClick: (transcription: Transcription) => void;
  commercials: { [id: string]: { name: string; avatarFallback: string } };
}

export const HistoryList = ({ transcriptions, onHistoryItemClick, commercials }: HistoryListProps) => {
  return (
    <Card className="flex-1 flex flex-col h-full bg-white shadow-md">
      <CardHeader>
        <CardTitle>Historique des transcriptions</CardTitle>
        <CardDescription>Derniers appels enregistrés pour ce commercial.</CardDescription>
      </CardHeader>
      <CardContent className="p-0 flex-1 overflow-hidden">
        <ScrollArea className="h-full">
          {transcriptions.length > 0 ? (
            <div className="space-y-0">
              {transcriptions.map((item) => (
                <div
                  key={item.id}
                  onClick={() => onHistoryItemClick(item)}
                  // AMÉLIORATION : Style de chaque item de la liste
                  className="flex items-start gap-4 p-4 border-b border-zinc-200 hover:bg-zinc-100 cursor-pointer transition-colors"
                >
                  <Avatar>
                    <AvatarFallback className="bg-zinc-200 text-zinc-700">
                      {commercials[item.commercialId]?.avatarFallback || '?'}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    <div className="flex justify-between items-center">
                      <p className="font-semibold">{item.commercialName}</p>
                      <p className="text-xs text-muted-foreground">
                        {formatDistanceToNow(item.date, { addSuffix: true, locale: fr })}
                      </p>
                    </div>
                    <p className="text-sm text-muted-foreground line-clamp-2 mt-1">
                      {item.snippet}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            // AMÉLIORATION : Gestion de l'état vide
            <div className="flex flex-col items-center justify-center h-full text-muted-foreground text-center p-8">
                <ArchiveX className="h-12 w-12 mb-4" />
                <p className="font-semibold">Aucun historique</p>
                <p className="text-sm">Aucun appel n'a été enregistré pour ce commercial.</p>
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
};


# --- pages/admin/statitistiques/LeaderboardTable.tsx ---
// src/pages/admin/statitistiques/LeaderboardTable.tsx

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui-admin/table';
import { Badge } from '@/components/ui-admin/badge';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { cn } from '@/lib/utils';

interface Performer {
  rank: number;
  name: string;
  avatar: string;
  value: number;
  change: number;
}

interface LeaderboardTableProps {
  title: string;
  description: string;
  data: Performer[];
  unit: string;
}

const rankColor = (rank: number) => {
    if (rank === 1) return "bg-yellow-400/20 text-yellow-700 border-yellow-400/50";
    if (rank === 2) return "bg-slate-400/20 text-slate-700 border-slate-400/50";
    if (rank === 3) return "bg-orange-400/20 text-orange-700 border-orange-400/50";
    return "bg-gray-100 text-gray-600 border-transparent";
}

export const LeaderboardTable = ({ title, description, data, unit }: LeaderboardTableProps) => {
  return (
    <Card className="h-full shadow-lg border border-gray-200 rounded-xl overflow-hidden transition-all duration-300 hover:shadow-xl">
      <CardHeader className="bg-gray-50 border-b border-gray-200 py-4 px-6">
        <CardTitle className="text-lg font-semibold text-gray-800">{title}</CardTitle>
        <CardDescription className="text-sm text-gray-600">{description}</CardDescription>
      </CardHeader>
      <CardContent className="p-0">
        <Table>
          <TableHeader>
            <TableRow className="bg-gray-50">
              <TableHead className="w-[50px] text-gray-600">Rank</TableHead>
              <TableHead className="text-gray-600">Nom</TableHead>
              <TableHead className="text-right text-gray-600">{unit}</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((item) => (
              <TableRow key={item.rank} className="hover:bg-gray-50 transition-colors duration-200">
                <TableCell>
                    <Badge variant="outline" className={cn("font-bold text-sm", rankColor(item.rank))}>
                        {item.rank}
                    </Badge>
                </TableCell>
                <TableCell className="font-medium flex items-center gap-3 text-gray-800">
                    <Avatar className="h-8 w-8 border border-gray-200">
                        <AvatarFallback className="bg-gray-200 text-gray-700 text-sm font-semibold">{item.avatar}</AvatarFallback>
                    </Avatar>
                    {item.name}
                </TableCell>
                <TableCell className="text-right font-bold text-lg text-gray-900">{item.value}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};


# --- pages/commercial/dashboard/ZoneFocusMap.tsx ---
// src/pages/commercial/ZoneFocusMap.tsx
import { MapContainer, TileLayer, Circle, Marker, Popup } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

// Patch pour les icônes Leaflet
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});
const buildingIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#09090B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-building-2"><path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"/><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"/><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"/><path d="M10 6h4"/><path d="M10 10h4"/><path d="M10 14h4"/><path d="M10 18h4"/></svg>'),
    iconSize: [28, 28],
});

interface ZoneFocusMapProps {
  zone: {
    nom: string;
    latlng: [number, number];
    radius: number;
    color: string;
  };
  immeubles: {
    id: string;
    adresse: string;
    latlng: [number, number];
  }[];
}

export const ZoneFocusMap = ({ zone, immeubles }: ZoneFocusMapProps) => {
  return (
    // --- MODIFICATION ICI ---
    <div className="relative z-10 h-full w-full rounded-lg overflow-hidden border-2 border-[hsl(var(--winvest-blue-clair))]">
        <MapContainer 
            center={zone.latlng} 
            zoom={14} 
            style={{ height: '100%', width: '100%' }}
            dragging={false}
            zoomControl={false}
            scrollWheelZoom={false}
            doubleClickZoom={false}
            touchZoom={false}
        >
            <TileLayer
                attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            <Circle 
                center={zone.latlng} 
                radius={zone.radius}
                pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2 }}
            >
                <Popup>{zone.nom}</Popup>
            </Circle>

            {immeubles.map(imm => (
                <Marker key={imm.id} position={imm.latlng} icon={buildingIcon}>
                    <Popup>{imm.adresse}</Popup>
                </Marker>
            ))}
        </MapContainer>
    </div>
  );
};


# --- components/ui-admin/DatePickerWithPresets.tsx ---
// src/components/ui/DatePickerWithPresets.tsx

import { format } from "date-fns"
import { fr } from "date-fns/locale"
import type { DateRange } from "react-day-picker"
import { Calendar as CalendarIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui-admin/button"
import { Calendar } from "@/components/ui-admin/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover"

interface DatePickerWithPresetsProps {
  className?: string
  selectedDate: DateRange | undefined
  onDateChange: (date: DateRange | undefined) => void
  onPresetSelect: (preset: string) => void
}

export function DatePickerWithPresets({
  className,
  selectedDate,
  onDateChange,
  onPresetSelect,
}: DatePickerWithPresetsProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          id="date"
          variant="outline"
          className={cn(
            "w-[280px] justify-start text-left font-normal h-11",
            !selectedDate && "text-muted-foreground",
            className
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {selectedDate?.from ? (
            selectedDate.to ? (
              <>
                {format(selectedDate.from, "d LLL y", { locale: fr })} -{" "}
                {format(selectedDate.to, "d LLL y", { locale: fr })}
              </>
            ) : (
              format(selectedDate.from, "d LLL y", { locale: fr })
            )
          ) : (
            <span>Choisir une période</span>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="flex w-auto flex-col space-y-2 p-2" align="end">
        <div className="flex items-center gap-2">
            <Button variant="ghost" size="sm" onClick={() => onPresetSelect('week')}>Cette semaine</Button>
            <Button variant="ghost" size="sm" onClick={() => onPresetSelect('month')}>Ce mois</Button>
            <Button variant="ghost" size="sm" onClick={() => onPresetSelect('year')}>Cette année</Button>
        </div>
        <div className="rounded-md border">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={selectedDate?.from}
            selected={selectedDate}
            onSelect={onDateChange}
            numberOfMonths={2}
            locale={fr}
          />
        </div>
      </PopoverContent>
    </Popover>
  )
}


# --- pages/admin/suivi/FloatingTranscriptPopup.tsx ---
// src/pages/admin/suivi/FloatingTranscriptPopup.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { ScrollArea } from '@/components/ui-admin/scroll-area';
import { X } from 'lucide-react';
import type { Transcription } from './types';

interface FloatingTranscriptPopupProps {
  transcription: Transcription | null;
  onClose: () => void;
}

export const FloatingTranscriptPopup = ({ transcription, onClose }: FloatingTranscriptPopupProps) => {
  if (!transcription) {
    return null;
  }

  return (
    // AMÉLIORATION : Le conteneur ne gère plus la position, seulement l'animation et la taille.
    // La classe `pointer-events-auto` est cruciale pour rendre la carte cliquable.
    <div className="w-full max-w-lg pointer-events-auto animate-in fade-in-0 zoom-in-95 duration-300">
      <Card className="bg-white/95 backdrop-blur-sm shadow-xl border-zinc-200/80 flex flex-col h-[calc(100vh-12rem)] max-h-[650px]">
        <CardHeader className="flex flex-row items-center justify-between p-4 border-b border-zinc-200/80">
          <div>
            {/* AMÉLIORATION : Typographie du titre et de la description */}
            <CardTitle className="text-lg font-bold text-zinc-800 tracking-tight">
              Appel de {transcription.commercialName}
            </CardTitle>
            <CardDescription className="text-xs tracking-wider uppercase text-zinc-500 mt-1">
              {transcription.date.toLocaleDateString('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
            </CardDescription>
          </div>
          {/* AMÉLIORATION : Style du bouton de fermeture */}
          <Button variant="ghost" size="icon" onClick={onClose} className="shrink-0 text-zinc-500 hover:bg-zinc-100 hover:text-zinc-800 rounded-full">
            <X className="h-5 w-5" />
            <span className="sr-only">Fermer</span>
          </Button>
        </CardHeader>
        <CardContent className="flex-1 p-0">
          <ScrollArea className="h-full">
            {/* AMÉLIORATION : Typographie du contenu pour meilleure lisibilité */}
            <p className="text-base whitespace-pre-wrap leading-relaxed text-zinc-700 p-6">
              {transcription.fullText}
            </p>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
};


# --- components/ui-admin/ViewToggleContainer.tsx ---
// frontend-shadcn/src/components/ui/ViewToggleContainer.tsx
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { Table as TableIcon, Map as MapIcon } from 'lucide-react';
import { cn } from '@/lib/utils'; // N'oubliez pas d'importer 'cn'

interface ViewToggleContainerProps {
  title: string;
  description: string;
  view: 'table' | 'map';
  onViewChange: (view: 'table' | 'map') => void;
  tableComponent: React.ReactNode;
  mapComponent: React.ReactNode;
}

export const ViewToggleContainer = ({
  title,
  description,
  view,
  onViewChange,
  tableComponent,
  mapComponent
}: ViewToggleContainerProps) => {
  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <div className="flex flex-wrap items-start justify-between gap-4">
          <div>
            <CardTitle>{title}</CardTitle>
            <CardDescription>{description}</CardDescription>
          </div>
          <div className="flex-shrink-0 flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
            {/* --- CORRECTION DES BOUTONS ICI --- */}
            <Button
              variant='ghost'
              className={cn("transition-all", view === 'table' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')}
              onClick={() => onViewChange('table')}
            >
              <TableIcon className="mr-2 h-4 w-4" /> Tableau
            </Button>
            <Button
              variant='ghost'
              className={cn("transition-all", view === 'map' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')}
              onClick={() => onViewChange('map')}
            >
              <MapIcon className="mr-2 h-4 w-4" /> Carte
            </Button>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="flex-1 p-0">
        {view === 'table' && <div className="animate-in fade-in-0 p-6 pt-0">{tableComponent}</div>}
        {view === 'map' && <div className="animate-in fade-in-0 h-full p-0">{mapComponent}</div>}
      </CardContent>
    </Card>
  );
};


# --- components/MapComponent.tsx ---
import React, { useEffect, useRef } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

interface MapComponentProps {
  latitude: number;
  longitude: number;
  zoom: number;
  radius?: number; // Optional radius for drawing a circle
  color?: string; // New: Optional color for the circle
}

const MapComponent: React.FC<MapComponentProps> = ({ latitude, longitude, zoom, radius, color = 'blue' }) => {
  const mapRef = useRef<L.Map | null>(null);
  const circleRef = useRef<L.Circle | null>(null);
  const mapContainerRef = useRef<HTMLDivElement>(null);

  // Effect for map initialization and cleanup
  useEffect(() => {
    if (mapContainerRef.current && !mapRef.current) {
      mapRef.current = L.map(mapContainerRef.current).setView([latitude, longitude], zoom);

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(mapRef.current);
    }

    // eslint-disable-next-line react-hooks/exhaustive-deps
    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
        mapRef.current = null;
      }
    };
  }, []); // Empty dependency array: runs once on mount, cleans up on unmount

  // Effect for updating map layers and view
  useEffect(() => {
    const map = mapRef.current;
    if (!map) return; // Ensure map is initialized before proceeding

    // Remove existing circle if any
    if (circleRef.current) {
      map.removeLayer(circleRef.current);
      circleRef.current = null;
    }

    // Add new circle and fit bounds if radius is provided
    if (radius) {
      const center = L.latLng(latitude, longitude);
      const circle = L.circle(center, { radius: radius, color: color, fillColor: color, fillOpacity: 0.2 });
      circle.addTo(map);
      map.fitBounds(circle.getBounds());
      circleRef.current = circle;
    } else {
      // If no radius, just set view
      map.setView([latitude, longitude], zoom);
    }
  }, [latitude, longitude, zoom, radius]); // Dependencies: map instance and props that affect view/layers

  return <div id="map-container" ref={mapContainerRef} className="h-full w-full rounded-lg shadow-md"></div>;
};

export default MapComponent;



# --- layout/AdminNavContent.tsx ---
// src/layout/AdminNavContent.tsx
import { NavLink } from 'react-router-dom';
import { Button } from '@/components/ui-admin/button';
import { Users, Flag, PieChart, MapPin, FileText, Settings, LayoutDashboard, AudioLines, Building2, Target } from 'lucide-react';

// Liens spécifiques à l'administrateur
const adminNavLinks = [
  { to: '/admin', text: 'Tableau de Bord', icon: LayoutDashboard }, 
  { to: '/admin/managers', text: 'Managers', icon: Users },
  { to: '/admin/commerciaux', text: 'Commerciaux', icon: Users },
  { to: '/admin/equipes', text: 'Equipes', icon: Flag },
  { to: '/admin/immeubles', text: 'Immeubles', icon: Building2 },
  { to: '/admin/suivi', text: 'Suivi', icon: AudioLines },
  { to: '/admin/zones', text: 'Zones', icon: MapPin },
  { to: '/admin/assignations-objectifs', text: 'Assignations & Objectifs', icon: Target },
  { to: '/admin/statistiques', text: 'Statistiques', icon: PieChart },
  { to: '/admin/rapports', text: 'Rapports & exports', icon: FileText },
  { to: '/admin/parametres', text: 'Paramètres', icon: Settings },
];

interface AdminNavContentProps {
  isCollapsed: boolean;
  onLinkClick?: () => void;
}

export const AdminNavContent = ({ isCollapsed, onLinkClick }: AdminNavContentProps) => {
  return (
    <nav className="flex flex-col gap-1 px-2">
      {adminNavLinks.map((link) => (
        <NavLink to={link.to} key={link.text} end={link.to === '/admin'} onClick={onLinkClick}>
          {({ isActive }) => (
            <Button
              variant={isActive ? 'secondary' : 'ghost'}
              className={`w-full justify-start gap-3 h-10 transition-colors duration-200 ${
                isActive
                  ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]'
                  : 'hover:bg-zinc-100 text-black'
              }`}
            >
              <link.icon className="h-5 w-5" />
              {!isCollapsed && <span className="truncate">{link.text}</span>}
            </Button>
          )}
        </NavLink>
      ))}
    </nav>
  );
};


# --- components/charts/GenericLineChart.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface ChartDataItem {
  [key: string]: string | number;
}

interface LineConfig {
  dataKey: string;
  stroke: string;
  name?: string; 
}

interface GenericLineChartProps {
  title: string;
  data: ChartDataItem[];
  xAxisDataKey: string;
  lines: LineConfig[];
}

export const GenericLineChart = ({ title, data, xAxisDataKey, lines }: GenericLineChartProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={350}> 
          <LineChart data={data} margin={{ top: 5, right: 20, left: -10, bottom: 20 }}>
            <CartesianGrid strokeDasharray="3 3" vertical={false} />
            <XAxis dataKey={xAxisDataKey} stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
            <YAxis stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: 'hsl(var(--background))', 
                borderColor: 'hsl(var(--border))',
                borderRadius: '0.5rem',
                boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
              }} 
            />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: '20px' }}/>
            {lines.map(line => (
              <Line 
                key={line.dataKey} 
                type="monotone" 
                dataKey={line.dataKey} 
                stroke={line.stroke} 
                strokeWidth={2} 
                dot={{ r: 4 }}
                name={line.name || line.dataKey} 
                activeDot={{ r: 6 }}
              />
            ))}
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/StatCard.tsx ---
// src/components/ui-admin/StatCard.tsx

import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui-admin/card';
import type { LucideIcon } from 'lucide-react';
import CountUp from 'react-countup';
import { cn } from '@/lib/utils';
import { ArrowUp, ArrowDown } from 'lucide-react';

interface StatCardProps {
  title: string;
  value: number;
  Icon: LucideIcon;
  prefix?: string;
  suffix?: string;
  color?: string;
  change?: number;
}

const StatCard = ({ title, value, Icon, prefix, suffix, color, change }: StatCardProps) => {
  const isPositive = change !== undefined && change >= 0;

  return (
    <Card className="transition-all duration-300 hover:scale-[1.02] hover:shadow-xl border border-gray-200 rounded-xl overflow-hidden">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium text-gray-600">{title}</CardTitle>
        <Icon className={cn("h-5 w-5 text-gray-500", color)} />
      </CardHeader>
      <CardContent>
        <div className="text-3xl font-bold text-gray-900">
          {typeof value === 'number' && !isNaN(value) ? (
            <CountUp
              start={0}
              end={value}
              duration={1.5}
              separator=" "
              prefix={prefix}
              suffix={suffix}
              decimals={value % 1 !== 0 ? 1 : 0}
            />
          ) : (
            <span className="text-muted-foreground">N/A</span>
          )}
        </div>
        {change !== undefined && (
          <p className={cn(
             "text-xs flex items-center gap-1 mt-1",
             isPositive ? "text-emerald-600" : "text-red-600"
          )}>
            {isPositive ? <ArrowUp className="h-3 w-3" /> : <ArrowDown className="h-3 w-3" />}
            <span>
              {isPositive && '+'}{change.toFixed(1)}% vs période précédente
            </span>
        </p>
        )}
      </CardContent>
    </Card>
  );
};

export default StatCard;


# --- send_to_gemini.py ---
import os

EXCLUDED_DIRS = {"node_modules", ".git", ".next", ".turbo", "dist", "build"}
TEXT_EXTENSIONS = {'.ts', '.tsx', '.js', '.jsx', '.json', '.html', '.css', '.md', '.txt', '.py'}

def get_all_files(root_dir):
    result = []

    for foldername, _, filenames in os.walk(root_dir):
        if any(excluded in foldername for excluded in EXCLUDED_DIRS):
            continue

        for filename in filenames:
            filepath = os.path.join(foldername, filename)
            ext = os.path.splitext(filename)[1].lower()
            if ext in TEXT_EXTENSIONS:
                result.append(filepath)

    return result

def read_file_content(filepath):
    try:
        with open(filepath, "r", encoding="utf-8", errors="ignore") as f:
            return f.read()
    except:
        return ""

def export_balanced_parts(root_dir, output_base="code_part"):
    all_files = get_all_files(root_dir)

    # Lire tous les fichiers avec leur contenu
    file_entries = []
    for path in all_files:
        content = read_file_content(path)
        relative_path = os.path.relpath(path, root_dir)
        wrapped_content = f"\n\n# --- {relative_path} ---\n{content}\n"
        file_entries.append((relative_path, wrapped_content, len(wrapped_content)))

    # Trier les fichiers par taille (descendant)
    file_entries.sort(key=lambda x: x[2], reverse=True)

    part1, part2 = [], []
    size1, size2 = 0, 0

    for _, content, size in file_entries:
        if size1 <= size2:
            part1.append(content)
            size1 += size
        else:
            part2.append(content)
            size2 += size

    with open(f"{output_base}1.txt", "w", encoding="utf-8") as f1:
        f1.writelines(part1)

    with open(f"{output_base}2.txt", "w", encoding="utf-8") as f2:
        f2.writelines(part2)

    print(f"✅ Fichiers générés : {output_base}1.txt ({size1} car.), {output_base}2.txt ({size2} car.)")

if __name__ == "__main__":
    export_balanced_parts("./")



# --- components/ui-admin/tooltip.tsx ---
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



# --- pages/admin/statitistiques/StatistiquesSkeleton.tsx ---
// src/pages/admin/statistiques/StatistiquesSkeleton.tsx
import { Skeleton } from "@/components/ui-admin/Skeleton";

export const StatistiquesSkeleton = () => {
  return (
    <div className="space-y-8">
      {/* Header Skeleton */}
      <div className="flex flex-wrap gap-4 justify-between items-center border-b pb-4">
        <Skeleton className="h-9 w-1/3" />
        <div className="flex items-center gap-2">
          <Skeleton className="h-10 w-[180px]" />
          <Skeleton className="h-10 w-[180px]" />
        </div>
        <Skeleton className="h-10 w-[250px]" />
      </div>

      {/* KPIs Skeleton */}
      <section>
        <Skeleton className="h-6 w-1/4 mb-4" />
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Skeleton className="h-28 w-full" />
          <Skeleton className="h-28 w-full" />
          <Skeleton className="h-28 w-full" />
          <Skeleton className="h-28 w-full" />
        </div>
      </section>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column */}
        <div className="lg:col-span-2 space-y-6">
          <section>
            <Skeleton className="h-6 w-1/4 mb-4" />
            <Skeleton className="h-80 w-full" />
          </section>
          <section>
            <Skeleton className="h-6 w-1/4 mb-4" />
            <Skeleton className="h-80 w-full" />
          </section>
        </div>

        {/* Right Column */}
        <div className="lg:col-span-1 space-y-6">
          <section>
            <Skeleton className="h-6 w-1/4 mb-4" />
            <Skeleton className="h-96 w-full" />
          </section>
          <section>
            <Skeleton className="h-6 w-1/4 mb-4" />
            <Skeleton className="h-96 w-full" />
          </section>
        </div>
      </div>
    </div>
  );
};


# --- layout/CommercialNavContent.tsx ---
// src/layout/CommercialNavContent.tsx
import { NavLink } from 'react-router-dom';
import { Button } from '@/components/ui-admin/button';
import { 
    LayoutDashboard, 
    Target, 
    History, 
    BarChart2, 
    User as UserIcon 
} from 'lucide-react';
import { cn } from '@/lib/utils';

const commercialNavLinks = [
    { to: '/commercial/dashboard', text: 'Tableau de bord', icon: LayoutDashboard, exact: true },
    { to: '/commercial/prospecting', text: 'Prospection', icon: Target, exact: false },
    { to: '/commercial/history', text: 'Historique', icon: History, exact: true },
    { to: '/commercial/stats', text: 'Mes statistiques', icon: BarChart2, exact: true },
    { to: '/commercial/profile', text: 'Profil', icon: UserIcon, exact: true },
];

interface CommercialNavContentProps {
  isCollapsed: boolean;
  onLinkClick?: () => void;
}

export const CommercialNavContent = ({ isCollapsed, onLinkClick }: CommercialNavContentProps) => {
  return (
    <nav className="flex flex-col gap-1 px-2">
      {commercialNavLinks.map((link) => (
        // --- CORRECTION DÉFINITIVE ICI ---
        <NavLink to={link.to} key={link.text} onClick={onLinkClick} end={link.exact}>
          {({ isActive }) => (
            <Button
              variant='ghost'
              className={cn(
                "w-full justify-start gap-3 h-10 transition-colors duration-200",
                isActive
                  ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] font-semibold hover:bg-[hsl(var(--winvest-blue-clair))]'
                  : 'hover:bg-zinc-100 text-black'
              )}
            >
              <link.icon className="h-5 w-5" />
              {!isCollapsed && <span className="truncate">{link.text}</span>}
            </Button>
          )}
        </NavLink>
      ))}
    </nav>
  );
};


# --- components/page-components/ZoneMapViewer.tsx ---
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import MapComponent from '@/components/MapComponent';
import { Map, Pin } from 'lucide-react';
import type { Zone } from '@/types/types';

interface ZoneMapViewerProps {
  zone: Zone | null;
}

export const ZoneMapViewer = ({ zone }: ZoneMapViewerProps) => {
  return (
    <Card className="shadow-md hover:shadow-lg transition-shadow h-full flex flex-col">
      <CardHeader>
        <CardTitle className="flex items-center text-purple-600">
          <Pin className="mr-3 h-6 w-6" /> Visualisation de la Zone
        </CardTitle>
        <CardDescription>
          {zone ? `Détails pour la zone : ${zone.nom}` : 'Sélectionnez une zone pour la voir ici.'}
        </CardDescription>
      </CardHeader>
      <CardContent className="flex-grow rounded-b-lg overflow-hidden p-0">
        {zone ? (
          <MapComponent
            latitude={zone.latitude}
            longitude={zone.longitude}
            zoom={13} 
            radius={zone.rayonMetres}
            color={zone.couleur} // Pass the zone color
            key={zone.id} // Important: force le re-rendu de la map quand la zone change
          />
        ) : (
          <div className="h-full bg-gray-100 flex flex-col items-center justify-center text-center p-8">
            <Map className="h-24 w-24 text-gray-300 mb-4" />
            <h3 className="text-xl font-semibold text-gray-600">Aucune zone sélectionnée</h3>
            <p className="text-gray-500 mt-2">
              Veuillez choisir une zone dans le panneau d'assignation pour afficher sa localisation et son périmètre.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};


# --- components/charts/GenericStackedBarChart.tsx ---
import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui-admin/card";

interface ChartDataItem {
  [key: string]: string | number;
}

interface StackedBarChartProps {
  title: string;
  description: string;
  data: ChartDataItem[];
  xAxisKey: string;
  bars: { key: string; name: string; color: string }[];
}

export const GenericStackedBarChart = ({ title, description, data, xAxisKey, bars }: StackedBarChartProps) => {
  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent className="flex-1 pb-0">
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={data} layout="vertical" margin={{ top: 5, right: 20, left: 80, bottom: 20 }}>
            <CartesianGrid strokeDasharray="3 3" horizontal={false} />
            <XAxis type="number" stroke="hsl(var(--muted-foreground))" fontSize={12} />
            <YAxis type="category" dataKey={xAxisKey} stroke="hsl(var(--muted-foreground))" fontSize={12} width={80} />
            <Tooltip cursor={{ fill: 'hsl(var(--muted))' }} contentStyle={{ backgroundColor: 'hsl(var(--background))', borderColor: 'hsl(var(--border))' }} />
            <Legend wrapperStyle={{ paddingTop: '20px' }}/>
            {bars.map(bar => (
              <Bar key={bar.key} dataKey={bar.key} name={bar.name} stackId="a" fill={bar.color} radius={[4, 4, 4, 4]} />
            ))}
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- services/immeuble.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/immeubles';

export interface ImmeubleFromApi {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  zone: { id: string; nom: string }; // Added id to zone
  prospectors: { id: string; prenom: string; nom: string }[];
  status: string;
  portes: any[];
  historiques: any[];
  latitude: number; // Added latitude
  longitude: number; // Added longitude
}

export interface ImmeubleDetailsFromApi extends ImmeubleFromApi {
  hasElevator: boolean;
  digicode: string | null;
  stats: {
    contratsSignes: number;
    rdvPris: number;
  };
  nbPortesTotal: number;
  prospectingMode: 'SOLO' | 'DUO';
  portes: { id: string; numeroPorte: string; statut: string; passage: number; commentaire: string; nbPassages: number }[];
}

const getImmeubles = async (): Promise<ImmeubleFromApi[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getImmeubleDetails = async (id: string): Promise<ImmeubleDetailsFromApi> => {
  const response = await axios.get(`${API_URL}/${id}/details`);
  return response.data;
};

const createImmeuble = async (immeubleData: any) => {
  const response = await axios.post(API_URL, immeubleData);
  return response.data;
};

const updateImmeuble = async (id: string, immeubleData: any) => {
  const response = await axios.patch(`${API_URL}/${id}`, immeubleData);
  return response.data;
};

const deleteImmeuble = async (id: string) => {
  const response = await axios.delete(`${API_URL}/${id}`);
  return response.data;
};

export const immeubleService = {
  getImmeubles,
  getImmeubleDetails,
  createImmeuble,
  updateImmeuble,
  deleteImmeuble,
};



# --- components/charts/GenericPieChart.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';

interface ChartDataItem {
  [key: string]: string | number;
}

interface GenericPieChartProps {
  title: string;
  data: ChartDataItem[];
  dataKey: string;
  nameKey: string;
  colors: string[];
}

export const GenericPieChart = ({ title, data, dataKey, nameKey, colors }: GenericPieChartProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Tooltip
              cursor={{ fill: 'hsl(var(--muted))' }}
              contentStyle={{ backgroundColor: 'hsl(var(--background))', borderColor: 'hsl(var(--border))' }}
            />
            <Pie
              data={data}
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={90}
              fill="#8884d8"
              paddingAngle={3}
              dataKey={dataKey}
              nameKey={nameKey}
              label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
              labelLine={false}
            >
              {data.map((_, index) => (
                <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
              ))}
            </Pie>
            <Legend iconSize={10} wrapperStyle={{ fontSize: '14px', paddingTop: '20px' }} />
          </PieChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/popover.tsx ---
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }



# --- components/ui-commercial/BrandLogo.tsx ---
// src/components/ui-commercial/BrandLogo.tsx
import { cn } from "@/lib/utils";

interface BrandLogoProps {
  className?: string;
  showText?: boolean;
  imageSize?: number;
  variant?: 'full' | 'initials';
}

export const BrandLogo = ({
  className,
  showText = true,
  imageSize = 32,

}: BrandLogoProps) => {
  
  
  const mainFontSize = imageSize;
  const subFontSize = imageSize * 0.3;
  const arcWidth = mainFontSize * 0.67;
  const arcHeight = mainFontSize * 0.27;

  return (
    <div className={cn("flex flex-col items-center justify-center pt-[6px]", className)}>
      <div className="relative flex items-center justify-center leading-none">
        <h1 className="font-extrabold text-black" style={{ fontSize: mainFontSize, fontFamily: "Montserrat, sans-serif" }}>
          Groupe
        </h1>
        <svg className="absolute" width={arcWidth} height={arcHeight} viewBox="0 0 100 50" preserveAspectRatio="none" style={{ top: -arcHeight * -0.3, left: -arcWidth * -0.16 }}>
          <path d="M0,50 C30,0 70,0 100,50 L100,50 L0,50 Z" fill="hsl(var(--winvest-blue-moyen))" />
        </svg>
      </div>
      {showText && (
        <div className="flex items-center w-full mt-[4px]">
          <span className="flex-grow h-px bg-black/70" />
          <span className="mx-2 font-semibold text-black tracking-[0.25em]" style={{ fontSize: subFontSize, fontFamily: "Montserrat, sans-serif" }}>
            FINANSSOR
          </span>
          <span className="flex-grow h-px bg-black/70" />
        </div>
      )}
    </div>
  );
};


# --- layout/LogoutButton.tsx ---
// src/layout/LogoutButton.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"
import { LogOut } from 'lucide-react';
import { cn } from '@/lib/utils';

interface LogoutButtonProps {
  // Contexte pour adapter le style (fond bleu vs fond blanc)
  context?: 'header' | 'sidebar';
}

export function LogoutButton({ context = 'sidebar' }: LogoutButtonProps) {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };
  
  // Styles différents pour le bouton selon où il se trouve
  const buttonVariant = context === 'header' ? 'ghost' : 'outline';
  const buttonClasses = context === 'header' ? 'text-white hover:bg-black/10 hover:text-white border-white/30' : '';

  return (
    <TooltipProvider delayDuration={100}>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant={buttonVariant}
            size="icon"
            onClick={handleLogout}
            className={cn(buttonClasses)}
          >
            <LogOut className="h-4 w-4" />
            <span className="sr-only">Déconnexion</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>Déconnexion</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}


# --- components/ui-admin/GenericTable.tsx ---
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui-admin/table';

interface ChartDataItem {
  [key: string]: string | number;
}

interface Column {
  key: string;
  header: string;
  className?: string;
}

interface GenericTableProps {
  title: string;
  description: string;
  columns: Column[];
  data: ChartDataItem[];
}

export const GenericTable = ({ title, description, columns, data }: GenericTableProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              {columns.map(col => (
                <TableHead key={col.key} className={col.className}>{col.header}</TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((row, rowIndex) => (
              <TableRow key={rowIndex}>
                {columns.map(col => (
                  <TableCell key={col.key} className={`${col.className ?? ''} font-medium`}>{row[col.key]}</TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};


# --- services/porte.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/portes';

export type PorteFromAPI = {
  id: string;
  numeroPorte: string;
  status: string; // Assuming string for now, can be refined with an enum if available
  nbPassages: number;
  commentaire: string | null;
  immeubleId: string;
};

type CreatePortePayload = {
  numeroPorte: string;
  status: string;
  nbPassages?: number;
  commentaire?: string;
  repassage?: boolean;
  immeubleId: string;
};

type UpdatePortePayload = Partial<CreatePortePayload>;

const getPortes = async (): Promise<PorteFromAPI[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getPorteDetails = async (id: string): Promise<PorteFromAPI> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

const createPorte = async (data: CreatePortePayload): Promise<PorteFromAPI> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

const updatePorte = async (id: string, data: UpdatePortePayload): Promise<PorteFromAPI> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};

const deletePorte = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

export const porteService = {
  getPortes,
  getPorteDetails,
  createPorte,
  updatePorte,
  deletePorte,
};



# --- contexts/AuthContext.tsx ---
// src/contexts/AuthContext.tsx

import { createContext, useContext, useState } from 'react';
import type { ReactNode } from 'react';

// Définir les types pour plus de sécurité
type Role = 'admin' | 'manager' | 'directeur' | 'backoffice' | 'commercial';

interface User {
  id: string;
  name: string;
  role: Role;
  email?: string;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (user: User) => void; // MODIFIÉ: Accepte un objet User
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);

  // MODIFIÉ: La fonction de login met à jour avec l'objet utilisateur complet
  const login = (userData: User) => {
    setUser(userData);
  };

  const logout = () => {
    setUser(null);
  };

  const value = { user, isAuthenticated: !!user, login, logout };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Hook personnalisé pour utiliser le contexte facilement
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


# --- components/ui-admin/checkbox.tsx ---
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }



# --- components/ui-admin/badge-variants.ts ---
import { cva } from "class-variance-authority"

export const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)



# --- components/ui-admin/avatar.tsx ---
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }



# --- pages/admin/Dashboard/DashboardSkeleton.tsx ---
import { Skeleton } from "@/components/ui-admin/skeleton";

export const DashboardSkeleton = () => {
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <Skeleton className="h-8 w-64" />
        <Skeleton className="h-10 w-[180px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Skeleton className="lg:col-span-4 h-[380px]" />
        <Skeleton className="lg:col-span-3 h-[380px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Skeleton className="lg:col-span-4 h-[380px]" />
        <Skeleton className="lg:col-span-3 h-[380px]" />
      </div>
    </div>
  );
};


# --- components/ui-admin/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }



# --- routes/RoleBasedRedirect.tsx ---
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const RoleBasedRedirect = () => {
  const { user } = useAuth();

  if (!user) {
    return <Navigate to="/login" />;
  }
  
  // En fonction du rôle de l'utilisateur, on le redirige vers le bon dashboard
  switch (user.role) {
    case 'admin':
      return <Navigate to="/admin" />; // Cette route existe
    case 'manager':
      return <Navigate to="/manager" />; // Cette route existe
    case 'directeur':
      return <Navigate to="/directeur" />; // Cette route existe
    case 'backoffice':
      return <Navigate to="/backoffice" />; // Cette route existe
    case 'commercial':
      return <Navigate to="/commercial" />; // Cette route existe
    default:
      return <Navigate to="/login" />;
  }
  //
};

export default RoleBasedRedirect;


# --- layout/AdminLayout.tsx ---
// src/layout/AdminLayout.tsx
import { useState } from 'react';
import { Outlet } from 'react-router-dom';
import { AdminSidebar } from './AdminSidebar';
import AdminHeader from './AdminHeader';

const AdminLayout = () => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div className="flex h-screen bg-muted/40">
      <AdminSidebar isCollapsed={isCollapsed} toggleSidebar={toggleSidebar} />
      <div className="flex-1 flex flex-col">
        <AdminHeader />
        <main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default AdminLayout;


# --- components/ui-admin/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
import { buttonVariants } from "./button-variants"

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



# --- components/ui-admin/label.tsx ---
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }



# --- components/ui-admin/badge.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
import { badgeVariants } from "./badge-variants"

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge }



# --- types/enums.ts ---
// frontend-shadcn/src/types/enums.ts

export enum AssignmentType {
  EQUIPE = 'EQUIPE',
  MANAGER = 'MANAGER',
  COMMERCIAL = 'COMMERCIAL',
}

export enum PorteStatus {
  NON_VISITE = 'NON_VISITE',
  VISITE = 'VISITE',
  ABSENT = 'ABSENT',
  REFUS = 'REFUS',
  CURIEUX = 'CURIEUX',
  CONTRAT_SIGNE = 'CONTRAT_SIGNE',
}

export enum ProspectingMode {
  SOLO = 'SOLO',
  DUO = 'DUO',
}

// AJOUT DE L'ENUM MANQUANT
export enum PeriodType {
  WEEKLY,
  MONTHLY,
  YEARLY,
}


# --- pages/backoffice/DashboardBackoffice.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardBackoffice = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau office - Admin</h1>
      </div>
    );
  };
  export default DashboardBackoffice;


# --- pages/directeur/DashboardDirecteur.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardDirecteur = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau de Bord - Admin</h1>
      </div>
    );
  };
  export default DashboardDirecteur;


# --- pages/manager/DashboardManager.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardManager = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau de Bord - Admin</h1>
      </div>
    );
  };
  export default DashboardManager;


# --- vite-env.d.ts ---
/// <reference types="vite/client" />

