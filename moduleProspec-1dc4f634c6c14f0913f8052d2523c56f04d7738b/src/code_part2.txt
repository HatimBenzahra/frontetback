

# --- pages/commercial/DashboardCommercial.tsx ---
// src/pages/commercial/DashboardCommercialPage.tsx

import { useState, useEffect } from 'react';
// import axios from 'axios'; // Supprimé car nous utilisons des données simulées
import { useAuth } from '@/contexts/AuthContext';
import StatCard from '@/components/ui-admin/StatCard';
import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { 
    MapPin, 
    CheckCircle, 
    Percent, 
    DoorOpen, 
    PlayCircle, 
    Clock, 
    PlusCircle,
    BarChart2
} from 'lucide-react';
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { ZoneFocusMap } from './ZoneFocusMap';
import { cn } from '@/lib/utils';

// =================================================================
// DÉBUT DES DONNÉES SIMULÉES (MOCK DATA)
// Ces données remplacent les appels API pour le développement en frontend.
// =================================================================

const mockZoneAssignee = {
    nom: 'Paris 17ème - Batignolles',
    latlng: [48.8839, 2.3184] as [number, number],
    radius: 1000, // or any appropriate value
    color: '#3b82f6', // or any appropriate color
};

const mockImmeublesDansZone = [
    { id: 'imm-1', adresse: '123 Rue des Dames', latlng: [48.8855, 2.321] as [number, number] },
    { id: 'imm-2', adresse: '45 Avenue de Clichy', latlng: [48.8865, 2.325] as [number, number] },
    { id: 'imm-3', adresse: '78 Boulevard des Batignolles', latlng: [48.883, 2.319] as [number, number] },
    { id: 'imm-4', adresse: '9 Rue Legendre', latlng: [48.888, 2.315] as [number, number] },
];

const mockAccesRapides = [
    { 
        title: "Démarrer une nouvelle prospection",
        description: "Enregistrer une visite dans un nouvel immeuble.",
        href: "/commercial/prospection/nouvelle",
        icon: PlayCircle 
    },
    { 
        title: "Ajouter un immeuble",
        description: "Enrichir la base de données de votre secteur.",
        href: "/commercial/immeubles/ajouter",
        icon: PlusCircle
    },
    { 
        title: "Voir tous mes rapports",
        description: "Consulter l'historique détaillé de vos visites.",
        href: "/commercial/rapports",
        icon: BarChart2
    }
];

const mockStats = {
    kpis: {
        immeublesVisites: 12,
        portesVisitees: 157,
        contratsSignes: 8,
        tauxDeConversion: 5.1,
        heuresTravaillees: 32, // Ajout pour la carte "Heures Travaillées"
    },
    repartitionStatuts: {
        "RDV Pris": 21,
        "Contrat Signé": 8,
        "Refus Définitif": 45,
        "Pas Intéressé": 63,
        "À Recontacter": 15,
        "Absent": 5,
    }
};

const mockHistory = [
    { id: 'hist-1', adresse: '123 Rue des Dames', ville: 'Paris', dateProspection: '2023-10-26T10:00:00Z', portesProspectees: 40, tauxCouverture: 80, nbRdvPris: 5, nbContratsSignes: 2 },
    { id: 'hist-2', adresse: '45 Avenue de Clichy', ville: 'Paris', dateProspection: '2023-10-25T14:30:00Z', portesProspectees: 60, tauxCouverture: 75, nbRdvPris: 8, nbContratsSignes: 3 },
    { id: 'hist-3', adresse: '78 Boulevard des Batignolles', ville: 'Paris', dateProspection: '2023-10-24T11:00:00Z', portesProspectees: 30, tauxCouverture: 90, nbRdvPris: 4, nbContratsSignes: 1 },
    { id: 'hist-4', adresse: '9 Rue Legendre', ville: 'Paris', dateProspection: '2023-10-23T16:00:00Z', portesProspectees: 27, tauxCouverture: 65, nbRdvPris: 4, nbContratsSignes: 2 },
];

// =================================================================
// FIN DES DONNÉES SIMULÉES
// =================================================================

const CommercialDashboardPage = () => {
    const [timeFilter, setTimeFilter] = useState<'week' | 'month'>('week');
    const { user } = useAuth();
    const [stats, setStats] = useState<any>(null);
    const [history, setHistory] = useState<any>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchSimulatedData = () => {
            if (!user || !user.id) {
                setError('ID du commercial non disponible.');
                setLoading(false);
                return;
            }

            setLoading(true);
            setError(null);

            // Simulation d'un appel API avec un délai de 1 seconde
            setTimeout(() => {
                try {
                    // Ici, nous utilisons nos données simulées au lieu d'une réponse d'API
                    setStats(mockStats);
                    setHistory(mockHistory);
                } catch (err) {
                    console.error('Error processing simulated data:', err);
                    setError('Erreur lors du traitement des données simulées.');
                } finally {
                    setLoading(false);
                }
            }, 1000); // Délai de 1000ms (1 seconde)
        };

        fetchSimulatedData();
    }, [user]);

    // Transformation des données pour GenericLineChart (corrigée pour être plus logique)
    const activitePortesData = history?.map((item: any) => ({
        name: item.adresse, // Utilise l'adresse comme étiquette sur l'axe X
        Portes: item.portesProspectees, // Nombre de portes réellement prospectées
        RDV: item.nbRdvPris, // Nombre de RDV pris
        Contrats: item.nbContratsSignes, // Nombre de contrats signés
    })) || [];

    if (loading) {
        return <div className="text-center py-8">Chargement de vos données...</div>;
    }

    if (error) {
        return <div className="text-center py-8 text-red-500">{error}</div>;
    }

    // Utilisation des données simulées après le chargement
    const currentStats = stats?.kpis || { immeublesVisites: 0, portesVisitees: 0, contratsSignes: 0, tauxDeConversion: 0, heuresTravaillees: 0 };
    const repartitionStatuts = stats?.repartitionStatuts || {};
    const totalPortes = (Object.values(repartitionStatuts) as number[]).reduce((sum, count) => sum + count, 0);

    return (
        <div className="space-y-8">
            <div>
                <h1 className="text-3xl font-bold">Tableau de Bord</h1>
                <p className="text-muted-foreground">Bienvenue ! Voici un résumé de votre activité.</p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-3">
                            <MapPin className="h-6 w-6 text-primary" />
                            <span>Zone de Prospection Actuelle</span>
                        </CardTitle>
                        <CardDescription>Secteur prioritaire pour la semaine en cours.</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <h3 className="text-2xl font-bold text-primary">{mockZoneAssignee.nom}</h3>
                        <p className="text-muted-foreground mt-2">Vous avez {mockImmeublesDansZone.length} immeubles enregistrés dans cette zone.</p>
                        <div className="mt-4 space-y-3">
                            {mockAccesRapides.map(item => (
                                <a href={item.href} key={item.title} className="block">
                                    <Card className="border hover:border-[hsl(var(--winvest-blue-clair))] hover:bg-zinc-50 hover:shadow-sm transition-all group">
                                        <CardHeader className="flex flex-row items-center gap-4 p-3 space-y-0">
                                            <div className="p-2 bg-muted rounded-md"><item.icon className="h-5 w-5 text-primary" /></div>
                                            <div>
                                                <p className="font-semibold group-hover:text-primary transition-colors">{item.title}</p>
                                                <p className="text-xs text-muted-foreground">{item.description}</p>
                                            </div>
                                        </CardHeader>
                                    </Card>
                                </a>
                            ))}
                        </div>
                    </CardContent>
                </Card>
                <div className="min-h-[400px]">
                    <ZoneFocusMap zone={mockZoneAssignee} immeubles={mockImmeublesDansZone} />
                </div>
            </div>

             <div className="space-y-4">
                <div className="flex flex-wrap items-center justify-between gap-4">
                    <h2 className="text-2xl font-semibold">Vos Performances</h2>
                    <div className="flex items-center gap-1 rounded-lg border p-1 bg-white">
                        <Button 
                            variant="ghost" 
                            onClick={() => setTimeFilter('week')}
                            className={cn( "transition-all text-black", timeFilter === 'week' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'hover:bg-zinc-100' )}
                        >Cette semaine</Button>
                        <Button 
                            variant="ghost" 
                            onClick={() => setTimeFilter('month')}
                            className={cn( "transition-all text-black", timeFilter === 'month' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'hover:bg-zinc-100' )}
                        >Ce mois</Button>
                    </div>
                </div>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
                    <StatCard title="Immeubles Visitées" value={currentStats.immeublesVisites} Icon={MapPin} color="text-blue-500" />
                    <StatCard title="Portes Visitées" value={currentStats.portesVisitees} Icon={DoorOpen} color="text-orange-500" />
                    <StatCard title="Contrats Signés" value={currentStats.contratsSignes} Icon={CheckCircle} color="text-emerald-500" />
                    <StatCard title="Taux de Conversion" value={currentStats.tauxDeConversion} Icon={Percent} color="text-violet-500" suffix="%" />
                    <StatCard title="Heures Travaillées" value={currentStats.heuresTravaillees} Icon={Clock} color="text-amber-500" suffix="h" />
                </div>
            </div>

            <Card>
                <CardHeader>
                    <CardTitle>Répartition des Statuts</CardTitle>
                    <CardDescription>Proportion de chaque statut sur l'ensemble des portes prospectées.</CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {Object.entries(repartitionStatuts).map(([status, count]) => (
                            <div key={status} className="flex items-center justify-between p-3 border rounded-md">
                                <span className="font-medium">{status}</span>
                                <span className="text-lg font-bold">{((count as number / totalPortes) * 100 || 0).toFixed(1)}%</span>
                            </div>
                        ))}
                    </div>
                </CardContent>
            </Card>

            <Card>
                <CardHeader>
                    <CardTitle>Historique de Prospection</CardTitle>
                    <CardDescription>Détail des visites et performances par immeuble.</CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                                <tr>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Immeuble</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date Dernière Visite</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Taux Couverture</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">RDV Pris</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contrats Signés</th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {history?.map((item: any) => (
                                    <tr key={item.id}>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{item.adresse}, {item.ville}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{new Date(item.dateProspection).toLocaleDateString()}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.tauxCouverture}%</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.nbRdvPris}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.nbContratsSignes}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </CardContent>
            </Card>

            <GenericLineChart 
                title="Entonnoir de Prospection par Immeuble"
                data={activitePortesData} 
                xAxisDataKey="name" 
                lines={[
                    { dataKey: 'Portes', name: "Portes Prospectées", stroke: 'hsl(var(--winvest-blue-profond))' },
                    { dataKey: 'RDV', name: "RDV Pris", stroke: 'hsl(var(--winvest-blue-moyen))' },
                    { dataKey: 'Contrats', name: "Contrats Signés", stroke: 'hsl(var(--emerald-500))' }
                ]}
            />
        </div>
    );
};

export default CommercialDashboardPage;


# --- pages/admin/Managers/ManagerDetailsPage.tsx ---
import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import type { RowSelectionState } from "@tanstack/react-table";
import { ArrowLeft, Briefcase, CheckCircle, Target, Users, User, Mail, Phone } from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Skeleton } from '@/components/ui-admin/skeleton';
import StatCard from '@/components/ui-admin/StatCard';
import { DataTable } from "@/components/data-table/DataTable";
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { managerService } from '@/services/manager.service';
import type { Commercial } from '../commerciaux/commerciaux-table/columns';
import { createColumns as createCommerciauxColumns } from "../commerciaux/commerciaux-table/columns";
import { createEquipesColumns, type EquipeDuManager } from './managers-table/equipes-columns';
import { Modal } from '@/components/ui-admin/Modal';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';

import { statisticsService } from '@/services/statistics.service';

interface ManagerDetails {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
  equipes: EquipeDuManager[];
}

interface ManagerStats {
  contratsSignes: number;
  rdvPris: number;
  tauxConclusion: number;
}

interface PerformanceHistoryItem {
  name: string;
  performance: number;
  [key: string]: string | number;
}

const ManagerDetailsPage = () => {
    const { managerId } = useParams<{ managerId: string }>();
    const navigate = useNavigate();
    
    const [manager, setManager] = useState<ManagerDetails | null>(null);
    const [stats, setStats] = useState<ManagerStats | null>(null);
    const [perfHistory, setPerfHistory] = useState<PerformanceHistoryItem[]>([]);
    const [loading, setLoading] = useState(true);
    
    const [selectedTeam, setSelectedTeam] = useState<EquipeDuManager | null>(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [teamRowSelection, setTeamRowSelection] = React.useState<RowSelectionState>({});

    const equipesColumns = useMemo(() => createEquipesColumns(), []);
    const commerciauxColumns = useMemo(() => {
        const allCols = createCommerciauxColumns(false, () => {}, managerId);
        return allCols.filter(col => col.id !== 'manager' && col.id !== 'equipe');
    }, [managerId]);

    useEffect(() => {
        if (managerId) {
            setLoading(true);
            Promise.all([
                managerService.getManagerDetails(managerId),
                statisticsService.getStatsForManager(managerId),
                statisticsService.getManagerPerformanceHistory(managerId)
            ]).then(([managerData, statsData, historyData]) => {
                const formattedEquipes = managerData.equipes.map((e: any) => ({
                    id: e.id,
                    nom: e.nom,
                    nbCommerciaux: e.commerciaux.length,
                    commerciaux: e.commerciaux.map((c: Commercial, index: number) => ({
                        ...c,
                        manager: `${managerData.prenom} ${managerData.nom}`,
                        managerId: managerData.id,
                        equipe: e.nom,
                        equipeId: e.id,
                        classement: index + 1,
                        telephone: c.telephone || '',
                    }))
                }));
                setManager({ ...managerData, equipes: formattedEquipes });
                setStats(statsData);
                setPerfHistory(historyData);
                setLoading(false);
            }).catch(err => {
                console.error("Erreur de chargement des détails du manager:", err);
                setLoading(false);
            });
        }
    }, [managerId]);

    const explanations = [
        {
            title: "À Propos de la Performance Globale",
            content: (
                <div className="text-sm text-gray-600 space-y-4">
                    <div>
                        <h4 className="font-semibold text-gray-800">Qu'est-ce que c'est ?</h4>
                        <p>Cet indicateur illustre l'évolution mensuelle du taux de conversion des RDV en contrats pour l'ensemble des équipes.</p>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-800">Comment est-ce calculé ?</h4>
                        <p>(Contrats Signés du mois / RDV Pris du mois) * 100.</p>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-800">À quoi ça sert ?</h4>
                        <p>Il permet de visualiser les tendances de performance et d'identifier les mois les plus productifs.</p>
                    </div>
                </div>
            )
        },
        {
            title: "À Propos du Taux de Conclusion",
            content: (
                <div className="text-sm text-gray-600 space-y-4">
                    <div>
                        <h4 className="font-semibold text-gray-800">Qu'est-ce que c'est ?</h4>
                        <p>C'est le pourcentage global de RDV qui ont abouti à un contrat signé sur toute la période.</p>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-800">Comment est-ce calculé ?</h4>
                        <p>(Total Contrats Signés / Total RDV Pris) * 100.</p>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-800">À quoi ça sert ?</h4>
                        <p>Il donne une mesure de l'efficacité de la conversion finale, un indicateur clé de la performance commerciale.</p>
                    </div>
                </div>
            )
        }
    ];

    const [activeExplanationIndex, setActiveExplanationIndex] = useState(0);

    useEffect(() => {
        const interval = setInterval(() => {
            setActiveExplanationIndex(prevIndex => (prevIndex + 1) % explanations.length);
        }, 7000); // Change slide every 7 seconds

        return () => clearInterval(interval);
    }, []);

    const handleTeamRowClick = (equipe: EquipeDuManager) => {
        setSelectedTeam(equipe);
        setIsModalOpen(true);
    };
    
    if (loading) {
        return (
            <div className="space-y-6 animate-pulse">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-24 w-full" />
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    <Skeleton className="h-28 rounded-lg" /><Skeleton className="h-28 rounded-lg" />
                    <Skeleton className="h-28 rounded-lg" /><Skeleton className="h-28 rounded-lg" />
                </div>
                <Skeleton className="h-96 w-full" />
            </div>
        );
    }
    
    if (!manager) return <div>Manager non trouvé.</div>;

    const currentStats = {
      rdvPris: stats?.rdvPris ?? 0,
      contratsSignes: stats?.contratsSignes ?? 0,
      tauxConclusion: stats?.tauxConclusion ?? 0,
    };
    const commerciauxDeLequipeSelectionnee = manager.equipes.find((e) => e.id === selectedTeam?.id)?.commerciaux || [];

    return (
        <div className="space-y-8">
            <Button variant="outline" onClick={() => navigate(-1)}><ArrowLeft className="mr-2 h-4 w-4" /> Retour</Button>
            

            <Card>
                <CardHeader>
                    <CardTitle>Informations Personnelles</CardTitle>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div className="flex items-center space-x-2">
                        <User className="h-5 w-5 text-gray-500" />
                        <span>{manager.prenom} {manager.nom}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <Mail className="h-5 w-5 text-gray-500" />
                        <span>{manager.email}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <Phone className="h-5 w-5 text-gray-500" />
                        <span>{manager.telephone || 'N/A'}</span>
                    </div>
                </CardContent>
            </Card>

            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <StatCard title="Contrats (Total)" value={currentStats.contratsSignes} Icon={CheckCircle} color="text-emerald-500" />
                <StatCard title="RDV (Total)" value={currentStats.rdvPris} Icon={Briefcase} color="text-sky-500"/>
                <StatCard title="Taux Conclusion" value={currentStats.tauxConclusion} Icon={Target} suffix="%" color="text-amber-500"/>
                <StatCard title="Nb. Équipes" value={manager.equipes.length} Icon={Users} color="text-yellow-500"/>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
                <div className="lg:col-span-2">
                    <GenericLineChart 
                        title="Évolution de la Performance Globale"
                        data={perfHistory} 
                        xAxisDataKey="name" 
                        lines={[{ dataKey: 'performance', stroke: '#3b82f6', name: 'Performance (%)' }]} 
                    />
                </div>
                <Card>
                    <CardHeader>
                        <CardTitle className="text-md">{explanations[activeExplanationIndex].title}</CardTitle>
                    </CardHeader>
                    <CardContent key={activeExplanationIndex} className="animate-in fade-in duration-500">
                        {explanations[activeExplanationIndex].content}
                    </CardContent>
                    <div className="flex justify-center p-4">
                        {explanations.map((_, index) => (
                            <span
                                key={index}
                                className={`h-2 w-2 rounded-full mx-1 cursor-pointer ${index === activeExplanationIndex ? 'bg-blue-500' : 'bg-gray-300'}`}
                                onClick={() => setActiveExplanationIndex(index)}
                            />
                        ))}
                    </div>
                </Card>
            </div>
            
            <div className="space-y-4">
                <DataTable
                    columns={equipesColumns}
                    data={manager.equipes}
                    title="Équipes Managées"
                    filterColumnId="nom"
                    filterPlaceholder="Filtrer par équipe..."
                    onRowClick={handleTeamRowClick}
                    isDeleteMode={false}
                    onToggleDeleteMode={() => {}}
                    onConfirmDelete={() => {}}
                    rowSelection={teamRowSelection}
                    setRowSelection={setTeamRowSelection}
                />
            </div>

            {selectedTeam && (
                <Modal
                    isOpen={isModalOpen}
                    onClose={() => setIsModalOpen(false)}
                    title={`Commerciaux de l'équipe : ${selectedTeam.nom}`}
                >
                    {commerciauxDeLequipeSelectionnee.length > 0 ? (
                        <DataTable
                            columns={commerciauxColumns} data={commerciauxDeLequipeSelectionnee}
                            title=""
                            filterColumnId="nom" filterPlaceholder="Filtrer par commercial..."
                            isDeleteMode={false} onToggleDeleteMode={() => {}} rowSelection={{}} setRowSelection={() => {}} onConfirmDelete={() => {}}
                        />
                    ) : (
                        <div className="text-center text-gray-500 py-8">
                            <p>Cette équipe n'a aucun commercial pour le moment.</p>
                        </div>
                    )}
                </Modal>
            )}
        </div>
    );
};

export default ManagerDetailsPage;


# --- pages/admin/commerciaux/CommerciauxPage.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CommerciauxPage.tsx

import React, { useState, useEffect, useMemo } from "react";
import type { Commercial } from "./commerciaux-table/columns";
import { createColumns } from "./commerciaux-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import type { RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { commercialService } from "@/services/commercial.service";
import { equipeService } from "@/services/equipe.service";
import { managerService } from "@/services/manager.service";
import type { Manager } from "@/types/types";



const CommerciauxPage = () => {
  const [data, setData] = useState<Commercial[]>([]);
  const [managers, setManagers] = useState<Manager[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<Commercial[]>([]);
  
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  
  const initialFormState = { nom: "", prenom: "", email: "", telephone: "", equipeId: "", managerId: "" };
  const [newCommercialData, setNewCommercialData] = useState(initialFormState);
  const [editingCommercial, setEditingCommercial] = useState<Commercial | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [commerciauxFromApi, equipesFromApi, managersFromApi] = await Promise.all([
        commercialService.getCommerciaux(), equipeService.getEquipes(), managerService.getManagers(),
      ]);

      setManagers(managersFromApi);

      const equipesMap = new Map(equipesFromApi.map((e) => [e.id, e.nom] as const));
      const managersMap = new Map(managersFromApi.map((m) => [m.id, `${m.prenom} ${m.nom}`] as const));

      const enrichedCommerciaux: Commercial[] = commerciauxFromApi.map((comm) => {
        const totalContratsSignes = comm.historiques.reduce(
          (sum: number, history: any) => sum + history.nbContratsSignes,
          0,
        );
        return {
          id: comm.id,
          nom: comm.nom,
          prenom: comm.prenom,
          email: comm.email,
          telephone: comm.telephone || '',
          equipeId: comm.equipeId,
          managerId: comm.managerId,
          manager: managersMap.get(comm.managerId) || 'N/A',
          equipe: comm.equipeId ? equipesMap.get(comm.equipeId) || 'Non assignée' : 'Non assignée',
          classement: 0, // Temporary, will be set after sorting
          totalContratsSignes,
        };
      });

      // Sort commercials by totalContratsSignes for ranking
      enrichedCommerciaux.sort(
        (a, b) => {
          const aTotal = commerciauxFromApi.find(c => c.id === a.id)?.historiques.reduce((sum: number, h: any) => sum + h.nbContratsSignes, 0) || 0;
          const bTotal = commerciauxFromApi.find(c => c.id === b.id)?.historiques.reduce((sum: number, h: any) => sum + h.nbContratsSignes, 0) || 0;
          return bTotal - aTotal;
        }
      );

      const rankedCommerciaux = enrichedCommerciaux.map((comm, index) => ({
        ...comm,
        classement: index + 1,
      }));

      setData(rankedCommerciaux);
    } catch (error) { console.error("Erreur lors de la récupération des données:", error); } 
    finally { setLoading(false); }
  };

  const handleEditOpen = (commercial: Commercial) => {
    setEditingCommercial(commercial);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingCommercial) return;
    setEditingCommercial({ ...editingCommercial, [e.target.name]: e.target.value });
  };
  
  const handleEditSelectChange = (managerId: string) => {
    if (!editingCommercial) return;
    setEditingCommercial({ ...editingCommercial, managerId });
  };

  const handleUpdateCommercial = async () => {
    if (!editingCommercial) return;
    try {
      const { id, nom, prenom, email, telephone, managerId } = editingCommercial;
      
      const payload = {
        nom, prenom, email, managerId,
        telephone: telephone || undefined,
      };

      await commercialService.updateCommercial(id, payload);

      setIsEditModalOpen(false);
      setEditingCommercial(null);
      fetchData();
    } catch (error) {
      console.error("Erreur de mise à jour du commercial:", error);
    }
  };

  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewCommercialData((prev) => ({ ...prev, [e.target.id]: e.target.value }));
  };
  const handleAddCommercial = async () => {
    const { nom, prenom, email, telephone, managerId } = newCommercialData;
    if (!nom || !prenom || !email || !managerId) {
      alert("Veuillez remplir tous les champs obligatoires.");
      return;
    }

    try {
      await commercialService.createCommercial({ nom, prenom, email, telephone, managerId });
      setIsAddModalOpen(false);
      setNewCommercialData(initialFormState);
      fetchData();
    } catch (error) {
      console.error("Erreur lors de l'ajout du commercial:", error);
    }
  };

  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map((c) => commercialService.deleteCommercial(c.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) { console.error("Erreur lors de la suppression:", error); }
  };

  const toggleDeleteMode = () => { setIsDeleteMode((prev) => !prev); setRowSelection({}); };
  const handleConfirmDelete = (selectedItems: Commercial[]) => { setItemsToDelete(selectedItems); };

  const columns = useMemo(() => createColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
    return <div>Chargement des commerciaux...</div>;
  }

  return (
    <>
      <DataTable
        columns={columns}
        data={data}
        title="Gestion des Commerciaux"
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de commercial..."
        addEntityButtonText="Ajouter un Commercial"
        onAddEntity={() => setIsAddModalOpen(true)}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
      />

      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])} title="Confirmer la suppression">
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} commercial(ux) suivant(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map((item) => <li key={item.id}>{item.prenom} {item.nom}</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)} title="Ajouter un nouveau commercial">
        <h2 className="text-lg font-semibold mb-4">Ajouter un nouveau commercial</h2>
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" placeholder="Nom de famille" value={newCommercialData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" placeholder="Prénom" value={newCommercialData.prenom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" placeholder="adresse@email.com" value={newCommercialData.email} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="telephone">Téléphone (optionnel)</Label><Input id="telephone" type="tel" placeholder="0612345678" value={newCommercialData.telephone} onChange={handleAddInputChange} /></div>
          <div className="space-y-1">
            <Label htmlFor="managerId">Manager</Label>
            <Select onValueChange={(value) => setNewCommercialData((prev) => ({ ...prev, managerId: value }))} value={newCommercialData.managerId}>
              <SelectTrigger id="managerId"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
              <SelectContent>
                {managers.map((manager) => (
                  <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddCommercial} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>
      
      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} title="Modifier le commercial">
        <h2 className="text-lg font-semibold mb-4">Modifier le commercial</h2>
        {editingCommercial && (
            <div className="grid gap-4">
            <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" name="nom" value={editingCommercial.nom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" name="prenom" value={editingCommercial.prenom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" name="email" type="email" value={editingCommercial.email} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" name="telephone" type="tel" value={editingCommercial.telephone || ''} onChange={handleEditInputChange} /></div>
            <div className="space-y-1">
                <Label htmlFor="managerId">Manager</Label>
                <Select onValueChange={handleEditSelectChange} value={editingCommercial.managerId}>
                <SelectTrigger id="managerId"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
                <SelectContent>
                    {managers.map((manager) => ( <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem> ))}
                </SelectContent>
                </Select>
            </div>
            </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
            <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
            <Button onClick={handleUpdateCommercial} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  );
};

export default CommerciauxPage;


# --- pages/admin/Equipes/EquipesPage.tsx ---
import React, { useState, useEffect, useMemo } from "react";
import type { Equipe } from "./equipes-table/columns";
import { createEquipesColumns } from "./equipes-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import type { RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { equipeService } from "@/services/equipe.service";
import { managerService } from "@/services/manager.service";
import type { Manager } from '@/types/types';

const EquipesPage = () => {
  const [data, setData] = useState<Equipe[]>([]);
  const [managersList, setManagersList] = useState<Manager[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<Equipe[]>([]);

  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const initialFormState = { nom: '', managerId: '' };
  const [newEquipeData, setNewEquipeData] = useState(initialFormState);
  const [editingEquipe, setEditingEquipe] = useState<Equipe | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [equipesFromApi, managersFromApi] = await Promise.all([
        equipeService.getEquipes(),
        managerService.getManagers(),
      ]);

      setManagersList(managersFromApi);

      const managersMap = new Map(managersFromApi.map(m => [m.id, m]));

      const enrichedEquipes: Equipe[] = equipesFromApi.map((equipe) => {
        const manager = managersMap.get(equipe.managerId);
        const totalContratsSignes = equipe.commerciaux.reduce((acc: number, commercial: any) => {
          return acc + commercial.historiques.reduce((accHist: number, hist: any) => accHist + hist.nbContratsSignes, 0);
        }, 0);

        return {
          id: equipe.id,
          nom: equipe.nom,
          manager: {
            id: manager?.id || '',
            nom: manager ? `${manager.prenom} ${manager.nom}` : "N/A",
            avatarFallback: manager ? `${manager.prenom[0]}${manager.nom[0]}` : "?",
          },
          nbCommerciaux: equipe.commerciaux.length,
          totalContratsSignes: totalContratsSignes,
          classementGeneral: 0, // Placeholder, will be calculated next
        };
      });

      // Sort by totalContratsSignes to determine ranking
      enrichedEquipes.sort((a, b) => b.totalContratsSignes - a.totalContratsSignes);

      // Assign classementGeneral based on sorted order
      const rankedEquipes = enrichedEquipes.map((equipe, index) => ({
        ...equipe,
        classementGeneral: index + 1,
      }));
      
      setData(rankedEquipes);
    } catch (error) {
      console.error("Erreur:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleEditOpen = (equipe: Equipe) => {
    setEditingEquipe(equipe);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingEquipe) return;
    setEditingEquipe({ ...editingEquipe, nom: e.target.value });
  };
  
  const handleEditSelectChange = (managerId: string) => {
    if (!editingEquipe) return;
    const manager = managersList.find(m => m.id === managerId);
    if (manager) {
        setEditingEquipe({
            ...editingEquipe,
            manager: {
                ...editingEquipe.manager,
                id: manager.id,
                nom: `${manager.prenom} ${manager.nom}`
            }
        });
    }
  };

  const handleUpdateEquipe = async () => {
    if (!editingEquipe) return;
    try {
      const payload = {
        nom: editingEquipe.nom,
        managerId: editingEquipe.manager.id,
      };
      await equipeService.updateEquipe(editingEquipe.id, payload);
      setIsEditModalOpen(false);
      setEditingEquipe(null);
      fetchData();
    } catch(error) {
      console.error("Erreur de mise à jour de l'équipe:", error);
    }
  };

  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewEquipeData(prev => ({ ...prev, nom: e.target.value }));
  };

  const handleAddSelectChange = (managerId: string) => {
    setNewEquipeData(prev => ({ ...prev, managerId }));
  };

  const handleAddEquipe = async () => {
    if (!newEquipeData.nom || !newEquipeData.managerId) {
      alert("Veuillez remplir tous les champs.");
      return;
    }
    try {
      await equipeService.createEquipe(newEquipeData);
      setIsAddModalOpen(false);
      setNewEquipeData(initialFormState);
      fetchData();
    } catch (error) {
      console.error("Erreur lors de l'ajout de l'équipe:", error);
    }
  };

  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map(e => equipeService.deleteEquipe(e.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) {
      console.error("Erreur lors de la suppression:", error);
    }
  };

  const toggleDeleteMode = () => { setIsDeleteMode(prev => !prev); setRowSelection({}); };
  const handleConfirmDelete = (selectedItems: Equipe[]) => { setItemsToDelete(selectedItems); };

  const columns = useMemo(() => createEquipesColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
    return <div>Chargement des équipes...</div>;
  }

  return (
    <>
      <DataTable 
        columns={columns} data={data} title="Gestion des Équipes" filterColumnId="nom"
        filterPlaceholder="Filtrer par nom d'équipe..." addEntityButtonText="Ajouter une Équipe"
        onAddEntity={() => setIsAddModalOpen(true)} isDeleteMode={isDeleteMode} onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection} setRowSelection={setRowSelection} onConfirmDelete={handleConfirmDelete}
      />

      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])} title="Confirmer la suppression">
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} équipe(s) suivante(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map(item => <li key={item.id}>{item.nom} (Manager: {item.manager.nom})</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button variant="destructive" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)} title="Ajouter une nouvelle équipe">
        <h2 className="text-lg font-semibold mb-4">Ajouter une nouvelle équipe</h2>
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom-equipe">Nom de l'équipe</Label><Input id="nom-equipe" placeholder="Ex: Oméga" value={newEquipeData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1">
            <Label htmlFor="manager-equipe">Manager responsable</Label>
            <Select onValueChange={handleAddSelectChange} value={newEquipeData.managerId}>
              <SelectTrigger id="manager-equipe"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
              <SelectContent>
                {managersList.map(manager => (
                  <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddEquipe} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>

      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} title="Modifier l'équipe">
        <h2 className="text-lg font-semibold mb-4">Modifier l'équipe</h2>
        {editingEquipe && (
          <div className="grid gap-4">
            <div className="space-y-1"><Label htmlFor="nom-equipe-edit">Nom de l'équipe</Label><Input id="nom-equipe-edit" value={editingEquipe.nom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1">
              <Label htmlFor="manager-equipe-edit">Manager responsable</Label>
              <Select onValueChange={handleEditSelectChange} value={editingEquipe.manager.id}>
                <SelectTrigger id="manager-equipe-edit"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
                <SelectContent>
                  {managersList.map(manager => (
                    <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
          <Button onClick={handleUpdateEquipe} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  )
}

export default EquipesPage;


# --- pages/admin/Managers/ManagersPage.tsx ---
// frontend-shadcn/src/pages/admin/Managers/ManagersPage.tsx

import React, { useState, useEffect, useMemo } from "react";
import type { Manager } from "./managers-table/columns";
import { getColumns } from "./managers-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import { type RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { managerService } from "@/services/manager.service";

type ManagerWithEquipes = Manager & { equipes: any[] };

const ManagersPage = () => {
  const [data, setData] = useState<ManagerWithEquipes[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [managersToDelete, setManagersToDelete] = useState<ManagerWithEquipes[]>([]);
  
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const initialFormState = { nom: '', prenom: '', email: '', telephone: '' };
  const [newManagerData, setNewManagerData] = useState(initialFormState);
  const [editingManager, setEditingManager] = useState<ManagerWithEquipes | null>(null);

  useEffect(() => {
    fetchManagers();
  }, []);

  const fetchManagers = async () => {
    setLoading(true);
    try {
      const managers = await managerService.getManagers() as ManagerWithEquipes[];
      const formattedManagers = managers.map((m) => {
        const nbEquipes = m.equipes.length;
        const totalContratsSignes = m.equipes.reduce((accEquipe: number, equipe: any) => {
          return (
            accEquipe +
            equipe.commerciaux.reduce((accCommercial: number, commercial: any) => {
              return (
                accCommercial +
                commercial.historiques.reduce((accHistory: number, history: any) => {
                  return accHistory + history.nbContratsSignes;
                }, 0)
              );
            }, 0)
          );
        }, 0);

        return {
          ...m,
          telephone: m.telephone || '',
          nbEquipes: nbEquipes,
          totalContratsSignes: totalContratsSignes,
          equipes: m.equipes,
        };
      });

      // Sort managers by totalContratsSignes for ranking
      formattedManagers.sort((a, b) => b.totalContratsSignes - a.totalContratsSignes);

      const rankedManagers = formattedManagers.map((m, index) => ({
        ...m,
        classement: index + 1,
      }));

      setData(rankedManagers);
    } catch (error) {
      console.error("Erreur lors de la récupération des managers:", error);
    } finally {
      setLoading(false);
    }
  };

  // --- LOGIQUE D'ÉDITION ---
  const handleEditOpen = (manager: ManagerWithEquipes) => {
    setEditingManager(manager);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingManager) return;
    setEditingManager({ ...editingManager, [e.target.id]: e.target.value });
  };
  
  const handleUpdateManager = async () => {
    if (!editingManager) return;
    try {
      const { id, nom, prenom, email, telephone } = editingManager;
      const payload = { nom, prenom, email, telephone: telephone || undefined };
      await managerService.updateManager(id, payload);
      setIsEditModalOpen(false);
      setEditingManager(null);
      fetchManagers();
    } catch (error) {
      console.error("Erreur de mise à jour du manager:", error);
    }
  };

  // --- LOGIQUE D'AJOUT ---
  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewManagerData(prev => ({ ...prev, [e.target.id]: e.target.value }));
  };

  const handleAddManager = async () => {
    if (!newManagerData.nom || !newManagerData.prenom || !newManagerData.email) {
        alert("Les champs Nom, Prénom et Email sont obligatoires.");
        return;
    }
    try {
      await managerService.createManager(newManagerData);
      setIsAddModalOpen(false);
      setNewManagerData(initialFormState);
      fetchManagers();
    } catch (error) {
      console.error("Erreur lors de l'ajout du manager:", error);
    }
  };

  // --- LOGIQUE DE SUPPRESSION ---
  const handleDelete = async () => {
    try {
      await Promise.all(managersToDelete.map(m => managerService.deleteManager(m.id)));
      setManagersToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchManagers();
    } catch (error) {
      console.error("Erreur lors de la suppression:", error);
    }
  };
  
  const toggleDeleteMode = () => {
    setIsDeleteMode(prev => !prev);
    setRowSelection({});
  };

  const handleConfirmDelete = (selectedManagers: ManagerWithEquipes[]) => {
    setManagersToDelete(selectedManagers);
  };
  
  const columns = useMemo(() => getColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
      return <div>Chargement des managers...</div>;
  }

  return (
    <>
      <DataTable 
        columns={columns} 
        data={data} 
        title="Gestion des Managers"
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de manager..."
        addEntityButtonText="Ajouter un Manager"
        onAddEntity={() => setIsAddModalOpen(true)}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
      />

      <Modal
        isOpen={managersToDelete.length > 0}
        onClose={() => setManagersToDelete([])}
        title="Confirmer la suppression"
      >
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {managersToDelete.length} manager(s) suivant(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {managersToDelete.map(m => <li key={m.id}>{m.prenom} {m.nom}</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setManagersToDelete([])}>Annuler</Button>
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        title="Ajouter un nouveau manager"
      >
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" placeholder="Dupont" value={newManagerData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" placeholder="Jean" value={newManagerData.prenom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" placeholder="jean.dupont@example.com" value={newManagerData.email} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" type="tel" placeholder="0612345678" value={newManagerData.telephone} onChange={handleAddInputChange} /></div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddManager} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>

      <Modal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        title="Modifier le manager"
      >
        {editingManager && (
            <div className="grid gap-4">
                <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" value={editingManager.nom} onChange={handleEditInputChange} /></div>
                <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" value={editingManager.prenom} onChange={handleEditInputChange} /></div>
                <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" value={editingManager.email} onChange={handleEditInputChange} /></div>
                <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" type="tel" value={editingManager.telephone || ''} onChange={handleEditInputChange} /></div>
            </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
            <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
            <Button onClick={handleUpdateManager} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  )
}

export default ManagersPage;


# --- pages/admin/immeubles/columns.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/columns.tsx

"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom";
import { ArrowUpDown, Eye, User, MapPin, Percent, Users } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"
import { Avatar, AvatarFallback } from "@/components/ui-admin/avatar";

export type Immeuble = {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  status: "À visiter" | "Visité" | "RDV Pris" | "Inaccessible";
  nbPortes: number;
  nbPortesProspectees: number;
  prospectingMode: "Solo" | "Duo";
  prospectors: {
    id: string;
    nom: string;
    avatarFallback: string;
  }[];
  dateVisite: string | null;
  zone: string;
  zoneId: string;
  latlng: [number, number];
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

const statusConfig = {
    "À visiter": "bg-blue-100 text-blue-800 border-blue-300",
    "Visité": "bg-gray-100 text-gray-800 border-gray-300",
    "RDV Pris": "bg-green-100 text-green-800 border-green-300",
    "Inaccessible": "bg-red-100 text-red-800 border-red-300",
};

export const createColumns = (
    isDeleteMode: boolean, 
    onFocusOnImmeuble: (immeuble: Immeuble) => void = () => {},
    onFocusOnZone: (zoneId: string) => void = () => {}
): ColumnDef<Immeuble>[] => [
    ...(isDeleteMode ? [{ 
        id: "select", 
        header: ({ table }: any) => (<Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />), 
        cell: ({ row }: any) => (<Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" onClick={(e) => e.stopPropagation()} />), 
        enableSorting: false, enableHiding: false, 
    }] : []),

    {
      accessorKey: "adresse",
      header: ({ column }) => <SortableHeader title="Adresse" column={column} />,
      cell: ({ row }) => {
        const immeuble = row.original;
        return (
          <TooltipProvider delayDuration={200}>
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="font-medium text-foreground cursor-pointer hover:text-primary transition-colors" onClick={(e) => { e.stopPropagation(); onFocusOnImmeuble(immeuble); }}>
                  {immeuble.adresse}
                  <div className="text-xs text-muted-foreground">{`${immeuble.codePostal} ${immeuble.ville}`}</div>
                </div>
              </TooltipTrigger>
              <TooltipContent><p>Cliquer pour voir sur la carte</p></TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )
      },
    },
    {
      accessorKey: "status",
      header: ({ column }) => <SortableHeader title="Statut" column={column} />,
      cell: ({ row }) => <Badge variant="outline" className={statusConfig[row.original.status]}>{row.original.status}</Badge>
    },
    {
        id: "couverture",
        header: ({ column }) => <SortableHeader title="Couverture" column={column} />,
        cell: ({ row }) => {
            const { nbPortes, nbPortesProspectees } = row.original;
            if (nbPortes === 0) return <span className="text-muted-foreground">N/A</span>;
            const percentage = (nbPortesProspectees / nbPortes) * 100;
            return (
                <div className="flex items-center gap-2">
                    <Percent className="h-4 w-4 text-muted-foreground" />
                    <span className="font-medium">{percentage.toFixed(0)}%</span>
                    <span className="text-xs text-muted-foreground">({nbPortesProspectees}/{nbPortes})</span>
                </div>
            )
        },
        sortingFn: (rowA, rowB) => {
            const percA = rowA.original.nbPortes > 0 ? (rowA.original.nbPortesProspectees / rowA.original.nbPortes) : -1;
            const percB = rowB.original.nbPortes > 0 ? (rowB.original.nbPortesProspectees / rowB.original.nbPortes) : -1;
            return percA - percB;
        }
    },
    {
        accessorKey: "zone",
        header: ({ column }) => <SortableHeader title="Zone" column={column} />,
        cell: ({ row }) => (
          <TooltipProvider delayDuration={200}>
            <Tooltip>
              <TooltipTrigger asChild>
                  <div className="flex items-center gap-2 cursor-pointer hover:text-primary transition-colors" onClick={(e) => { e.stopPropagation(); onFocusOnZone(row.original.zoneId); }} >
                    <MapPin className="h-4 w-4 text-muted-foreground" />
                    <span>{row.original.zone}</span>
                  </div>
              </TooltipTrigger>
              <TooltipContent><p>Cliquer pour voir la zone sur la carte</p></TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )
    },
    {
        accessorKey: "prospectingMode",
        header: ({ column }) => <SortableHeader title="Mode" column={column} />,
        cell: ({ row }) => {
            const { prospectingMode, prospectors } = row.original;
            if (prospectors.length === 0) {
                return <span className="text-muted-foreground">-</span>;
            }
            const Icon = prospectingMode === 'Duo' ? Users : User;
            return (
                <Badge variant="secondary" className="font-medium">
                    <Icon className="h-3 w-3 mr-1.5" />
                    {prospectingMode}
                </Badge>
            );
        }
    },
    {
        accessorKey: "prospectors",
        header: ({ column }) => <SortableHeader title="Prospecteurs" column={column} />,
        cell: ({ row }) => {
            const { prospectors } = row.original;
            if (!prospectors || prospectors.length === 0) {
                return <span className="text-muted-foreground">N/A</span>;
            }
            return (
                <div className="flex items-center">
                    <div className="flex -space-x-2">
                        {prospectors.map(p => (
                            <TooltipProvider key={p.id} delayDuration={100}>
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Link to={`/admin/commerciaux/${p.id}`} onClick={(e) => e.stopPropagation()} className="hover:z-10">
                                            <Avatar className="h-8 w-8 border-2 border-white">
                                                <AvatarFallback>{p.avatarFallback}</AvatarFallback>
                                            </Avatar>
                                        </Link>
                                    </TooltipTrigger>
                                    <TooltipContent><p>{p.nom}</p></TooltipContent>
                                </Tooltip>
                            </TooltipProvider>
                        ))}
                    </div>
                </div>
            );
        },
        sortingFn: (rowA, rowB) => {
            const nameA = rowA.original.prospectors[0]?.nom || '';
            const nameB = rowB.original.prospectors[0]?.nom || '';
            return nameA.localeCompare(nameB);
        }
    },
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const immeuble = row.original;
            return ( <div className="text-right"><Button asChild variant="ghost" className="h-8 w-8 p-0 cursor-pointer"><Link to={`/admin/immeubles/${immeuble.id}`} onClick={(e) => e.stopPropagation()}><Eye className="h-4 w-4" /><span className="sr-only">Voir les détails de l'immeuble</span></Link></Button></div> )
        },
    },
]


# --- pages/admin/statitistiques/StatistiquesPage.tsx ---
// src/pages/admin/commerciaux/CommercialDetailsPage.tsx
import { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
    ArrowLeft, BarChart2, Briefcase, CheckCircle, Target, Building, Trophy,
    Zap, TrendingUp, Shuffle, Clock, XCircle
} from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Skeleton } from '@/components/ui-admin/skeleton';
import StatCard from '@/components/ui-admin/StatCard';
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { commercialService } from '@/services/commercial.service';
import { cn } from '@/lib/utils'; // N'oubliez pas d'importer 'cn'

const CommercialDetailsPage = () => {
    const { commercialId } = useParams<{ commercialId: string }>();
    const navigate = useNavigate();
    const [commercial, setCommercial] = useState<any>(null);
    const [loading, setLoading] = useState(true);
    const [activePreset, setActivePreset] = useState('week');
    const [currentStats, setCurrentStats] = useState<any>(null);

    useEffect(() => {
        if (commercialId) {
            setLoading(true);
            commercialService.getCommercialDetails(commercialId)
                .then(data => {
                    setCommercial(data);
                    setCurrentStats(data.stats?.WEEKLY || {});
                })
                .catch(err => {
                    console.error("Erreur chargement détails commercial:", err);
                    setCommercial(null);
                })
                .finally(() => setLoading(false));
        }
    }, [commercialId]);
    
    const handlePresetClick = (preset: string) => {
        setActivePreset(preset);
        if (!commercial?.stats) return;

        if (preset === 'week') setCurrentStats(commercial.stats.WEEKLY || {});
        if (preset === 'month') setCurrentStats(commercial.stats.MONTHLY || {});
        if (preset === 'year') setCurrentStats(commercial.stats.YEARLY || {});
    };

    const rdvContratsHistory = useMemo(() => [
        { name: 'S-4', rdv: 5, contrats: 1 },
        { name: 'Actuel', rdv: currentStats?.rdvPris || 0, contrats: currentStats?.contratsSignes || 0 }
    ], [currentStats]);
    
    const pieChartData = useMemo(() => {
        if (!currentStats) return [];
        const rdvSansContrat = (currentStats.rdvPris || 0) - (currentStats.contratsSignes || 0);
        return [
            { name: 'Contrats Signés', value: currentStats.contratsSignes || 0 },
            { name: 'RDV sans contrat', value: rdvSansContrat < 0 ? 0 : rdvSansContrat }
        ];
    }, [currentStats]);


    if (loading) {
        return (
            <div className="space-y-6 animate-pulse p-6">
                <Skeleton className="h-10 w-48" />
                <Skeleton className="h-24 w-full" />
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">{[...Array(10)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}</div>
                <div className="grid gap-4 md:grid-cols-1 lg:grid-cols-2"><Skeleton className="h-96 rounded-lg" /><Skeleton className="h-96 rounded-lg" /></div>
            </div>
        )
    }
    if (!commercial || !currentStats) return <div className="p-6">Données du commercial non trouvées.</div>;
    
    return (
        <div className="space-y-6">
            <Button variant="outline" onClick={() => navigate(-1)}><ArrowLeft className="mr-2 h-4 w-4" />Retour</Button>
            
            <div className="rounded-lg border bg-card text-card-foreground p-6 shadow">
                <h3 className="text-2xl font-semibold">{commercial.prenom} {commercial.nom}</h3>
                <p className="text-sm text-muted-foreground pt-1.5">Équipe : {commercial.equipe.nom} | Manager : {commercial.manager.prenom} {commercial.manager.nom}</p>
            </div>

            <div className="flex flex-wrap gap-x-6 gap-y-4 justify-between items-center border-b pb-4">
                <h2 className="text-2xl font-semibold flex items-baseline gap-3"><BarChart2 className="h-6 w-6 text-primary self-center" /><span>Statistiques de performance</span></h2>
                <div className="flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
                    {/* --- CORRECTION DES BOUTONS ICI --- */}
                    <Button 
                        variant='ghost' 
                        className={cn("transition-all", activePreset === 'week' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')} 
                        onClick={() => handlePresetClick('week')}
                    >Cette semaine</Button>
                    <Button 
                        variant='ghost' 
                        className={cn("transition-all", activePreset === 'month' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')} 
                        onClick={() => handlePresetClick('month')}
                    >Ce mois</Button>
                    <Button 
                        variant='ghost' 
                        className={cn("transition-all", activePreset === 'year' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')} 
                        onClick={() => handlePresetClick('year')}
                    >Cette année</Button>
                </div>
            </div>
            
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
                <StatCard title="RDV Pris" value={currentStats.rdvPris || 0} Icon={Briefcase} />
                <StatCard title="Contrats Signés" value={currentStats.contratsSignes || 0} Icon={CheckCircle} />
                <StatCard title="Taux Conclusion" value={currentStats.tauxConclusion || 0} Icon={Target} suffix="%" />
                <StatCard title="Classement Équipe" value={currentStats.classementEquipe || 0} Icon={Trophy} prefix="#" />
                <StatCard title="Taux Transfo." value={currentStats.tauxTransformationPorteRdv || 0} Icon={Shuffle} suffix="%" />
                <StatCard title="Portes Prospectées" value={currentStats.portesProspectees || 0} Icon={Building} />
                <StatCard title="Refus" value={currentStats.refusEnregistres || 0} Icon={XCircle} />
                <StatCard title="Heures Prospect." value={currentStats.heuresProspectees || 0} Icon={Clock} suffix="h" />
                <StatCard title="RDV / Heure" value={currentStats.rdvParHeure || 0} Icon={Zap} />
                <StatCard title="Contrats / Jour" value={0} Icon={TrendingUp} />
            </div>

             <div className="grid gap-4 md:grid-cols-1 lg:grid-cols-2">
                 <GenericLineChart title="Historique RDV vs Contrats" data={rdvContratsHistory} xAxisDataKey="name" lines={[{ dataKey: 'rdv', name: "RDV Pris", stroke: "hsl(var(--chart-1))" }, { dataKey: 'contrats', name: "Contrats Signés", stroke: "hsl(var(--chart-5))" }]} />
                 <GenericPieChart title="Répartition des Résultats de RDV" data={pieChartData} dataKey="value" nameKey="name" colors={['hsl(var(--chart-5))', 'hsl(var(--chart-1))']} />
            </div>
        </div>
    );
};

export default CommercialDetailsPage;


# --- components/ui-admin/dropdown-menu.tsx ---
// src/components/ui/dropdown-menu.tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-[#EFEDED] bg-white p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# --- pages/admin/immeubles/ImmeublesPage.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/ImmeublesPage.tsx

import { useState, useMemo, useEffect } from "react";
import type { Immeuble } from "./columns";
import { createColumns } from "./columns";
import type { Zone } from '../zones/columns';
import { DataTable } from "@/components/data-table/DataTable";
import { ImmeublesMap } from './ImmeublesMap';
import type { RowSelectionState } from "@tanstack/react-table";
import { ViewToggleContainer } from "@/components/ui-admin/ViewToggleContainer";
import { immeubleService } from "@/services/immeuble.service";
import { zoneService } from "@/services/zone.service";
import { Skeleton } from "@/components/ui-admin/skeleton";

const ImmeublesPage = () => {
    const [view, setView] = useState<'table' | 'map'>('table');
    const [immeubles, setImmeubles] = useState<Immeuble[]>([]);
    const [zones, setZones] = useState<Zone[]>([]);
    const [loading, setLoading] = useState(true);
    const [immeubleToFocusId, setImmeubleToFocusId] = useState<string | null>(null);
    const [zoneToFocusId, setZoneToFocusId] = useState<string | null>(null);
    const [isDeleteMode, setIsDeleteMode] = useState(false);
    const [rowSelection, setRowSelection] = useState<RowSelectionState>({});

    useEffect(() => {
        fetchData();
    }, []);

    const fetchData = async () => {
        setLoading(true);
        try {
            const [immeublesFromApi, zonesFromApi] = await Promise.all([
                immeubleService.getImmeubles(),
                zoneService.getZones()
            ]);
            
            const formattedImmeubles: Immeuble[] = immeublesFromApi.map(imm => {
                let statusText: Immeuble['status'] = 'À visiter';
                switch(imm.status) {
                    case 'VISITE': statusText = 'Visité'; break;
                    case 'RDV_PRIS': statusText = 'RDV Pris'; break;
                    case 'INACCESSIBLE': statusText = 'Inaccessible'; break;
                }
                
                const prospecteurs = Array.isArray(imm.prospectors) ? imm.prospectors : [];
                const portes = Array.isArray(imm.portes) ? imm.portes : [];
                const historiques = Array.isArray(imm.historiques) ? imm.historiques : [];
                
                return {
                    id: imm.id,
                    adresse: imm.adresse,
                    ville: imm.ville,
                    codePostal: imm.codePostal,
                    status: statusText,
                    nbPortes: portes.length,
                    nbPortesProspectees: historiques.reduce((acc: number, h: { nbPortesVisitees: number }) => acc + h.nbPortesVisitees, 0),
                    prospectingMode: prospecteurs.length > 1 ? "Duo" : "Solo",
                    prospectors: prospecteurs.map((p: { id: string; prenom: string; nom: string; }) => ({
                        id: p.id,
                        nom: `${p.prenom || ''} ${p.nom || ''}`.trim(),
                        avatarFallback: `${p.prenom?.[0] || ''}${p.nom?.[0] || ''}`.toUpperCase()
                    })),
                    dateVisite: historiques.length > 0 ? historiques[0].dateProspection : null,
                    zone: imm.zone?.nom || 'N/A',
                    zoneId: imm.zone?.id || '',
                    latlng: [imm.latitude, imm.longitude],
                };
            });
            
            const formattedZones: Zone[] = zonesFromApi.map(z => ({
                id: z.id, name: z.nom, assignedTo: 'N/A',
                color: z.couleur || 'grey', latlng: [z.latitude, z.longitude],
                radius: z.rayonMetres, dateCreation: z.createdAt,
            }));

            setImmeubles(formattedImmeubles);
            setZones(formattedZones);

        } catch (error) {
            console.error("Erreur de chargement des données:", error);
        } finally {
            setLoading(false);
        }
    };

    const handleSelectAndFocusImmeuble = (immeuble: Immeuble) => {
        setImmeubleToFocusId(immeuble.id);
        setZoneToFocusId(null);
        setView('map');
    };

    const handleSelectAndFocusZone = (zoneId: string) => {
        setZoneToFocusId(zoneId);
        setImmeubleToFocusId(null);
        setView('map');
    };
    
    const handleClearFocus = () => {
        setImmeubleToFocusId(null);
        setZoneToFocusId(null);
    };

    const toggleDeleteMode = () => {
        setIsDeleteMode(prev => !prev);
        setRowSelection({});
    };

    const handleConfirmDelete = async (selectedItems: Immeuble[]) => {
        try {
            await Promise.all(selectedItems.map(imm => immeubleService.deleteImmeuble(imm.id)));
            fetchData();
        } catch (error) {
            console.error("Erreur lors de la suppression:", error);
        }
        setIsDeleteMode(false);
        setRowSelection({});
    };

    const columns = useMemo(() => createColumns(isDeleteMode, handleSelectAndFocusImmeuble, handleSelectAndFocusZone), [isDeleteMode]);

    if (loading) {
        return (
            <div className="p-4 sm:p-6 lg:p-8 space-y-6">
                <div className="flex justify-between items-center">
                    <Skeleton className="h-10 w-1/3" />
                    <Skeleton className="h-10 w-32" />
                </div>
                <Skeleton className="h-96 w-full" />
            </div>
        )
    }

    const tableComponent = (
        <DataTable
            noCardWrapper
            columns={columns}
            data={immeubles}
            title=""
            filterColumnId="adresse"
            filterPlaceholder="Filtrer par adresse..."
            addEntityButtonText=""
            onAddEntity={() => {}}
            isDeleteMode={isDeleteMode}
            onToggleDeleteMode={toggleDeleteMode}
            rowSelection={rowSelection}
            setRowSelection={setRowSelection}
            onConfirmDelete={handleConfirmDelete}
            onRowClick={handleSelectAndFocusImmeuble}
        />
    );
    
    const mapComponent = (
        <ImmeublesMap 
            zones={zones} 
            immeubles={immeubles} 
            immeubleToFocusId={immeubleToFocusId}
            zoneToFocusId={zoneToFocusId}
            onFocusClear={handleClearFocus}
        />
    );

    return (
        <ViewToggleContainer
            title="Gestion des Immeubles"
            description="Basculez entre la vue tableau et la vue carte. Cliquez sur une adresse ou une zone pour la localiser."
            view={view}
            onViewChange={setView}
            tableComponent={tableComponent}
            mapComponent={mapComponent}
        />
    );
};

export default ImmeublesPage;


# --- components/ui-admin/select.tsx ---
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:translate-x-1 data-[side=top]:slide-in-from-bottom-2 relative z-[51] max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}



# --- pages/admin/immeubles/ImmeublesMap.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/ImmeublesMap.tsx
import { useEffect, useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { MapContainer, TileLayer, Circle, Popup, Marker, FeatureGroup } from 'react-leaflet';
import type { Map as LeafletMap, FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { Button } from '@/components/ui-admin/button';
import { type Immeuble } from './columns';
import { type Zone } from '../zones/columns';
import { Eye } from 'lucide-react';

// --- (Icon setup and Leaflet patch) ---
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});
const buildingIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#09090B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-building-2"><path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"/><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"/><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"/><path d="M10 6h4"/><path d="M10 10h4"/><path d="M10 14h4"/><path d="M10 18h4"/></svg>'),
    iconSize: [28, 28],
    iconAnchor: [14, 28],
    popupAnchor: [0, -28]
});
const focusIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="hsl(142.1 76.2% 44.1%)" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [36, 36],
    iconAnchor: [18, 36],
    popupAnchor: [0, -36],
});

interface ImmeublesMapProps {
  zones: Zone[];
  immeubles: Immeuble[];
  immeubleToFocusId: string | null;
  zoneToFocusId: string | null;
  onFocusClear: () => void;
}

export const ImmeublesMap = (props: ImmeublesMapProps) => {
    const { zones, immeubles, immeubleToFocusId, zoneToFocusId, onFocusClear } = props;
    const navigate = useNavigate();
    const [map, setMap] = useState<LeafletMap | null>(null);
    const featureGroupRef = useRef<FeatureGroupType>(null);
    const [selectedImmeuble, setSelectedImmeuble] = useState<Immeuble | null>(null);

    useEffect(() => {
        if (!map) return;

        if (immeubleToFocusId) {
            const immeuble = immeubles.find(i => i.id === immeubleToFocusId);
            if (immeuble) {
                setSelectedImmeuble(immeuble);
                map.flyTo(immeuble.latlng, 17, { animate: true, duration: 1.5 });
            }
            onFocusClear();
        } 
        else if (zoneToFocusId) {
            const zone = zones.find(z => z.id === zoneToFocusId);
            if (zone) {
                setSelectedImmeuble(null);
                map.flyTo(zone.latlng, 14, { animate: true, duration: 1.5 });
            }
            onFocusClear();
        }
    }, [immeubleToFocusId, zoneToFocusId, map, onFocusClear, immeubles, zones]);

    useEffect(() => {
        if (map && featureGroupRef.current) {
            const timer = setTimeout(() => {
                if (featureGroupRef.current && featureGroupRef.current.getLayers().length > 0) {
                     const bounds = featureGroupRef.current.getBounds();
                     if(bounds.isValid()) {
                        map.fitBounds(bounds, { padding: [50, 50], maxZoom: 16 });
                     }
                } else if (zones.length === 0 && immeubles.length === 0) {
                     map.setView([48.8566, 2.3522], 12);
                }
            }, 100);

            return () => clearTimeout(timer);
        }
    }, [map, zones, immeubles]);

    return (
        <div className="h-[70vh] w-full rounded-lg overflow-hidden">
            <MapContainer ref={setMap} center={[48.8566, 2.3522]} zoom={12} style={{ height: '100%', width: '100%' }}>
                <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' />
                
                <FeatureGroup ref={featureGroupRef}>
                    {zones.map(zone => (
                        <Circle key={zone.id} center={zone.latlng} radius={zone.radius} pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.1, weight: 2 }}>
                             <Popup><b>Zone:</b> {zone.name}<br/><b>Assignée à:</b> {zone.assignedTo}</Popup>
                        </Circle>
                    ))}
                    {immeubles.map(immeuble => (
                        <Marker key={immeuble.id} position={immeuble.latlng} icon={buildingIcon}>
                            <Popup>
                                <div className="space-y-2">
                                    <p className="font-bold">{immeuble.adresse}</p>
                                    <p className="text-sm text-muted-foreground">{immeuble.codePostal} {immeuble.ville}</p>
                                    <Button size="sm" className="bg-green-600 text-white hover:bg-green-700" onClick={() => navigate(`/admin/immeubles/${immeuble.id}`)}>
                                        <Eye className="mr-2 h-4 w-4" /> Voir les portes
                                    </Button>
                                </div>
                            </Popup>
                        </Marker>
                    ))}
                </FeatureGroup>

                {selectedImmeuble && (
                    <Marker position={selectedImmeuble.latlng} icon={focusIcon} zIndexOffset={1000}>
                        <Popup>
                            <p className="font-bold">Focus: {selectedImmeuble.adresse}</p>
                        </Popup>
                    </Marker>
                )}
            </MapContainer>
        </div>
    );
};


# --- index.css ---
/* src/index.css */
/* 
  1. NOUVELLES VARIABLES DE COULEUR "WINVEST CAPITAL"
*/
:root {
  /* Fonds et Cartes */
  --background: 255 100% 100%; /* #FFFFFF */
  --foreground: 240 10% 3.9%;   /* #0A0A0A (Presque noir pour le texte) */
  --card: 255 100% 100%;
  --card-foreground: 240 10% 3.9%;

  /* Couleurs primaires (Winvest Blue) */
  --primary: 216 70% 61%;         /* #4d86df (Bleu moyen) */
  --primary-foreground: 255 100% 100%; /* #FFFFFF (Texte sur les boutons primaires) */
  
  /* Couleurs secondaires */
  --secondary: 218 81% 83%;      /* #A5BDF1 (Bleu clair pastel) */
  --secondary-foreground: 221 100% 31%; /* #002D9F (Texte contrasté sur le secondaire) */

  /* Couleurs d'accentuation (pour les hovers, fonds subtils) */
  --accent: 0 0% 95%;           /* #F2F2F2 (Un gris très clair) */
  --accent-foreground: 240 10% 3.9%;
  
  /* Bordures et Inputs */
  --border: 0 0% 85.1%;          /* #d9d9d9 */
  --input: 0 0% 85.1%;

  /* Ring (focus) */
  --ring: 216 70% 61%;           /* #4d86df */

  /* NOUVELLES VARIABLES POUR LES ACCENTS ET DÉGRADÉS */
  --winvest-accent-purple: 259 92% 67%; /* Un violet pour les accents forts */
  --winvest-accent-cyan: 190 85% 60%;  /* Un cyan pour les dégradés */  /* Autres */

  
  --popover: 255 100% 100%;
  --popover-foreground: 240 10% 3.9%;
  --muted: 0 0% 95%;
  --muted-foreground: 240 3.8% 46.1%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  /* On définit les couleurs spécifiques mentionnées */
  --winvest-blue-clair: 218 81% 83%;    /* #A5BDF1 */
  --winvest-blue-moyen: 216 70% 61%;    /* #4d86df */
  --winvest-blue-nuit: 221 100% 31%;     /* #002D9F */
  --winvest-blue-profond: 201 77% 35%; /* #14659e */
  --winvest-grey: 0 0% 85.1%;          /* #d9d9d9 */
  --radius: 0.5rem;
}

/* On force le même thème en mode sombre pour la cohérence */
.dark {
  --background: 255 100% 100%;
  --foreground: 240 10% 3.9%;
  --card: 255 100% 100%;
  --card-foreground: 240 10% 3.9%;
  --primary: 216 70% 61%;
  --primary-foreground: 255 100% 100%;
  --secondary: 218 81% 83%;
  --secondary-foreground: 221 100% 31%;
  --accent: 0 0% 95%;
  --accent-foreground: 240 10% 3.9%;
  --border: 0 0% 85.1%;
  --input: 0 0% 85.1%;
  --ring: 216 70% 61%;
  --popover: 255 100% 100%;
  --popover-foreground: 240 10% 3.9%;
  --muted: 0 0% 95%;
  --muted-foreground: 240 3.8% 46.1%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;
}

@import "tailwindcss";

/* ... autres styles ... */

/* 
  =======================================================================
  PATCH DE DERNIER RECOURS POUR LES ÉLÉMENTS FLOTTANTS
  =======================================================================
*/

/* --- Patch pour le Dropdown Menu --- */
[data-radix-popper-content-wrapper] {
  z-index: 100 !important; /* S'assure qu'il est au-dessus de tout */
  background-color: white !important;
  border: 1px solid #EFEDED !important;
  border-radius: 0.5rem !important;
}
[data-radix-popper-content-wrapper] [role="menuitem"]:focus {
  background-color: #f4f4f5 !important;
}
/* etc. pour les autres styles du dropdown... */


/* --- Patch pour le Dialog (Modale / Popup) --- */

/* 1. Le voile d'arrière-plan */
[data-radix-dialog-overlay] {
  background-color: hsl(0 0% 0% / 0.8) !important;
  z-index: 99 !important; /* Un z-index élevé */
}

/* 2. Le contenu de la modale */
[data-radix-dialog-content-wrapper] {
  z-index: 100 !important; /* z-index PLUS ÉLEVÉ que l'overlay */
  background-color: white !important;
  border-radius: 0.5rem !important;
}

/* 3. On s'assure que le texte est lisible (au cas où il hériterait d'une couleur blanche) */
[data-radix-dialog-content-wrapper] *,
[data-radix-dialog-content-wrapper] {
  color: #09090B !important;
}

/* --- Dialog (Modale / Popup) --- */
[data-slot="dialog-overlay"] {
  z-index: 1998 !important; /* Overlay juste en dessous du contenu */
}
[data-slot="dialog-content"] {
  z-index: 1999 !important; /* Contenu de la modale au-dessus de son overlay */
}

/* --- Créateur de Zone (qui est en plein écran) --- */
[data-slot="zone-creator"] {
  z-index: 1500 !important;
}


/* ... (tout votre CSS existant) ... */

/* ======================================================= */
/*   Amélioration du style pour Leaflet GeoSearch          */
/* ======================================================= */

/* Conteneur principal de la barre de recherche */
.geosearch.bar .search-form {
  background-color: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: 0.5rem; /* Corresponds à rounded-md */
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  transition: all 150ms ease-in-out;
}

.geosearch.bar .search-form:hover {
  border-color: hsl(var(--ring));
}

/* Le champ de saisie */
.geosearch.bar .search-input {
  background-color: transparent;
  border: none;
  color: hsl(var(--foreground));
  outline: none;
}

/* Le bouton de recherche (icône loupe) */
.geosearch.bar .search-btn {
  border: none;
  border-radius: 0.375rem; /* rounded-md */
  color: hsl(var(--muted-foreground));
}
.geosearch.bar .search-btn:hover {
    background-color: hsl(var(--accent));
    color: hsl(var(--accent-foreground));
}

/* Conteneur des résultats */
.geosearch .results {
  background-color: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
}

/* Un résultat individuel */
.geosearch .results > * {
  border-bottom: 1px solid hsl(var(--border));
  color: hsl(var(--muted-foreground));
  padding-left: 1rem;
  padding-right: 1rem;
}
.geosearch .results > *:last-child {
  border-bottom: none;
}
.geosearch .results > *.active,
.geosearch .results > *:hover {
  background-color: hsl(var(--accent));
  color: hsl(var(--accent-foreground));
}



# --- App.tsx ---
// src/App.tsx
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';

// --- Logique de Routage ---
import PrivateRoute from './routes/PrivateRoute';
import RoleBasedRedirect from './routes/RoleBasedRedirect';

// --- Layouts et Pages Publiques ---
import AdminLayout from './layout/AdminLayout';
import CommercialLayout from './layout/CommercialLayout';
import Login from './pages/auth/Login';

// --- Pages Admin ---
import DashboardAdmin from './pages/admin/Dashboard/DashboardAdmin';
import ManagersPage from './pages/admin/Managers/ManagersPage';
import ManagerDetailsPage from './pages/admin/Managers/ManagerDetailsPage';
import CommerciauxPage from './pages/admin/commerciaux/CommerciauxPage';
import CommercialDetailsPage from './pages/admin/commerciaux/CommercialDetailsPage';
import EquipesPage from './pages/admin/Equipes/EquipesPage'; 
import EquipeDetailsPage from './pages/admin/Equipes/EquipeDetailsPage';
import StatistiquesPage from './pages/admin/statitistiques/StatistiquesPage';
import ZonesPage from './pages/admin/zones/ZonesPage';
import ZoneDetailsPage from './pages/admin/zones/ZoneDetailsPage'; 
import ImmeublesPage from './pages/admin/immeubles/ImmeublesPage';
import ImmeubleDetailsPage from './pages/admin/immeubles/portes/ImmeubleDetailsPage';
import SuiviPage from './pages/admin/suivi/SuiviPage';
import AssignmentGoalsPage from './pages/admin/assignment-goals/AssignmentGoalsPage';

// --- Pages Commercial ---
import CommercialDashboardPage from './pages/commercial/DashboardCommercial';
import SelectBuildingPage from './pages/commercial/SelectBuildingPage';
import ProspectingSetupPage from './pages/commercial/ProspectingSetupPage'; // <-- On importe le vrai composant
import ProspectingDoorsPage from './pages/commercial/ProspectingDoorsPage';

// On crée des composants temporaires pour les routes non encore développées
const CommercialHistory = () => <div className="p-8"><h1 className="text-3xl font-bold">Historique de Prospection</h1></div>;
const CommercialStats = () => <div className="p-8"><h1 className="text-3xl font-bold">Mes Statistiques</h1></div>;
const CommercialProfile = () => <div className="p-8"><h1 className="text-3xl font-bold">Mon Profil</h1></div>;

// --- Pages des autres Rôles (pour l'exemple) ---
import DashboardManager from './pages/manager/DashboardManager';
import DashboardDirecteur from './pages/directeur/DashboardDirecteur';
import DashboardBackoffice from './pages/backoffice/DashboardBackoffice';

import { Toaster } from "sonner";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        {/* --- Route Publique --- */}
        <Route path="/login" element={<Login />} />

        {/* --- Routes Privées Protégées --- */}
        <Route element={<PrivateRoute />}>
          
          <Route path="/" element={<RoleBasedRedirect />} />
          
          {/* --- Layout pour les administrateurs --- */}
          <Route path="/admin" element={<AdminLayout />}>
            <Route index element={<DashboardAdmin />} />
            <Route path="managers" element={<ManagersPage />} />
            <Route path="managers/:managerId" element={<ManagerDetailsPage />} />
            <Route path="equipes" element={<EquipesPage />} /> 
            <Route path="equipes/:equipeId" element={<EquipeDetailsPage />} />
            <Route path="commerciaux" element={<CommerciauxPage />} />
            <Route path="commerciaux/:id" element={<CommercialDetailsPage />} />
            <Route path="statistiques" element={<StatistiquesPage />} />
            <Route path="zones" element={<ZonesPage />} /> 
            <Route path="zones/:zoneId" element={<ZoneDetailsPage />} /> 
            <Route path="immeubles" element={<ImmeublesPage />} />
            <Route path="immeubles/:immeubleId" element={<ImmeubleDetailsPage />} />
            <Route path="suivi" element={<SuiviPage />} />
            <Route path="assignations-objectifs" element={<AssignmentGoalsPage />} />
          </Route>

          {/* --- Layout pour les commerciaux --- */}
          <Route path="/commercial" element={<CommercialLayout />}>
            <Route index element={<Navigate to="/commercial/dashboard" replace />} /> 
            
            <Route path="dashboard" element={<CommercialDashboardPage />} /> 
            
            {/* Flow de prospection */}
            <Route path="prospecting" element={<SelectBuildingPage />} />
            <Route path="prospecting/setup/:buildingId" element={<ProspectingSetupPage />} />
            <Route path="prospecting/doors/:buildingId" element={<ProspectingDoorsPage />} />

            {/* Autres pages du commercial */}
            <Route path="history" element={<CommercialHistory />} />
            <Route path="stats" element={<CommercialStats />} />
            <Route path="profile" element={<CommercialProfile />} />
          </Route>
            
          {/* Routes pour les autres rôles */}
          <Route path="/manager" element={<DashboardManager />} />
          <Route path="/directeur" element={<DashboardDirecteur />} />
          <Route path="/backoffice" element={<DashboardBackoffice />} />

        </Route>

        <Route path="*" element={<div>Page non trouvée</div>} />
      </Routes>
      <Toaster richColors position="top-right" />
    </BrowserRouter>
  );
}

export default App;


# --- pages/admin/suivi/AudioPlayer.tsx ---
// src/pages/admin/suivi/AudioPlayer.tsx
import { useEffect, useRef, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { Slider } from '@/components/ui-admin/slider';
import { Volume2, BarChart, MicOff } from 'lucide-react';
import { type Commercial } from './types';
import { Badge } from '@/components/ui-admin/badge';

interface AudioPlayerProps {
  activeCommercial: Commercial | null;
  liveText: string;
  isProspecting: boolean;
  audioChunks: Blob[];
}

export const AudioPlayer = ({ activeCommercial, liveText, isProspecting, audioChunks }: AudioPlayerProps) => {
  const audioContextRef = useRef<AudioContext | null>(null);
  const audioQueueRef = useRef<Blob[]>([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [volume, setVolume] = useState(50);
  const gainNodeRef = useRef<GainNode | null>(null);

  // Initialise l'AudioContext
  useEffect(() => {
    if (!audioContextRef.current) {
      const context = new (window.AudioContext || (window as any).webkitAudioContext)();
      audioContextRef.current = context;
      const gainNode = context.createGain();
      gainNode.connect(context.destination);
      gainNodeRef.current = gainNode;
    }
  }, []);
  
  // Met à jour le volume
  useEffect(() => {
    if (gainNodeRef.current) {
      gainNodeRef.current.gain.value = volume / 100;
    }
  }, [volume]);


  const playNextInQueue = async () => {
    if (audioQueueRef.current.length === 0) {
      setIsPlaying(false);
      return;
    }
    
    setIsPlaying(true);
    const blob = audioQueueRef.current.shift();
    if (!blob || !audioContextRef.current || !gainNodeRef.current) return;

    try {
      const arrayBuffer = await blob.arrayBuffer();
      const audioBuffer = await audioContextRef.current.decodeAudioData(arrayBuffer);
      
      const source = audioContextRef.current.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(gainNodeRef.current);
      source.onended = playNextInQueue; // Joue le prochain morceau quand celui-ci est fini
      source.start();
    } catch (error) {
      console.error("Erreur de décodage audio, passage au suivant.", error);
      playNextInQueue(); // Tente de jouer le prochain
    }
  };

  // Ajoute les nouveaux chunks à la file d'attente et démarre la lecture si nécessaire
  useEffect(() => {
    if (audioChunks.length > 0) {
      audioQueueRef.current.push(...audioChunks);
      if (!isPlaying) {
        playNextInQueue();
      }
    }
  }, [audioChunks, isPlaying]);

  // Réinitialise la file d'attente si le commercial change
  useEffect(() => {
    audioQueueRef.current = [];
    setIsPlaying(false);
  }, [activeCommercial]);


  if (!activeCommercial) {
    return (
      <Card className="bg-white shadow-md">
        <CardHeader>
          <CardTitle>Lecteur Audio</CardTitle>
          <CardDescription>Aucun commercial sélectionné.</CardDescription>
        </CardHeader>
        <CardContent className="flex items-center justify-center h-48 text-muted-foreground">
          <MicOff className="h-12 w-12" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-white shadow-md">
      <CardHeader>
        <div className="flex items-center gap-4">
          <Avatar className="h-12 w-12">
            <AvatarFallback className="text-lg bg-zinc-200 text-zinc-700">{activeCommercial.avatarFallback}</AvatarFallback>
          </Avatar>
          <div>
            <CardTitle>{activeCommercial.name}</CardTitle>
            <CardDescription>Équipe {activeCommercial.equipe} - {isProspecting ? 'En ligne' : 'Hors ligne'}</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="bg-zinc-100 border border-zinc-200 p-3 rounded-lg min-h-[100px] max-h-[200px] overflow-y-auto text-sm text-zinc-700 transition-colors">
          {isProspecting ? (
            liveText || <span className="italic text-zinc-500">En attente de transcription...</span>
          ) : (
            <span className="italic text-zinc-500">Le commercial n'est pas en prospection.</span>
          )}
        </div>
        
        <div className="flex items-center gap-4">
          <div className="flex-1 flex items-center gap-2">
             <Badge variant="outline" className={isProspecting ? "bg-green-100 text-green-800 border-green-300" : "bg-gray-100 text-gray-800 border-gray-300"}>
                {isProspecting ? <BarChart className="h-4 w-4 mr-2 animate-pulse" /> : <MicOff className="h-4 w-4 mr-2" />}
                {isProspecting ? 'EN DIRECT' : 'HORS LIGNE'}
             </Badge>
          </div>
          <div className="flex items-center gap-2 w-[120px]">
            <Volume2 className="h-5 w-5 text-muted-foreground" />
            <Slider defaultValue={[volume]} max={100} step={1} onValueChange={(value) => setVolume(value[0])} />
          </div>
        </div>
      </CardContent>
    </Card>
  );
};


# --- pages/admin/assignment-goals/AssignmentGoalsPage.tsx ---
import { useState, useEffect } from 'react';
import { Loader2, AlertCircle } from 'lucide-react';
import { toast } from 'sonner';

// Services
import { commercialService } from '@/services/commercial.service';
import { zoneService } from '@/services/zone.service';
import { managerService } from '@/services/manager.service';
import { assignmentGoalsService } from '@/services/assignment-goals.service';

// Types (supposons qu'ils sont dans un fichier types.ts)
import { AssignmentType } from '@/types/enums';
import type { Commercial, Manager, Zone } from '@/types/types';

// Composants enfants (à créer dans les fichiers suivants)
import { ZoneAssignmentCard } from '@/components/page-components/ZoneAssignmentCard';
import { GoalSettingCard } from '@/components/page-components/GoalSettingCard';
import { ZoneMapViewer } from '@/components/page-components/ZoneMapViewer';


const AssignmentGoalsPage = () => {
  // --- STATE MANAGEMENT ---
  const [data, setData] = useState<{
    commercials: Commercial[];
    managers: Manager[];
    zones: Zone[];
  }>({ commercials: [], managers: [], zones: [] });
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const [selectedZone, setSelectedZone] = useState<Zone | null>(null);

  // --- DATA FETCHING ---
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const [commercialsData, zonesData, managersData] = await Promise.all([
          commercialService.getCommerciaux(),
          zoneService.getZones(),
          managerService.getManagers(),
        ]);
        setData({ commercials: commercialsData, zones: zonesData, managers: managersData });
      } catch (err) {
        console.error("Failed to fetch initial data:", err);
        setError("Impossible de charger les données. Veuillez rafraîchir la page.");
        toast.error("Erreur de chargement des données.");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  // --- HANDLERS ---
  const handleAssignZone = async (zoneId: string, assigneeId: string, assigneeType: AssignmentType) => {
    try {
      await assignmentGoalsService.assignZone(zoneId, assigneeId, assigneeType);
      toast.success('Zone assignée avec succès!', {
        description: `La zone a été assignée à l'${assigneeType}.`,
      });
    } catch (error) {
      console.error("Erreur lors de l'assignation de la zone:", error);
      toast.error("Erreur lors de l'assignation de la zone.");
    }
  };

  const handleSetGoal = async (commercialId: string, goal: number) => {
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    try {
      await assignmentGoalsService.setMonthlyGoal(commercialId, goal, currentMonth, currentYear);
      toast.success('Objectif mensuel défini avec succès!', {
        description: `L'objectif de ${goal} contrats a été fixé.`,
      });
    } catch (error) {
      console.error("Erreur lors de la définition de l'objectif:", error);
      toast.error("Erreur lors de la définition de l'objectif.");
    }
  };
  
  const handleSelectZone = (zoneId: string) => {
    const zone = data.zones.find(z => z.id === zoneId) || null;
    setSelectedZone(zone);
  }

  // --- RENDER LOGIC ---
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-16 w-16 animate-spin text-blue-500" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen text-red-500">
        <AlertCircle className="h-16 w-16 mb-4" />
        <h2 className="text-2xl font-semibold">Une erreur est survenue</h2>
        <p>{error}</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50/50 p-4 sm:p-6 lg:p-8">
      <header className="mb-8">
        <h1 className="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
          Assignations et Objectifs
        </h1>
        <p className="mt-2 text-lg text-gray-600">
          Gérez les zones de prospection et fixez les objectifs de vos équipes.
        </p>
      </header>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Colonne de gauche avec les formulaires */}
        <div className="lg:col-span-1 flex flex-col gap-8">
          <ZoneAssignmentCard
            zones={data.zones}
            commercials={data.commercials}
            managers={data.managers}
            onAssign={handleAssignZone}
            onZoneSelect={handleSelectZone}
          />
          <GoalSettingCard
            commercials={data.commercials}
            onSetGoal={handleSetGoal}
          />
        </div>
        
        {/* Colonne de droite avec la carte */}
        <div className="lg:col-span-2">
           <ZoneMapViewer zone={selectedZone} />
        </div>
      </div>
    </div>
  );
};

export default AssignmentGoalsPage;


# --- components/ui-admin/command.tsx ---
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui-admin/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  className,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
  className?: string
  showCloseButton?: boolean
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent
        className={cn("overflow-hidden p-0", className)}
        showCloseButton={showCloseButton}
      >
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



# --- components/page-components/ZoneAssignmentCard.tsx ---
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui-admin/select';
import { Button } from '@/components/ui-admin/button';
import { MapPin, Loader2 } from 'lucide-react';
import { AssignmentType } from '@/types/enums';
import type { Commercial, Manager, Zone } from '@/types/types';

interface ZoneAssignmentCardProps {
  zones: Zone[];
  commercials: Commercial[];
  managers: Manager[];
  onAssign: (zoneId: string, assigneeId: string, assigneeType: AssignmentType) => Promise<void>;
  onZoneSelect: (zoneId: string) => void;
}

export const ZoneAssignmentCard = ({ zones, commercials, managers, onAssign, onZoneSelect }: ZoneAssignmentCardProps) => {
  const [selectedZone, setSelectedZone] = useState('');
  const [assigneeType, setAssigneeType] = useState<AssignmentType>(AssignmentType.COMMERCIAL);
  const [assigneeId, setAssigneeId] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const assigneeOptions = assigneeType === AssignmentType.COMMERCIAL ? commercials : managers;
  const isFormValid = selectedZone && assigneeId && assigneeType;

  const handleSubmit = async () => {
    if (!isFormValid) return;
    setIsSubmitting(true);
    await onAssign(selectedZone, assigneeId, assigneeType);
    setIsSubmitting(false);
  };
  
  const handleZoneChange = (zoneId: string) => {
    setSelectedZone(zoneId);
    onZoneSelect(zoneId);
  }
  
  const handleTypeChange = (type: AssignmentType) => {
    setAssigneeType(type);
    setAssigneeId(''); // Reset assignee when type changes
  }

  return (
    <Card className="shadow-md hover:shadow-lg transition-shadow">
      <CardHeader>
        <CardTitle className="flex items-center text-blue-600">
          <MapPin className="mr-3 h-6 w-6" /> Assignation de Zone
        </CardTitle>
        <CardDescription>Assignez une zone à un commercial ou manager.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Sélecteur de Zone */}
        <div className="space-y-2">
            <label className="text-sm font-medium">Zone à assigner</label>
            <Select onValueChange={handleZoneChange} value={selectedZone}>
                <SelectTrigger><SelectValue placeholder="Sélectionner une zone" /></SelectTrigger>
                <SelectContent>
                    {zones.map(z => <SelectItem key={z.id} value={z.id}>{z.nom}</SelectItem>)}
                </SelectContent>
            </Select>
        </div>

        {/* Sélecteur de Type (Commercial/Manager) */}
        <div className="space-y-2">
            <label className="text-sm font-medium">Assigner à un</label>
            <Select onValueChange={handleTypeChange} value={assigneeType}>
                <SelectTrigger><SelectValue placeholder="Type d'assigné" /></SelectTrigger>
                <SelectContent>
                    <SelectItem value={AssignmentType.COMMERCIAL}>Commercial</SelectItem>
                    <SelectItem value={AssignmentType.MANAGER}>Manager</SelectItem>
                </SelectContent>
            </Select>
        </div>

        {/* Sélecteur de Personne */}
        <div className="space-y-2">
            <label className="text-sm font-medium">{assigneeType === AssignmentType.COMMERCIAL ? 'Commercial' : 'Manager'}</label>
            <Select onValueChange={setAssigneeId} value={assigneeId} disabled={!assigneeType}>
                <SelectTrigger><SelectValue placeholder={`Sélectionner un ${assigneeType.toLowerCase()}`} /></SelectTrigger>
                <SelectContent>
                    {assigneeOptions.map(p => <SelectItem key={p.id} value={p.id}>{p.prenom} {p.nom}</SelectItem>)}
                </SelectContent>
            </Select>
        </div>

        <Button onClick={handleSubmit} disabled={!isFormValid || isSubmitting} className="w-full bg-blue-600 hover:bg-blue-700">
          {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <MapPin className="mr-2 h-4 w-4" />}
          Assigner la Zone
        </Button>
      </CardContent>
    </Card>
  );
};


# --- components/ui-admin/sheet.tsx ---
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



# --- pages/admin/zones/columns.tsx ---
// frontend-shadcn/src/pages/admin/zones/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { format } from "date-fns"
import { fr } from "date-fns/locale"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { ArrowUpDown, Edit, Calendar, Eye } from "lucide-react"
import { Link } from "react-router-dom";

export interface Zone {
  id: string;
  name: string;
  assignedTo: string;
  color: string;
  latlng: [number, number];
  radius: number;
  dateCreation: string;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createZoneColumns = (isDeleteMode: boolean, onEdit: (zone: Zone) => void): ColumnDef<Zone>[] => [
    // Colonne de sélection conditionnelle
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: any) => (<Checkbox checked={table.getIsAllPageRowsSelected()} onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)} aria-label="Select all" />),
      cell: ({ row }: any) => (<Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Select row" onClick={(e) => e.stopPropagation()} />),
      enableSorting: false, enableHiding: false,
    }] : []),
    {
        accessorKey: "name",
        header: ({ column }) => <SortableHeader title="Nom de la zone" column={column} />,
        cell: ({ row }) => <div className="font-medium text-foreground">{row.original.name}</div>,
    },
    {
        accessorKey: "assignedTo",
        header: ({ column }) => <SortableHeader title="Assignée à" column={column} />,
        cell: ({ row }) => {
            const { color, assignedTo } = row.original;
            const badgeStyle = color ? { backgroundColor: color, color: 'white', borderColor: 'transparent' } : {};
            return ( <Badge style={badgeStyle} className="border-transparent">{assignedTo}</Badge> )
        }
    },
    {
        accessorKey: "dateCreation",
        header: ({ column }) => <SortableHeader title="Date d'ajout" column={column} />,
        cell: ({ row }) => (
            <div className="flex items-center gap-2 text-muted-foreground">
                <Calendar className="h-4 w-4" />
                <span>{format(new Date(row.original.dateCreation), "d LLL yyyy", { locale: fr })}</span>
            </div>
        )
    },
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => (
            <div className="text-right space-x-2">
                <Button asChild variant="ghost" size="icon">
                    <Link to={`/admin/zones/${row.original.id}`} onClick={(e) => e.stopPropagation()}>
                        <Eye className="h-4 w-4" />
                        <span className="sr-only">Voir les détails</span>
                    </Link>
                </Button>
                <Button variant="ghost" size="icon" onClick={(e) => { e.stopPropagation(); onEdit(row.original); }}>
                    <Edit className="h-4 w-4" />
                    <span className="sr-only">Modifier la zone</span>
                </Button>
            </div>
        ),
    },
];


# --- pages/admin/immeubles/portes/portes-columns.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/portes/portes-columns.tsx

"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Badge } from "@/components/ui-admin/badge"
import { ArrowUpDown, Hash, MessageSquare, Repeat } from "lucide-react"
import { Button } from "@/components/ui-admin/button"

// --- 1. MISE À JOUR DU TYPE Porte avec les nouveaux statuts ---
export type Porte = {
  id: string
  numeroPorte: string
  statut: "Non visité" | "Visité" | "Absent" | "Refus" | "Curieux" | "Contrat signé"
  passage: number
  commentaire: string
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

// --- 2. MISE À JOUR de la configuration des couleurs des badges ---
const statusConfig = {
    "Non visité": "bg-gray-100 text-gray-800 border-gray-300",
    "Visité": "bg-blue-100 text-blue-800 border-blue-300",
    "Absent": "bg-yellow-100 text-yellow-800 border-yellow-300",
    "Refus": "bg-red-100 text-red-800 border-red-300",
    "Curieux": "bg-purple-100 text-purple-800 border-purple-300",
    "Contrat signé": "bg-green-100 text-green-800 border-green-300",
};

export const createPortesColumns = (): ColumnDef<Porte>[] => [
    {
      accessorKey: "numeroPorte",
      header: ({ column }) => <SortableHeader title="Porte" column={column} />,
      cell: ({ row }) => (
        <div className="flex items-center gap-2 font-medium">
            <Hash className="h-4 w-4 text-muted-foreground" />
            <span>{row.original.numeroPorte}</span>
        </div>
      ),
      meta: { className: "w-[120px]" },
    },
    {
      accessorKey: "statut",
      header: ({ column }) => <SortableHeader title="Statut" column={column} />,
      cell: ({ row }) => {
        const statut = row.original.statut;
        return <Badge variant="outline" className={statusConfig[statut]}>{statut}</Badge>
      }
    },
    {
      accessorKey: "passage",
      header: ({ column }) => <SortableHeader title="Passage" column={column} />,
      cell: ({ row }) => {
        const { statut, passage } = row.original;
        
        // --- 3. MISE À JOUR de la logique de repassage ---
        // Le repassage est applicable pour "Absent" et "Curieux".
        const isRepassageApplicable = statut === 'Absent' || statut === 'Curieux';

        if (!isRepassageApplicable || passage === 0) {
            return <span className="text-muted-foreground">-</span>;
        }

        return (
            <div className="flex items-center gap-2">
                <Repeat className="h-4 w-4 text-muted-foreground" />
                <span>{`Passage n°${passage}`}</span>
            </div>
        );
      }
    },
    {
      accessorKey: "commentaire",
      header: () => <Header title="Commentaire" />,
      cell: ({ row }) => {
        const commentaire = row.original.commentaire;
        if (!commentaire) return <span className="text-muted-foreground italic">Aucun</span>;
        return (
            <div className="flex items-start gap-2">
                <MessageSquare className="h-4 w-4 text-muted-foreground mt-1 shrink-0" />
                <span className="max-w-xs truncate">{commentaire}</span>
            </div>
        )
      },
    },
]


# --- components/ui-admin/ustomDatePicker.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CustomDatePicker.tsx 
// (Ou à l'intérieur de CommercialDetailsPage.tsx)
import React from 'react';
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { Calendar as CalendarIcon } from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Calendar } from "@/components/ui-admin/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover";

interface CustomDatePickerProps {
  onCancel: () => void;
  onValidate: (range: { from: Date; to: Date }) => void;
}

export const CustomDatePicker = ({ onCancel, onValidate }: CustomDatePickerProps) => {
    const [startDate, setStartDate] = React.useState<Date | undefined>();
    const [endDate, setEndDate] = React.useState<Date | undefined>();

    // Ferme le popover après sélection
    const handleStartDateSelect = (date?: Date) => {
        setStartDate(date);
    };

    const handleEndDateSelect = (date?: Date) => {
        setEndDate(date);
    };

    return (
        <div className="flex flex-wrap items-center gap-2 rounded-lg border p-2 bg-background shadow-sm">
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" className="w-[200px] font-normal justify-start text-left">
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {startDate ? format(startDate, 'd LLL y', { locale: fr }) : <span>Date de début</span>}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                    <Calendar
                        mode="single"
                        selected={startDate}
                        onSelect={handleStartDateSelect}
                        initialFocus
                        locale={fr}
                    />
                </PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" className="w-[200px] font-normal justify-start text-left">
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {endDate ? format(endDate, 'd LLL y', { locale: fr }) : <span>Date de fin</span>}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                    <Calendar
                        mode="single"
                        selected={endDate}
                        onSelect={handleEndDateSelect}
                        initialFocus
                        locale={fr}
                    />
                </PopoverContent>
            </Popover>
            <Button 
                className="bg-green-600 hover:bg-green-700" 
                onClick={() => onValidate({ from: startDate!, to: endDate! })} 
                disabled={!startDate || !endDate}
            >
                Valider
            </Button>
            <Button variant="ghost" onClick={onCancel}>
                Annuler
            </Button>
        </div>
    );
};


# --- components/page-components/GoalSettingCard.tsx ---
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui-admin/select';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Target, Loader2 } from 'lucide-react';
import type { Commercial } from '@/types/types';

interface GoalSettingCardProps {
  commercials: Commercial[];
  onSetGoal: (commercialId: string, goal: number) => Promise<void>;
}

export const GoalSettingCard = ({ commercials, onSetGoal }: GoalSettingCardProps) => {
  const [commercialId, setCommercialId] = useState('');
  const [goal, setGoal] = useState<number | string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const isFormValid = commercialId && typeof goal === 'number' && goal > 0;

  const handleSubmit = async () => {
    if (!isFormValid) return;
    setIsSubmitting(true);
    await onSetGoal(commercialId, goal as number);
    setIsSubmitting(false);
  };
  
  return (
     <Card className="shadow-md hover:shadow-lg transition-shadow">
      <CardHeader>
        <CardTitle className="flex items-center text-green-600">
          <Target className="mr-3 h-6 w-6" /> Définir un Objectif
        </CardTitle>
        <CardDescription>Fixez l'objectif mensuel de contrats pour un commercial.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Sélecteur de Commercial */}
        <div className="space-y-2">
          <label className="text-sm font-medium">Commercial</label>
          <Select onValueChange={setCommercialId} value={commercialId}>
            <SelectTrigger><SelectValue placeholder="Sélectionner un commercial" /></SelectTrigger>
            <SelectContent>
              {commercials.map(c => <SelectItem key={c.id} value={c.id}>{c.prenom} {c.nom}</SelectItem>)}
            </SelectContent>
          </Select>
        </div>
        
        {/* Input de l'objectif */}
        <div className="space-y-2">
            <label htmlFor="monthly-goal" className="text-sm font-medium">Objectif (nombre de contrats)</label>
            <div className="relative">
                <Target className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                <Input 
                    id="monthly-goal" 
                    type="number" 
                    value={goal}
                    onChange={e => setGoal(e.target.value === '' ? '' : parseInt(e.target.value, 10))} 
                    min="1"
                    placeholder="Ex: 10" 
                    className="pl-10" 
                />
            </div>
        </div>

        <Button onClick={handleSubmit} disabled={!isFormValid || isSubmitting} className="w-full bg-green-600 hover:bg-green-700">
          {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Target className="mr-2 h-4 w-4" />}
          Définir l'Objectif
        </Button>
      </CardContent>
    </Card>
  );
}


# --- pages/admin/suivi/HistoryList.tsx ---
// src/pages/admin/suivi/HistoryList.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { ScrollArea } from '@/components/ui-admin/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { formatDistanceToNow } from 'date-fns';
import { fr } from 'date-fns/locale';
import type { Transcription } from './types';
import { ArchiveX } from 'lucide-react'; // Importer une icône pour l'état vide

interface HistoryListProps {
  transcriptions: Transcription[];
  onHistoryItemClick: (transcription: Transcription) => void;
  commercials: { [id: string]: { name: string; avatarFallback: string } };
}

export const HistoryList = ({ transcriptions, onHistoryItemClick, commercials }: HistoryListProps) => {
  return (
    <Card className="flex-1 flex flex-col h-full bg-white shadow-md">
      <CardHeader>
        <CardTitle>Historique des transcriptions</CardTitle>
        <CardDescription>Derniers appels enregistrés pour ce commercial.</CardDescription>
      </CardHeader>
      <CardContent className="p-0 flex-1 overflow-hidden">
        <ScrollArea className="h-full">
          {transcriptions.length > 0 ? (
            <div className="space-y-0">
              {transcriptions.map((item) => (
                <div
                  key={item.id}
                  onClick={() => onHistoryItemClick(item)}
                  // AMÉLIORATION : Style de chaque item de la liste
                  className="flex items-start gap-4 p-4 border-b border-zinc-200 hover:bg-zinc-100 cursor-pointer transition-colors"
                >
                  <Avatar>
                    <AvatarFallback className="bg-zinc-200 text-zinc-700">
                      {commercials[item.commercialId]?.avatarFallback || '?'}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    <div className="flex justify-between items-center">
                      <p className="font-semibold">{item.commercialName}</p>
                      <p className="text-xs text-muted-foreground">
                        {formatDistanceToNow(item.date, { addSuffix: true, locale: fr })}
                      </p>
                    </div>
                    <p className="text-sm text-muted-foreground line-clamp-2 mt-1">
                      {item.snippet}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            // AMÉLIORATION : Gestion de l'état vide
            <div className="flex flex-col items-center justify-center h-full text-muted-foreground text-center p-8">
                <ArchiveX className="h-12 w-12 mb-4" />
                <p className="font-semibold">Aucun historique</p>
                <p className="text-sm">Aucun appel n'a été enregistré pour ce commercial.</p>
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
};


# --- pages/commercial/ZoneFocusMap.tsx ---
// src/pages/commercial/ZoneFocusMap.tsx
import { MapContainer, TileLayer, Circle, Marker, Popup } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

// Patch pour les icônes Leaflet
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});
const buildingIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#09090B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-building-2"><path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"/><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"/><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"/><path d="M10 6h4"/><path d="M10 10h4"/><path d="M10 14h4"/><path d="M10 18h4"/></svg>'),
    iconSize: [28, 28],
});

interface ZoneFocusMapProps {
  zone: {
    nom: string;
    latlng: [number, number];
    radius: number;
    color: string;
  };
  immeubles: {
    id: string;
    adresse: string;
    latlng: [number, number];
  }[];
}

export const ZoneFocusMap = ({ zone, immeubles }: ZoneFocusMapProps) => {
  return (
    // --- MODIFICATION ICI ---
    <div className="relative z-10 h-full w-full rounded-lg overflow-hidden border-2 border-[hsl(var(--winvest-blue-clair))]">
        <MapContainer 
            center={zone.latlng} 
            zoom={14} 
            style={{ height: '100%', width: '100%' }}
            dragging={false}
            zoomControl={false}
            scrollWheelZoom={false}
            doubleClickZoom={false}
            touchZoom={false}
        >
            <TileLayer
                attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            <Circle 
                center={zone.latlng} 
                radius={zone.radius}
                pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2 }}
            >
                <Popup>{zone.nom}</Popup>
            </Circle>

            {immeubles.map(imm => (
                <Marker key={imm.id} position={imm.latlng} icon={buildingIcon}>
                    <Popup>{imm.adresse}</Popup>
                </Marker>
            ))}
        </MapContainer>
    </div>
  );
};


# --- layout/UserNavMenu.tsx ---
// src/layout/UserNavMenu.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui-admin/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { ChevronsUpDown, LogOut } from 'lucide-react';
import { cn } from '@/lib/utils';

interface UserNavMenuProps {
  isCollapsed: boolean;
}

export function UserNavMenu({ isCollapsed }: UserNavMenuProps) {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };

  const initials = user.name.split(' ').map((n) => n[0]).join('').toUpperCase();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className={cn(
            `w-full h-auto px-2 py-2 transition-all duration-300 text-black hover:bg-zinc-100`,
            isCollapsed ? 'justify-center' : 'justify-between'
          )}
        >
          <div className="flex items-center gap-3">
            <Avatar className="h-8 w-8"><AvatarFallback>{initials}</AvatarFallback></Avatar>
            {!isCollapsed && (
              <div className="flex flex-col items-start truncate text-left">
                <span className="text-sm font-medium">{user.name}</span>
                <span className="text-xs text-muted-foreground">{user.role}</span>
              </div>
            )}
          </div>
          {!isCollapsed && <ChevronsUpDown className="h-4 w-4 text-muted-foreground" />}
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.name}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.role}@winvest.capital
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer text-red-600 focus:text-red-600 focus:bg-red-50">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Déconnexion</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


# --- pages/admin/suivi/FloatingTranscriptPopup.tsx ---
// src/pages/admin/suivi/FloatingTranscriptPopup.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { ScrollArea } from '@/components/ui-admin/scroll-area';
import { X } from 'lucide-react';
import type { Transcription } from './types';

interface FloatingTranscriptPopupProps {
  transcription: Transcription | null;
  onClose: () => void;
}

export const FloatingTranscriptPopup = ({ transcription, onClose }: FloatingTranscriptPopupProps) => {
  if (!transcription) {
    return null;
  }

  return (
    // AMÉLIORATION : Le conteneur ne gère plus la position, seulement l'animation et la taille.
    // La classe `pointer-events-auto` est cruciale pour rendre la carte cliquable.
    <div className="w-full max-w-lg pointer-events-auto animate-in fade-in-0 zoom-in-95 duration-300">
      <Card className="bg-white/95 backdrop-blur-sm shadow-xl border-zinc-200/80 flex flex-col h-[calc(100vh-12rem)] max-h-[650px]">
        <CardHeader className="flex flex-row items-center justify-between p-4 border-b border-zinc-200/80">
          <div>
            {/* AMÉLIORATION : Typographie du titre et de la description */}
            <CardTitle className="text-lg font-bold text-zinc-800 tracking-tight">
              Appel de {transcription.commercialName}
            </CardTitle>
            <CardDescription className="text-xs tracking-wider uppercase text-zinc-500 mt-1">
              {transcription.date.toLocaleDateString('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
            </CardDescription>
          </div>
          {/* AMÉLIORATION : Style du bouton de fermeture */}
          <Button variant="ghost" size="icon" onClick={onClose} className="shrink-0 text-zinc-500 hover:bg-zinc-100 hover:text-zinc-800 rounded-full">
            <X className="h-5 w-5" />
            <span className="sr-only">Fermer</span>
          </Button>
        </CardHeader>
        <CardContent className="flex-1 p-0">
          <ScrollArea className="h-full">
            {/* AMÉLIORATION : Typographie du contenu pour meilleure lisibilité */}
            <p className="text-base whitespace-pre-wrap leading-relaxed text-zinc-700 p-6">
              {transcription.fullText}
            </p>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
};


# --- components/ui-admin/ViewToggleContainer.tsx ---
// frontend-shadcn/src/components/ui/ViewToggleContainer.tsx
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { Table as TableIcon, Map as MapIcon } from 'lucide-react';
import { cn } from '@/lib/utils'; // N'oubliez pas d'importer 'cn'

interface ViewToggleContainerProps {
  title: string;
  description: string;
  view: 'table' | 'map';
  onViewChange: (view: 'table' | 'map') => void;
  tableComponent: React.ReactNode;
  mapComponent: React.ReactNode;
}

export const ViewToggleContainer = ({
  title,
  description,
  view,
  onViewChange,
  tableComponent,
  mapComponent
}: ViewToggleContainerProps) => {
  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <div className="flex flex-wrap items-start justify-between gap-4">
          <div>
            <CardTitle>{title}</CardTitle>
            <CardDescription>{description}</CardDescription>
          </div>
          <div className="flex-shrink-0 flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
            {/* --- CORRECTION DES BOUTONS ICI --- */}
            <Button
              variant='ghost'
              className={cn("transition-all", view === 'table' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')}
              onClick={() => onViewChange('table')}
            >
              <TableIcon className="mr-2 h-4 w-4" /> Tableau
            </Button>
            <Button
              variant='ghost'
              className={cn("transition-all", view === 'map' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')}
              onClick={() => onViewChange('map')}
            >
              <MapIcon className="mr-2 h-4 w-4" /> Carte
            </Button>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="flex-1 p-0">
        {view === 'table' && <div className="animate-in fade-in-0 p-6 pt-0">{tableComponent}</div>}
        {view === 'map' && <div className="animate-in fade-in-0 h-full p-0">{mapComponent}</div>}
      </CardContent>
    </Card>
  );
};


# --- layout/UserNav.tsx ---
// src/layout/UserNav.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuGroup,
} from '@/components/ui-admin/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { LogOut, User as UserIcon } from 'lucide-react';

export function UserNav() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };

  const initials = (user.name || '').split(' ').map((n) => n[0]).join('').toUpperCase();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-10 w-10 rounded-full hover:bg-black/10">
          <Avatar className="h-10 w-10 border-2 border-white/50">
            <AvatarFallback className="bg-transparent text-white font-bold">{initials}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.name}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.email || `${user.role}@winvest.capital`}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem className="cursor-pointer">
            <UserIcon className="mr-2 h-4 w-4" />
            <span>Profil</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer text-red-600 focus:text-red-600 focus:bg-red-50">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Déconnexion</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


# --- components/charts/GenericBarChart.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LabelList, Cell } from 'recharts';

interface ChartDataItem {
  [key: string]: string | number;
}

interface GenericBarChartProps {
  title: string;
  data: ChartDataItem[];
  xAxisDataKey: string;
  barDataKey: string;
  fillColor: string | ((entry: ChartDataItem, index: number) => string);
}

const chartColors = [
    'hsl(var(--chart-1))',
    'hsl(var(--chart-2))',
    'hsl(var(--chart-3))',
    'hsl(var(--chart-4))',
    'hsl(var(--chart-5))',
];

export const GenericBarChart = ({ title, data, xAxisDataKey, barDataKey }: GenericBarChartProps) => {
  return (
    <Card className="h-full">
      <CardHeader><CardTitle>{title}</CardTitle></CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={data} margin={{ top: 20, right: 10, left: -20, bottom: 40 }}>
            <CartesianGrid strokeDasharray="3 3" vertical={false} />
            
            <XAxis 
              dataKey={xAxisDataKey} 
              stroke="hsl(var(--foreground))"
              fontSize={13} 
              tickLine={false} 
              axisLine={false}
              interval={0}
              angle={-45}
              textAnchor="end"
              height={60} 
            />

            <YAxis 
              stroke="hsl(var(--muted-foreground))" 
              fontSize={12} 
              tickLine={false} 
              axisLine={false} 
            />
            <Tooltip 
              cursor={{ fill: 'hsl(var(--muted))' }} 
              contentStyle={{ backgroundColor: 'hsl(var(--background))', borderColor: 'hsl(var(--border))' }} 
            />
            <Bar dataKey={barDataKey} radius={[4, 4, 0, 0]}>
              <LabelList dataKey={barDataKey} position="top" style={{ fill: 'hsl(var(--foreground))', fontSize: '12px' }} />
              {data.map((_, index) => (
                <Cell key={`cell-${index}`} fill={chartColors[index % chartColors.length]} />
              ))}
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- layout/AdminNavContent.tsx ---
// src/layout/AdminNavContent.tsx
import { NavLink } from 'react-router-dom';
import { Button } from '@/components/ui-admin/button';
import { Users, Flag, PieChart, MapPin, FileText, Settings, LayoutDashboard, AudioLines, Building2, Target } from 'lucide-react';

// Liens spécifiques à l'administrateur
const adminNavLinks = [
  { to: '/admin', text: 'Tableau de Bord', icon: LayoutDashboard }, 
  { to: '/admin/managers', text: 'Managers', icon: Users },
  { to: '/admin/commerciaux', text: 'Commerciaux', icon: Users },
  { to: '/admin/equipes', text: 'Equipes', icon: Flag },
  { to: '/admin/immeubles', text: 'Immeubles', icon: Building2 },
  { to: '/admin/suivi', text: 'Suivi', icon: AudioLines },
  { to: '/admin/zones', text: 'Zones', icon: MapPin },
  { to: '/admin/assignations-objectifs', text: 'Assignations & Objectifs', icon: Target },
  { to: '/admin/statistiques', text: 'Statistiques', icon: PieChart },
  { to: '/admin/rapports', text: 'Rapports & exports', icon: FileText },
  { to: '/admin/parametres', text: 'Paramètres', icon: Settings },
];

interface AdminNavContentProps {
  isCollapsed: boolean;
  onLinkClick?: () => void;
}

export const AdminNavContent = ({ isCollapsed, onLinkClick }: AdminNavContentProps) => {
  return (
    <nav className="flex flex-col gap-1 px-2">
      {adminNavLinks.map((link) => (
        <NavLink to={link.to} key={link.text} end={link.to === '/admin'} onClick={onLinkClick}>
          {({ isActive }) => (
            <Button
              variant={isActive ? 'secondary' : 'ghost'}
              className={`w-full justify-start gap-3 h-10 transition-colors duration-200 ${
                isActive
                  ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]'
                  : 'hover:bg-zinc-100 text-black'
              }`}
            >
              <link.icon className="h-5 w-5" />
              {!isCollapsed && <span className="truncate">{link.text}</span>}
            </Button>
          )}
        </NavLink>
      ))}
    </nav>
  );
};


# --- components/charts/GenericLineChart.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface ChartDataItem {
  [key: string]: string | number;
}

interface LineConfig {
  dataKey: string;
  stroke: string;
  name?: string; 
}

interface GenericLineChartProps {
  title: string;
  data: ChartDataItem[];
  xAxisDataKey: string;
  lines: LineConfig[];
}

export const GenericLineChart = ({ title, data, xAxisDataKey, lines }: GenericLineChartProps) => {
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={350}> 
          <LineChart data={data} margin={{ top: 5, right: 20, left: -10, bottom: 20 }}>
            <CartesianGrid strokeDasharray="3 3" vertical={false} />
            <XAxis dataKey={xAxisDataKey} stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
            <YAxis stroke="hsl(var(--muted-foreground))" fontSize={12} tickLine={false} axisLine={false} />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: 'hsl(var(--background))', 
                borderColor: 'hsl(var(--border))',
                borderRadius: '0.5rem',
                boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
              }} 
            />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: '20px' }}/>
            {lines.map(line => (
              <Line 
                key={line.dataKey} 
                type="monotone" 
                dataKey={line.dataKey} 
                stroke={line.stroke} 
                strokeWidth={2} 
                dot={{ r: 4 }}
                name={line.name || line.dataKey} 
                activeDot={{ r: 6 }}
              />
            ))}
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- send_to_gemini.py ---
import os

EXCLUDED_DIRS = {"node_modules", ".git", ".next", ".turbo", "dist", "build"}
TEXT_EXTENSIONS = {'.ts', '.tsx', '.js', '.jsx', '.json', '.html', '.css', '.md', '.txt', '.py'}

def get_all_files(root_dir):
    result = []

    for foldername, _, filenames in os.walk(root_dir):
        if any(excluded in foldername for excluded in EXCLUDED_DIRS):
            continue

        for filename in filenames:
            filepath = os.path.join(foldername, filename)
            ext = os.path.splitext(filename)[1].lower()
            if ext in TEXT_EXTENSIONS:
                result.append(filepath)

    return result

def read_file_content(filepath):
    try:
        with open(filepath, "r", encoding="utf-8", errors="ignore") as f:
            return f.read()
    except:
        return ""

def export_balanced_parts(root_dir, output_base="code_part"):
    all_files = get_all_files(root_dir)

    # Lire tous les fichiers avec leur contenu
    file_entries = []
    for path in all_files:
        content = read_file_content(path)
        relative_path = os.path.relpath(path, root_dir)
        wrapped_content = f"\n\n# --- {relative_path} ---\n{content}\n"
        file_entries.append((relative_path, wrapped_content, len(wrapped_content)))

    # Trier les fichiers par taille (descendant)
    file_entries.sort(key=lambda x: x[2], reverse=True)

    part1, part2 = [], []
    size1, size2 = 0, 0

    for _, content, size in file_entries:
        if size1 <= size2:
            part1.append(content)
            size1 += size
        else:
            part2.append(content)
            size2 += size

    with open(f"{output_base}1.txt", "w", encoding="utf-8") as f1:
        f1.writelines(part1)

    with open(f"{output_base}2.txt", "w", encoding="utf-8") as f2:
        f2.writelines(part2)

    print(f"✅ Fichiers générés : {output_base}1.txt ({size1} car.), {output_base}2.txt ({size2} car.)")

if __name__ == "__main__":
    export_balanced_parts("./")



# --- components/ui-admin/tooltip.tsx ---
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



# --- layout/CommercialHeader.tsx ---
// src/layout/CommercialHeader.tsx
import { useState } from 'react';
import { Button } from '@/components/ui-admin/button';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui-admin/sheet';
import { Menu } from 'lucide-react';
import { CommercialNavContent } from './CommercialNavContent';
import { BrandLogo } from '@/components/ui-commercial/BrandLogo';
import { DateTimeDisplay } from './DateTimeDisplay';
import { UserNav } from './UserNav';

const CommercialHeader = () => {
  const [isSheetOpen, setIsSheetOpen] = useState(false);

  return (
    <header className="sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b border-b-[hsl(var(--winvest-blue-moyen))] bg-[hsl(var(--winvest-blue-moyen))] px-4 text-white sm:px-6">
      
      {/* Section de gauche */}
      <div className="flex items-center gap-4">
        <div className="lg:hidden">
          <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon" className="border-white/30 bg-transparent text-white hover:bg-black/10">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[250px] p-0 bg-white">
              <div className="p-4 border-b"><BrandLogo /></div>
              <div className="py-4 px-2">
                <CommercialNavContent isCollapsed={false} onLinkClick={() => setIsSheetOpen(false)} />
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <h1 className="text-xl md:text-2xl font-bold">Espace Commercial</h1>
      </div>
      
      {/* Section de droite */}
      <div className="flex items-center gap-4">
        <DateTimeDisplay />
        <UserNav />
      </div>
    </header>
  );
};

export default CommercialHeader;


# --- layout/DateTimeDisplay.tsx ---
    // src/layout/DateTimeDisplay.tsx
import { useState, useEffect } from 'react';

// Hook personnalisé pour formater la date et l'heure
const useDateTime = () => {
    const [date, setDate] = useState(new Date());

    useEffect(() => {
        const timerId = setInterval(() => setDate(new Date()), 1000);
        return () => clearInterval(timerId);
    }, []);

    const day = date.toLocaleDateString('fr-FR', { weekday: 'long' });
    const dayNumber = date.getDate();
    const month = date.toLocaleDateString('fr-FR', { month: 'long' });

    const time = date.toLocaleTimeString('fr-FR', {
        hour: '2-digit',
        minute: '2-digit',
    });
    const seconds = date.toLocaleTimeString('fr-FR', { second: '2-digit' });

    // Capitaliser la première lettre du jour et du mois
    const formattedDay = day.charAt(0).toUpperCase() + day.slice(1);
    const formattedMonth = month.charAt(0).toUpperCase() + month.slice(1);

    return {
        dateString: `${formattedDay} ${dayNumber} ${formattedMonth}`,
        timeString: time,
        secondsString: seconds,
    };
};


export const DateTimeDisplay = () => {
  const { dateString, timeString} = useDateTime();

  return (
    <div className="hidden md:flex items-center gap-4 bg-black/10 px-4 py-1.5 rounded-lg border border-white/90">
      {/* Section Date */}
      <div className="text-right">
        <span className="text-sm font-semibold tracking-wide">{dateString}</span>
      </div>

      {/* Séparateur */}
      <div className="h-6 w-px bg-white/30"></div>

      {/* Section Heure */}
      <div className="flex items-baseline gap-1.5">
        <span className="text-2xl font-bold tracking-tighter">{timeString}</span>
        {/* Les secondes clignotent avec une opacité variable */}
      </div>
    </div>
  );
};


# --- components/page-components/ZoneMapViewer.tsx ---
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import MapComponent from '@/components/MapComponent';
import { Map, Pin } from 'lucide-react';
import type { Zone } from '@/types/types';

interface ZoneMapViewerProps {
  zone: Zone | null;
}

export const ZoneMapViewer = ({ zone }: ZoneMapViewerProps) => {
  return (
    <Card className="shadow-md hover:shadow-lg transition-shadow h-full flex flex-col">
      <CardHeader>
        <CardTitle className="flex items-center text-purple-600">
          <Pin className="mr-3 h-6 w-6" /> Visualisation de la Zone
        </CardTitle>
        <CardDescription>
          {zone ? `Détails pour la zone : ${zone.nom}` : 'Sélectionnez une zone pour la voir ici.'}
        </CardDescription>
      </CardHeader>
      <CardContent className="flex-grow rounded-b-lg overflow-hidden p-0">
        {zone ? (
          <MapComponent
            latitude={zone.latitude}
            longitude={zone.longitude}
            zoom={13} 
            radius={zone.rayonMetres}
            color={zone.couleur} // Pass the zone color
            key={zone.id} // Important: force le re-rendu de la map quand la zone change
          />
        ) : (
          <div className="h-full bg-gray-100 flex flex-col items-center justify-center text-center p-8">
            <Map className="h-24 w-24 text-gray-300 mb-4" />
            <h3 className="text-xl font-semibold text-gray-600">Aucune zone sélectionnée</h3>
            <p className="text-gray-500 mt-2">
              Veuillez choisir une zone dans le panneau d'assignation pour afficher sa localisation et son périmètre.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};


# --- services/commercial.service.ts ---
// frontend-shadcn/src/services/commercial.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/commerciaux';

export type CommercialFromAPI = {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  equipeId?: string;
  managerId: string;
  historiques: { nbContratsSignes: number }[];
};

type CreateCommercialPayload = {
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
  equipeId?: string;
  managerId: string; // Ajout du managerId
};

// AJOUT: Type pour la mise à jour
type UpdateCommercialPayload = Partial<CreateCommercialPayload>;

const getCommerciaux = async (): Promise<CommercialFromAPI[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const createCommercial = async (data: CreateCommercialPayload): Promise<CommercialFromAPI> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

// AJOUT: Fonction pour mettre à jour un commercial
const updateCommercial = async (id: string, data: UpdateCommercialPayload): Promise<CommercialFromAPI> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};

const deleteCommercial = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};
// frontend-shadcn/src/services/commercial.service.ts
// ... (haut du fichier inchangé)

// AJOUT DE LA NOUVELLE FONCTION
const getCommercialDetails = async (id: string): Promise<any> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

export const commercialService = {
  getCommerciaux,
  getCommercialDetails, // AJOUT
  createCommercial,
  updateCommercial,
  deleteCommercial,
};



# --- services/manager.service.ts ---
// frontend-shadcn/src/services/manager.service.ts
import axios from 'axios';
import type { Manager } from '@/types/types'; // On réutilise le type existant

const API_URL = 'http://localhost:3000/managers'; // L'URL de notre back-end

// DTO pour la création/mise à jour, on peut les définir ici
type CreateManagerPayload = {
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
};

type UpdateManagerPayload = Partial<CreateManagerPayload>;

// Fonction pour récupérer tous les managers
const getManagers = async (): Promise<Manager[]> => {
  const response = await axios.get(API_URL);
  // On peut ajouter ici un mapping si les données de l'API ne correspondent pas exactement au type `Manager` du front.
  // Dans notre cas, elles correspondent, mais c'est une bonne pratique.
  return response.data;
};

// Fonction pour créer un manager
const createManager = async (data: CreateManagerPayload): Promise<Manager> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

// Fonction pour mettre à jour un manager
const updateManager = async (id: string, data: UpdateManagerPayload): Promise<Manager> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};
// AJOUT DE LA NOUVELLE FONCTION
const getManagerDetails = async (id: string): Promise<any> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};
// Fonction pour supprimer un manager
const deleteManager = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

export const managerService = {
  getManagers,
  createManager,
  getManagerDetails,
  updateManager,
  deleteManager,
};


# --- components/ui-admin/scroll-area.tsx ---
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }



# --- components/ui-admin/button-variants.ts ---
import { cva } from "class-variance-authority"

export const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)



# --- pages/auth/Login.tsx ---
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';

const Login = () => {
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleLogin = (role: 'admin' | 'manager' | 'directeur' | 'backoffice' | 'commercial') => {
    login(role);
    navigate('/'); // On redirige vers la racine, qui s'occupera de dispatcher vers le bon dashboard
  };

  return (
    <div className="flex items-center justify-center h-screen bg-secondary">
      <Card className="w-[400px]">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl">Finanssor</CardTitle>
          <CardDescription>Veuillez vous connecter en choisissant un rôle.</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={() => handleLogin('admin')}>Connexion Admin</Button>
          <Button variant="outline" onClick={() => handleLogin('manager')}>Connexion Manager</Button>
          <Button variant="outline" onClick={() => handleLogin('directeur')}>Connexion Directeur</Button>
          <Button variant="outline" onClick={() => handleLogin('backoffice')}>Connexion Back-office</Button>
          <Button variant="outline" onClick={() => handleLogin('commercial')}>Connexion Commercial</Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default Login;


# --- layout/LogoutButton.tsx ---
// src/layout/LogoutButton.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"
import { LogOut } from 'lucide-react';
import { cn } from '@/lib/utils';

interface LogoutButtonProps {
  // Contexte pour adapter le style (fond bleu vs fond blanc)
  context?: 'header' | 'sidebar';
}

export function LogoutButton({ context = 'sidebar' }: LogoutButtonProps) {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };
  
  // Styles différents pour le bouton selon où il se trouve
  const buttonVariant = context === 'header' ? 'ghost' : 'outline';
  const buttonClasses = context === 'header' ? 'text-white hover:bg-black/10 hover:text-white border-white/30' : '';

  return (
    <TooltipProvider delayDuration={100}>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant={buttonVariant}
            size="icon"
            onClick={handleLogout}
            className={cn(buttonClasses)}
          >
            <LogOut className="h-4 w-4" />
            <span className="sr-only">Déconnexion</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>Déconnexion</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}


# --- layout/CommercialSidebar.tsx ---
// src/layout/CommercialSidebar.tsx
import { Button } from '@/components/ui-admin/button';
import { PanelLeftClose, PanelLeftOpen } from 'lucide-react';
import { CommercialNavContent } from './CommercialNavContent';
import logo from '@/assets/logo.png';

interface CommercialSidebarProps {
  isCollapsed: boolean;
  toggleSidebar: () => void;
}

export const CommercialSidebar = ({ isCollapsed, toggleSidebar }: CommercialSidebarProps) => {
  return (
    <aside
      className={`hidden lg:flex flex-col bg-[#FAFAFA] transition-all duration-300 sticky top-0 h-screen ${
        isCollapsed ? 'w-20' : 'w-64'
      }`}
    >
      {/* HEADER (identique à AdminSidebar) */}
      <div className="relative flex items-center h-20 transition-all duration-300 justify-center">
        {!isCollapsed && (
          <img
            src={logo}
            alt="Logo Groupe Finanssor"
            className="h-30 w-auto object-contain -translate-x-6"
          />
        )}

        <Button
          variant="ghost"
          size="icon"
          onClick={toggleSidebar}
          className="absolute right-4"
        >
          {isCollapsed
            ? <PanelLeftOpen className="h-5 w-5" />
            : <PanelLeftClose className="h-5 w-5" />}
        </Button>
      </div>

      {/* NAVIGATION */}
      <div className="flex-1 py-4">
        <CommercialNavContent isCollapsed={isCollapsed} />
      </div>
    </aside>
  );
};



# --- services/porte.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/portes';

export type PorteFromAPI = {
  id: string;
  numeroPorte: string;
  status: string; // Assuming string for now, can be refined with an enum if available
  nbPassages: number;
  commentaire: string | null;
  immeubleId: string;
};

type CreatePortePayload = {
  numeroPorte: string;
  status: string;
  nbPassages?: number;
  commentaire?: string;
  repassage?: boolean;
  immeubleId: string;
};

type UpdatePortePayload = Partial<CreatePortePayload>;

const getPortes = async (): Promise<PorteFromAPI[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getPorteDetails = async (id: string): Promise<PorteFromAPI> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

const createPorte = async (data: CreatePortePayload): Promise<PorteFromAPI> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

const updatePorte = async (id: string, data: UpdatePortePayload): Promise<PorteFromAPI> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};

const deletePorte = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

export const porteService = {
  getPortes,
  getPorteDetails,
  createPorte,
  updatePorte,
  deletePorte,
};



# --- pages/admin/Managers/managers-table/equipes-columns.tsx ---
// frontend-shadcn/src/pages/admin/manager-details-table/equipes-columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Users, Flag } from "lucide-react"
import type { Commercial } from '../../commerciaux/commerciaux-table/columns';

export type EquipeDuManager = {
  id: string
  nom: string
  nbCommerciaux: number
  commerciaux: Commercial[];
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

export const createEquipesColumns = (): ColumnDef<EquipeDuManager>[] => [
  {
    accessorKey: "nom",
    header: () => <Header title="Nom de l'équipe" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2 font-medium text-foreground">
        <Flag className="h-4 w-4 text-muted-foreground" />
        {row.getValue("nom")}
      </div>
    ),
  },
  {
    accessorKey: "nbCommerciaux",
    header: () => <div className="text-center"><Header title="Effectif" /></div>,
    cell: ({ row }) => (
      <div className="text-center flex items-center justify-center gap-2">
        <Users className="h-4 w-4 text-muted-foreground" />
        {row.getValue("nbCommerciaux")}
      </div>
    )
  },
  // La colonne "Actions" est supprimée. La navigation se fera au clic de la ligne.
]


# --- components/ui-admin/badge-variants.ts ---
import { cva } from "class-variance-authority"

export const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)



# --- pages/admin/suivi/SuiviSidebar.tsx ---
// src/pages/admin/suivi/SuiviSidebar.tsx
import { AudioPlayer } from './AudioPlayer';
import { HistoryList } from './HistoryList';
import type { Commercial, Transcription } from './types';

interface SuiviSidebarProps {
  activeCommercial: Commercial | null;
  transcriptions: Transcription[];
  commercialsMap: { [id: string]: { name: string; avatarFallback: string } };
  onHistoryItemClick: (transcription: Transcription) => void;
  liveText: string;
  isProspecting: boolean;
  audioChunks: Blob[]; // NOUVEAU
}

export const SuiviSidebar = (props: SuiviSidebarProps) => {
  return (
    <div className="bg-zinc-50 rounded-lg flex flex-col h-full gap-6 p-4 border border-zinc-200 shadow-sm">
      <AudioPlayer 
        activeCommercial={props.activeCommercial}
        liveText={props.liveText}
        isProspecting={props.isProspecting}
        audioChunks={props.audioChunks} // Transmission des données audio
      />
      <HistoryList 
        transcriptions={props.transcriptions} 
        onHistoryItemClick={props.onHistoryItemClick}
        commercials={props.commercialsMap}
      />
    </div>
  );
};


# --- components/ui-admin/Modal.tsx ---
// src/components/ui/Modal.tsx
import { X } from 'lucide-react';
import type { ReactNode } from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: ReactNode;
}

export const Modal = ({ isOpen, onClose, title, children }: ModalProps) => {
  if (!isOpen) {
    return null;
  }

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/80 animate-in fade-in-0"
      onClick={onClose}
    >
      <div
        className="relative bg-white rounded-lg shadow-xl w-full max-w-6xl animate-in zoom-in-95"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex items-center justify-between p-4">
          <h3 className="text-lg font-semibold">{title}</h3>
          <button onClick={onClose} className="p-1 rounded-full hover:bg-gray-200">
            <X className="h-5 w-5" />
          </button>
        </div>
        <div className="p-6">
          {children}
        </div>
      </div>
    </div>
  );
};


# --- pages/admin/Dashboard/DashboardSkeleton.tsx ---
import { Skeleton } from "@/components/ui-admin/skeleton";

export const DashboardSkeleton = () => {
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <Skeleton className="h-8 w-64" />
        <Skeleton className="h-10 w-[180px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Skeleton className="lg:col-span-4 h-[380px]" />
        <Skeleton className="lg:col-span-3 h-[380px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Skeleton className="lg:col-span-4 h-[380px]" />
        <Skeleton className="lg:col-span-3 h-[380px]" />
      </div>
    </div>
  );
};


# --- routes/RoleBasedRedirect.tsx ---
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const RoleBasedRedirect = () => {
  const { user } = useAuth();

  if (!user) {
    return <Navigate to="/login" />;
  }
  
  // En fonction du rôle de l'utilisateur, on le redirige vers le bon dashboard
  switch (user.role) {
    case 'admin':
      return <Navigate to="/admin" />; // Cette route existe
    case 'manager':
      return <Navigate to="/manager" />; // Cette route existe
    case 'directeur':
      return <Navigate to="/directeur" />; // Cette route existe
    case 'backoffice':
      return <Navigate to="/backoffice" />; // Cette route existe
    case 'commercial':
      return <Navigate to="/commercial" />; // Cette route existe
    default:
      return <Navigate to="/login" />;
  }
  //
};

export default RoleBasedRedirect;


# --- layout/CommercialLayout.tsx ---
// src/layout/CommercialLayout.tsx
import { useState } from 'react';
import { Outlet } from 'react-router-dom';
import { CommercialSidebar } from './CommercialSidebar';
import CommercialHeader from './CommercialHeader';

const CommercialLayout = () => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div className="flex h-screen bg-muted/40">
      <CommercialSidebar isCollapsed={isCollapsed} toggleSidebar={toggleSidebar} />
      <div className="flex-1 flex flex-col overflow-hidden">
        <CommercialHeader />
        <main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default CommercialLayout;


# --- pages/admin/suivi/types.ts ---
// src/pages/admin/suivi/types.ts

// Type pour un commercial, peut être enrichi
export interface Commercial {
    id: string;
    name: string;
    avatarFallback: string;
    position: [number, number]; // [latitude, longitude]
    equipe: string;
  }
  
  // Type pour une entrée de l'historique des transcriptions
  export interface Transcription {
    id: string;
    commercialId: string;
    commercialName: string;
    date: Date;
    snippet: string; // Un extrait de la transcription
    fullText: string; // La transcription complète
  }
  
  // Type pour une zone géographique
  export interface Zone {
    id: string;
    name: string;
    color: string;
    latlng: [number, number];
    radius: number;
  }


# --- App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



# --- pages/admin/Dashboard/TableSkeleton.tsx ---
// frontend-shadcn/src/pages/admin/TableSkeleton.tsx
import { Skeleton } from "@/components/ui-admin/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui-admin/card";

export const TableSkeleton = () => (
  <Card className="animate-in fade-in-0 duration-500">
    <CardHeader>
      <Skeleton className="h-6 w-1/2" />
    </CardHeader>
    <CardContent className="space-y-3">
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-10 w-full" />
    </CardContent>
  </Card>
);


# --- routes/PrivateRoute.tsx ---
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const PrivateRoute = () => {
  const { isAuthenticated } = useAuth();
  // Si l'utilisateur est authentifié, on affiche le contenu de la route (via Outlet)
  // Sinon, on le redirige vers la page de login
  return isAuthenticated ? <Outlet /> : <Navigate to="/login" replace />;
};

export default PrivateRoute;


# --- main.tsx ---
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { AuthProvider } from './contexts/AuthContext.tsx' // <-- Importer

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <AuthProvider> {/* <-- Envelopper App */}
      <App />
    </AuthProvider>
  </React.StrictMode>,
)


# --- pages/directeur/DashboardDirecteur.tsx ---
// Fichier: src/pages/admin/DashboardAdmin.tsx
const DashboardDirecteur = () => {
    return (
      <div className="p-8">
          <h1 className="text-3xl font-bold">Tableau de Bord - Admin</h1>
      </div>
    );
  };
  export default DashboardDirecteur;


# --- lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



# --- types/assignment-type.ts ---
export enum AssignmentType {
  COMMERCIAL = 'COMMERCIAL',
  MANAGER = 'MANAGER',
}

