

# --- pages/commercial/DashboardCommercial.tsx ---
// src/pages/commercial/DashboardCommercialPage.tsx

import { useState, useEffect } from 'react';
// import axios from 'axios'; // Supprimé car nous utilisons des données simulées
import { useAuth } from '@/contexts/AuthContext';
import StatCard from '@/components/ui-admin/StatCard';
import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { 
    MapPin, 
    CheckCircle, 
    Percent, 
    DoorOpen, 
    PlayCircle, 
    Clock, 
    PlusCircle,
    BarChart2
} from 'lucide-react';
import { GenericLineChart } from '@/components/charts/GenericLineChart';
import { ZoneFocusMap } from './ZoneFocusMap';
import { cn } from '@/lib/utils';

// =================================================================
// DÉBUT DES DONNÉES SIMULÉES (MOCK DATA)
// Ces données remplacent les appels API pour le développement en frontend.
// =================================================================

const mockZoneAssignee = {
    nom: 'Paris 17ème - Batignolles',
    latlng: [48.8839, 2.3184] as [number, number],
    radius: 1000, // or any appropriate value
    color: '#3b82f6', // or any appropriate color
};

const mockImmeublesDansZone = [
    { id: 'imm-1', adresse: '123 Rue des Dames', latlng: [48.8855, 2.321] as [number, number] },
    { id: 'imm-2', adresse: '45 Avenue de Clichy', latlng: [48.8865, 2.325] as [number, number] },
    { id: 'imm-3', adresse: '78 Boulevard des Batignolles', latlng: [48.883, 2.319] as [number, number] },
    { id: 'imm-4', adresse: '9 Rue Legendre', latlng: [48.888, 2.315] as [number, number] },
];

const mockAccesRapides = [
    { 
        title: "Démarrer une nouvelle prospection",
        description: "Enregistrer une visite dans un nouvel immeuble.",
        href: "/commercial/prospection/nouvelle",
        icon: PlayCircle 
    },
    { 
        title: "Ajouter un immeuble",
        description: "Enrichir la base de données de votre secteur.",
        href: "/commercial/immeubles/ajouter",
        icon: PlusCircle
    },
    { 
        title: "Voir tous mes rapports",
        description: "Consulter l'historique détaillé de vos visites.",
        href: "/commercial/rapports",
        icon: BarChart2
    }
];

const mockStats = {
    kpis: {
        immeublesVisites: 12,
        portesVisitees: 157,
        contratsSignes: 8,
        tauxDeConversion: 5.1,
        heuresTravaillees: 32, // Ajout pour la carte "Heures Travaillées"
    },
    repartitionStatuts: {
        "RDV Pris": 21,
        "Contrat Signé": 8,
        "Refus Définitif": 45,
        "Pas Intéressé": 63,
        "À Recontacter": 15,
        "Absent": 5,
    }
};

const mockHistory = [
    { id: 'hist-1', adresse: '123 Rue des Dames', ville: 'Paris', dateProspection: '2023-10-26T10:00:00Z', portesProspectees: 40, tauxCouverture: 80, nbRdvPris: 5, nbContratsSignes: 2 },
    { id: 'hist-2', adresse: '45 Avenue de Clichy', ville: 'Paris', dateProspection: '2023-10-25T14:30:00Z', portesProspectees: 60, tauxCouverture: 75, nbRdvPris: 8, nbContratsSignes: 3 },
    { id: 'hist-3', adresse: '78 Boulevard des Batignolles', ville: 'Paris', dateProspection: '2023-10-24T11:00:00Z', portesProspectees: 30, tauxCouverture: 90, nbRdvPris: 4, nbContratsSignes: 1 },
    { id: 'hist-4', adresse: '9 Rue Legendre', ville: 'Paris', dateProspection: '2023-10-23T16:00:00Z', portesProspectees: 27, tauxCouverture: 65, nbRdvPris: 4, nbContratsSignes: 2 },
];

// =================================================================
// FIN DES DONNÉES SIMULÉES
// =================================================================

const CommercialDashboardPage = () => {
    const [timeFilter, setTimeFilter] = useState<'week' | 'month'>('week');
    const { user } = useAuth();
    const [stats, setStats] = useState<any>(null);
    const [history, setHistory] = useState<any>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchSimulatedData = () => {
            if (!user || !user.id) {
                setError('ID du commercial non disponible.');
                setLoading(false);
                return;
            }

            setLoading(true);
            setError(null);

            // Simulation d'un appel API avec un délai de 1 seconde
            setTimeout(() => {
                try {
                    // Ici, nous utilisons nos données simulées au lieu d'une réponse d'API
                    setStats(mockStats);
                    setHistory(mockHistory);
                } catch (err) {
                    console.error('Error processing simulated data:', err);
                    setError('Erreur lors du traitement des données simulées.');
                } finally {
                    setLoading(false);
                }
            }, 1000); // Délai de 1000ms (1 seconde)
        };

        fetchSimulatedData();
    }, [user]);

    // Transformation des données pour GenericLineChart (corrigée pour être plus logique)
    const activitePortesData = history?.map((item: any) => ({
        name: item.adresse, // Utilise l'adresse comme étiquette sur l'axe X
        Portes: item.portesProspectees, // Nombre de portes réellement prospectées
        RDV: item.nbRdvPris, // Nombre de RDV pris
        Contrats: item.nbContratsSignes, // Nombre de contrats signés
    })) || [];

    if (loading) {
        return <div className="text-center py-8">Chargement de vos données...</div>;
    }

    if (error) {
        return <div className="text-center py-8 text-red-500">{error}</div>;
    }

    // Utilisation des données simulées après le chargement
    const currentStats = stats?.kpis || { immeublesVisites: 0, portesVisitees: 0, contratsSignes: 0, tauxDeConversion: 0, heuresTravaillees: 0 };
    const repartitionStatuts = stats?.repartitionStatuts || {};
    const totalPortes = (Object.values(repartitionStatuts) as number[]).reduce((sum, count) => sum + count, 0);

    return (
        <div className="space-y-8">
            <div>
                <h1 className="text-3xl font-bold">Tableau de Bord</h1>
                <p className="text-muted-foreground">Bienvenue ! Voici un résumé de votre activité.</p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-3">
                            <MapPin className="h-6 w-6 text-primary" />
                            <span>Zone de Prospection Actuelle</span>
                        </CardTitle>
                        <CardDescription>Secteur prioritaire pour la semaine en cours.</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <h3 className="text-2xl font-bold text-primary">{mockZoneAssignee.nom}</h3>
                        <p className="text-muted-foreground mt-2">Vous avez {mockImmeublesDansZone.length} immeubles enregistrés dans cette zone.</p>
                        <div className="mt-4 space-y-3">
                            {mockAccesRapides.map(item => (
                                <a href={item.href} key={item.title} className="block">
                                    <Card className="border hover:border-[hsl(var(--winvest-blue-clair))] hover:bg-zinc-50 hover:shadow-sm transition-all group">
                                        <CardHeader className="flex flex-row items-center gap-4 p-3 space-y-0">
                                            <div className="p-2 bg-muted rounded-md"><item.icon className="h-5 w-5 text-primary" /></div>
                                            <div>
                                                <p className="font-semibold group-hover:text-primary transition-colors">{item.title}</p>
                                                <p className="text-xs text-muted-foreground">{item.description}</p>
                                            </div>
                                        </CardHeader>
                                    </Card>
                                </a>
                            ))}
                        </div>
                    </CardContent>
                </Card>
                <div className="min-h-[400px]">
                    <ZoneFocusMap zone={mockZoneAssignee} immeubles={mockImmeublesDansZone} />
                </div>
            </div>

             <div className="space-y-4">
                <div className="flex flex-wrap items-center justify-between gap-4">
                    <h2 className="text-2xl font-semibold">Vos Performances</h2>
                    <div className="flex items-center gap-1 rounded-lg border p-1 bg-white">
                        <Button 
                            variant="ghost" 
                            onClick={() => setTimeFilter('week')}
                            className={cn( "transition-all text-black", timeFilter === 'week' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'hover:bg-zinc-100' )}
                        >Cette semaine</Button>
                        <Button 
                            variant="ghost" 
                            onClick={() => setTimeFilter('month')}
                            className={cn( "transition-all text-black", timeFilter === 'month' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'hover:bg-zinc-100' )}
                        >Ce mois</Button>
                    </div>
                </div>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
                    <StatCard title="Immeubles Visitées" value={currentStats.immeublesVisites} Icon={MapPin} color="text-blue-500" />
                    <StatCard title="Portes Visitées" value={currentStats.portesVisitees} Icon={DoorOpen} color="text-orange-500" />
                    <StatCard title="Contrats Signés" value={currentStats.contratsSignes} Icon={CheckCircle} color="text-emerald-500" />
                    <StatCard title="Taux de Conversion" value={currentStats.tauxDeConversion} Icon={Percent} color="text-violet-500" suffix="%" />
                    <StatCard title="Heures Travaillées" value={currentStats.heuresTravaillees} Icon={Clock} color="text-amber-500" suffix="h" />
                </div>
            </div>

            <Card>
                <CardHeader>
                    <CardTitle>Répartition des Statuts</CardTitle>
                    <CardDescription>Proportion de chaque statut sur l'ensemble des portes prospectées.</CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {Object.entries(repartitionStatuts).map(([status, count]) => (
                            <div key={status} className="flex items-center justify-between p-3 border rounded-md">
                                <span className="font-medium">{status}</span>
                                <span className="text-lg font-bold">{((count as number / totalPortes) * 100 || 0).toFixed(1)}%</span>
                            </div>
                        ))}
                    </div>
                </CardContent>
            </Card>

            <Card>
                <CardHeader>
                    <CardTitle>Historique de Prospection</CardTitle>
                    <CardDescription>Détail des visites et performances par immeuble.</CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                                <tr>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Immeuble</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date Dernière Visite</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Taux Couverture</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">RDV Pris</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contrats Signés</th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {history?.map((item: any) => (
                                    <tr key={item.id}>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{item.adresse}, {item.ville}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{new Date(item.dateProspection).toLocaleDateString()}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.tauxCouverture}%</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.nbRdvPris}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.nbContratsSignes}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </CardContent>
            </Card>

            <GenericLineChart 
                title="Entonnoir de Prospection par Immeuble"
                data={activitePortesData} 
                xAxisDataKey="name" 
                lines={[
                    { dataKey: 'Portes', name: "Portes Prospectées", stroke: 'hsl(var(--winvest-blue-profond))' },
                    { dataKey: 'RDV', name: "RDV Pris", stroke: 'hsl(var(--winvest-blue-moyen))' },
                    { dataKey: 'Contrats', name: "Contrats Signés", stroke: 'hsl(var(--emerald-500))' }
                ]}
            />
        </div>
    );
};

export default CommercialDashboardPage;


# --- pages/admin/statitistiques/StatistiquesPage.tsx ---
// src/pages/admin/statistiques/StatistiquesPage.tsx
import { useState, useMemo, useEffect } from 'react';
import { statisticsService } from '@/services/statistics.service';
import type { PeriodType, StatEntityType } from '@/services/statistics.service';
import { motion } from 'framer-motion';

// --- Imports des Composants ---
import StatCard from '@/components/ui-admin/StatCard';
import { GenericBarChart } from '@/components/charts/GenericBarChart';
import { GenericPieChart } from '@/components/charts/GenericPieChart';
import { LeaderboardTable } from './LeaderboardTable';
import { Button } from '@/components/ui-admin/button';
import { cn } from '@/lib/utils';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { StatistiquesSkeleton } from './StatistiquesSkeleton';

// --- Imports des Icônes ---
import { 
    BarChart3, Briefcase, FileSignature, Target, X
} from 'lucide-react';
import { managerService } from '@/services/manager.service';
import { equipeService } from '@/services/equipe.service';
import { commercialService } from '@/services/commercial.service';

const StatistiquesPage = () => {
    const [timeFilter, setTimeFilter] = useState<PeriodType>('MONTH');
    const [entityType, setEntityType] = useState<StatEntityType | 'ALL'>('ALL');
    const [entityId, setEntityId] = useState<string | undefined>(undefined);
    
    const [statsData, setStatsData] = useState<any>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const [entities, setEntities] = useState<{ id: string, nom: string }[]>([]);
    const [loadingEntities, setLoadingEntities] = useState(false);

    useEffect(() => {
        const fetchEntities = async () => {
            if (entityType === 'ALL') {
                setEntities([]);
                setEntityId(undefined);
                return;
            }
            setLoadingEntities(true);
            try {
                let data: any[] = [];
                if (entityType === 'MANAGER') {
                    data = await managerService.getManagers();
                } else if (entityType === 'EQUIPE') {
                    data = await equipeService.getEquipes();
                } else if (entityType === 'COMMERCIAL') {
                    data = await commercialService.getCommerciaux();
                }
                setEntities(data.map((e: any) => ({ id: e.id, nom: e.nom || `${e.prenom} ${e.nom}` })));
            } catch (err) {
                console.error("Failed to fetch entities:", err);
                setEntities([]);
            } finally {
                setLoadingEntities(false);
            }
        };

        fetchEntities();
    }, [entityType]);

    useEffect(() => {
        const fetchStatistics = async () => {
            setLoading(true);
            setError(null);
            try {
                const query = {
                    period: timeFilter,
                    ...(entityType !== 'ALL' && { entityType }),
                    ...(entityType !== 'ALL' && entityId && { entityId }),
                };
                const data = await statisticsService.getStatistics(query);
                setStatsData(data);
            } catch (err) {
                setError("Impossible de charger les statistiques.");
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        fetchStatistics();
    }, [timeFilter, entityType, entityId]);

    const handleEntityTypeChange = (value: string) => {
        setEntityType(value as StatEntityType | 'ALL');
        setEntityId(undefined); // Reset entityId when type changes
    };

    const handleEntityIdChange = (value: string) => {
        setEntityId(value === 'ALL' ? undefined : value);
    };

    const currentData = useMemo(() => {
        if (!statsData) return null;
        
        const kpis = {
            contratsSignes: statsData.totalContrats ?? 0,
            rdvPris: statsData.totalRdv ?? 0,
            tauxConclusionGlobal: statsData.tauxConclusion ?? 0,
            portesVisitees: statsData.totalPortesVisitees ?? 0,
        };

        const mapToPerformer = (item: any, index: number) => ({
            rank: index + 1,
            name: item.name,
            avatar: item.name.substring(0, 2).toUpperCase(),
            value: item.value,
            change: 0, // La propriété 'change' n'est pas fournie par l'API
        });

        const leaderboards = {
            managers: statsData.leaderboards?.managers.map(mapToPerformer) ?? [],
            equipes: statsData.leaderboards?.equipes.map(mapToPerformer) ?? [],
            commerciaux: statsData.leaderboards?.commerciaux.map(mapToPerformer) ?? [],
        };

        const charts = {
            contratsParEquipe: statsData.contratsParEquipe ?? [],
            repartitionParManager: statsData.repartitionParManager ?? [],
        };

        return { kpis, leaderboards, charts };
    }, [statsData]);

    if (loading) return <StatistiquesSkeleton />;
    if (error) return <div className="text-red-500">{error}</div>;
    if (!currentData) return <div>Aucune donnée disponible.</div>;

    return (
        <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-8 p-8 bg-white min-h-screen font-sans"
        >
            <div className="flex flex-wrap gap-6 justify-between items-center pb-6 border-b border-gray-200">
                <h1 className="text-4xl font-extrabold tracking-tight text-gray-900">Tableau de Bord des Statistiques</h1>
                <div className="flex items-center gap-3">
                    {entityType === 'ALL' ? (
                        <Select onValueChange={handleEntityTypeChange} value={entityType}>
                            <SelectTrigger className="w-[200px] h-11 rounded-lg border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all duration-200">
                                <SelectValue placeholder="Filtrer par type d'entité" />
                            </SelectTrigger>
                            <SelectContent className="rounded-lg shadow-lg">
                                <SelectItem value="ALL">Toutes les Entités</SelectItem>
                                <SelectItem value="MANAGER">Manager</SelectItem>
                                <SelectItem value="EQUIPE">Équipe</SelectItem>
                                <SelectItem value="COMMERCIAL">Commercial</SelectItem>
                            </SelectContent>
                        </Select>
                    ) : (
                        <div className="flex items-center gap-2">
                            <Select onValueChange={handleEntityIdChange} value={entityId || 'ALL'} disabled={loadingEntities}>
                                <SelectTrigger className="w-[200px] h-11 rounded-lg border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all duration-200">
                                    <SelectValue placeholder="Choisir lequel" />
                                </SelectTrigger>
                                <SelectContent className="rounded-lg shadow-lg">
                                    <SelectItem value="ALL">Tous</SelectItem>
                                    {entities.map(e => <SelectItem key={e.id} value={e.id}>{e.nom}</SelectItem>)}
                                </SelectContent>
                            </Select>
                            <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => {
                                    setEntityType('ALL');
                                    setEntityId(undefined);
                                }}
                                className="h-9 w-9 rounded-full bg-gray-100 text-gray-500 hover:bg-gray-200 hover:text-gray-700 flex items-center justify-center p-0"
                            >
                                <X className="h-5 w-5" />
                            </Button>
                        </div>
                    )}
                </div>
                <div className="flex items-center gap-2 p-1 bg-white rounded-xl shadow-sm border border-gray-200">
                    <Button 
                        variant='ghost' 
                        onClick={() => setTimeFilter('WEEK')} 
                        className={cn(
                            "px-5 py-2 rounded-lg text-base font-medium transition-all duration-300", 
                            timeFilter === 'WEEK' 
                                ? 'bg-[hsl(var(--winvest-blue-moyen))] text-white shadow-md hover:bg-[hsl(var(--winvest-blue-moyen))] hover:text-white' 
                                : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                        )}
                    >Cette semaine</Button>
                    <Button 
                        variant='ghost' 
                        onClick={() => setTimeFilter('MONTH')} 
                        className={cn(
                            "px-5 py-2 rounded-lg text-base font-medium transition-all duration-300", 
                            timeFilter === 'MONTH' 
                                ? 'bg-[hsl(var(--winvest-blue-moyen))] text-white shadow-md hover:bg-[hsl(var(--winvest-blue-moyen))] hover:text-white' 
                                : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                        )}
                    >Ce mois</Button>
                    <Button 
                        variant='ghost' 
                        onClick={() => setTimeFilter('YEAR')} 
                        className={cn(
                            "px-5 py-2 rounded-lg text-base font-medium transition-all duration-300", 
                            timeFilter === 'YEAR' 
                                ? 'bg-[hsl(var(--winvest-blue-moyen))] text-white shadow-md hover:bg-[hsl(var(--winvest-blue-moyen))] hover:text-white' 
                                : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                        )}
                    >Cette année</Button>
                </div>
            </div>

            <section className="mt-8">
                <h2 className="text-2xl font-bold mb-6 text-gray-800">Indicateurs Clés de Performance (KPIs)</h2>
                <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
                    <StatCard title="Contrats Signés" value={currentData.kpis.contratsSignes} Icon={FileSignature} color="text-emerald-600" />
                    <StatCard title="RDV Pris" value={currentData.kpis.rdvPris} Icon={Briefcase} color="text-sky-600" />
                    <StatCard title="Portes Visitées" value={currentData.kpis.portesVisitees} Icon={BarChart3} color="text-orange-600" />
                    <StatCard title="Taux de Conclusion Global" value={currentData.kpis.tauxConclusionGlobal} Icon={Target} suffix="%" color="text-violet-600" />
                </div>
            </section>

            <div className="grid grid-cols-1 gap-6 mt-8">
                {/* Main Content Column (Charts) */}
                <div className="space-y-6">
                    <Card className="shadow-lg border border-gray-200 rounded-xl overflow-hidden transition-all duration-300 hover:shadow-xl">
                        <CardHeader className="bg-gray-50 border-b border-gray-200 py-4 px-6">
                            <CardTitle className="text-lg font-semibold text-gray-800">Contrats par Équipe</CardTitle>
                            <CardDescription className="text-sm text-gray-600">Répartition des contrats signés par équipe.</CardDescription>
                        </CardHeader>
                        <CardContent className="p-6">
                            <GenericBarChart
                                title="Contrats par Équipe"
                                data={currentData.charts.contratsParEquipe}
                                xAxisDataKey="name"
                                barDataKey="value"
                                fillColor="hsl(var(--winvest-blue-moyen))"
                            />
                        </CardContent>
                    </Card>

                    <Card className="shadow-lg border border-gray-200 rounded-xl overflow-hidden transition-all duration-300 hover:shadow-xl">
                        <CardHeader className="bg-gray-50 border-b border-gray-200 py-4 px-6">
                            <CardTitle className="text-lg font-semibold text-gray-800">Répartition des Contrats par Manager</CardTitle>
                            <CardDescription className="text-sm text-gray-600">Pourcentage des contrats attribués à chaque manager.</CardDescription>
                        </CardHeader>
                        <CardContent className="p-6">
                            <GenericPieChart
                                title="Répartition des Contrats par Manager"
                                data={currentData.charts.repartitionParManager}
                                dataKey="value"
                                nameKey="name"
                                colors={['hsl(var(--winvest-blue-moyen))', 'hsl(var(--winvest-blue-clair))', 'hsl(var(--winvest-blue-nuit))', 'hsl(var(--winvest-blue-profond))']}
                            />
                        </CardContent>
                    </Card>
                </div>
            </div>

            <section className="mt-8">
                <h2 className="text-2xl font-bold mb-6 text-gray-800">Classements</h2>
                <div className="grid gap-6 md:grid-cols-1 lg:grid-cols-3">
                    <LeaderboardTable title="Top Managers" description="Basé sur le nombre de contrats signés par leurs équipes." data={currentData.leaderboards.managers} unit="Contrats" />
                    <LeaderboardTable title="Top Équipes" description="Basé sur le nombre total de contrats signés." data={currentData.leaderboards.equipes} unit="Contrats" />
                    <LeaderboardTable title="Top Commerciaux" description="Basé sur leurs contrats signés individuels." data={currentData.leaderboards.commerciaux} unit="Contrats" />
                </div>
            </section>
        </motion.div>
    );
};

export default StatistiquesPage;


# --- pages/admin/commerciaux/CommerciauxPage.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CommerciauxPage.tsx

import React, { useState, useEffect, useMemo } from "react";
import type { Commercial } from "./commerciaux-table/columns";
import { createColumns } from "./commerciaux-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import type { RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { commercialService } from "@/services/commercial.service";
import { equipeService } from "@/services/equipe.service";
import { managerService } from "@/services/manager.service";
import type { Manager } from "@/types/types";



const CommerciauxPage = () => {
  const [data, setData] = useState<Commercial[]>([]);
  const [managers, setManagers] = useState<Manager[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<Commercial[]>([]);
  
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  
  const initialFormState = { nom: "", prenom: "", email: "", telephone: "", equipeId: "", managerId: "" };
  const [newCommercialData, setNewCommercialData] = useState(initialFormState);
  const [editingCommercial, setEditingCommercial] = useState<Commercial | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [commerciauxFromApi, equipesFromApi, managersFromApi] = await Promise.all([
        commercialService.getCommerciaux(), equipeService.getEquipes(), managerService.getManagers(),
      ]);

      setManagers(managersFromApi);

      const equipesMap = new Map(equipesFromApi.map((e) => [e.id, e.nom] as const));
      const managersMap = new Map(managersFromApi.map((m) => [m.id, `${m.prenom} ${m.nom}`] as const));

      const enrichedCommerciaux: Commercial[] = commerciauxFromApi.map((comm) => {
        const totalContratsSignes = comm.historiques.reduce(
          (sum: number, history: any) => sum + history.nbContratsSignes,
          0,
        );
        return {
          id: comm.id,
          nom: comm.nom,
          prenom: comm.prenom,
          email: comm.email,
          telephone: comm.telephone || '',
          equipeId: comm.equipeId,
          managerId: comm.managerId,
          manager: managersMap.get(comm.managerId) || 'N/A',
          equipe: comm.equipeId ? equipesMap.get(comm.equipeId) || 'Non assignée' : 'Non assignée',
          classement: 0, // Temporary, will be set after sorting
          totalContratsSignes,
        };
      });

      // Sort commercials by totalContratsSignes for ranking
      enrichedCommerciaux.sort(
        (a, b) => {
          const aTotal = commerciauxFromApi.find(c => c.id === a.id)?.historiques.reduce((sum: number, h: any) => sum + h.nbContratsSignes, 0) || 0;
          const bTotal = commerciauxFromApi.find(c => c.id === b.id)?.historiques.reduce((sum: number, h: any) => sum + h.nbContratsSignes, 0) || 0;
          return bTotal - aTotal;
        }
      );

      const rankedCommerciaux = enrichedCommerciaux.map((comm, index) => ({
        ...comm,
        classement: index + 1,
      }));

      setData(rankedCommerciaux);
    } catch (error) { console.error("Erreur lors de la récupération des données:", error); } 
    finally { setLoading(false); }
  };

  const handleEditOpen = (commercial: Commercial) => {
    setEditingCommercial(commercial);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingCommercial) return;
    setEditingCommercial({ ...editingCommercial, [e.target.name]: e.target.value });
  };
  
  const handleEditSelectChange = (managerId: string) => {
    if (!editingCommercial) return;
    setEditingCommercial({ ...editingCommercial, managerId });
  };

  const handleUpdateCommercial = async () => {
    if (!editingCommercial) return;
    try {
      const { id, nom, prenom, email, telephone, managerId } = editingCommercial;
      
      const payload = {
        nom, prenom, email, managerId,
        telephone: telephone || undefined,
      };

      await commercialService.updateCommercial(id, payload);

      setIsEditModalOpen(false);
      setEditingCommercial(null);
      fetchData();
    } catch (error) {
      console.error("Erreur de mise à jour du commercial:", error);
    }
  };

  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewCommercialData((prev) => ({ ...prev, [e.target.id]: e.target.value }));
  };
  const handleAddCommercial = async () => {
    const { nom, prenom, email, telephone, managerId } = newCommercialData;
    if (!nom || !prenom || !email || !managerId) {
      alert("Veuillez remplir tous les champs obligatoires.");
      return;
    }

    try {
      await commercialService.createCommercial({ nom, prenom, email, telephone, managerId });
      setIsAddModalOpen(false);
      setNewCommercialData(initialFormState);
      fetchData();
    } catch (error) {
      console.error("Erreur lors de l'ajout du commercial:", error);
    }
  };

  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map((c) => commercialService.deleteCommercial(c.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) { console.error("Erreur lors de la suppression:", error); }
  };

  const toggleDeleteMode = () => { setIsDeleteMode((prev) => !prev); setRowSelection({}); };
  const handleConfirmDelete = (selectedItems: Commercial[]) => { setItemsToDelete(selectedItems); };

  const columns = useMemo(() => createColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
    return <div>Chargement des commerciaux...</div>;
  }

  return (
    <>
      <DataTable
        columns={columns}
        data={data}
        title="Gestion des Commerciaux"
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de commercial..."
        addEntityButtonText="Ajouter un Commercial"
        onAddEntity={() => setIsAddModalOpen(true)}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
      />

      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])} title="Confirmer la suppression">
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} commercial(ux) suivant(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map((item) => <li key={item.id}>{item.prenom} {item.nom}</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)} title="Ajouter un nouveau commercial">
        <h2 className="text-lg font-semibold mb-4">Ajouter un nouveau commercial</h2>
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" placeholder="Nom de famille" value={newCommercialData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" placeholder="Prénom" value={newCommercialData.prenom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" placeholder="adresse@email.com" value={newCommercialData.email} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="telephone">Téléphone (optionnel)</Label><Input id="telephone" type="tel" placeholder="0612345678" value={newCommercialData.telephone} onChange={handleAddInputChange} /></div>
          <div className="space-y-1">
            <Label htmlFor="managerId">Manager</Label>
            <Select onValueChange={(value) => setNewCommercialData((prev) => ({ ...prev, managerId: value }))} value={newCommercialData.managerId}>
              <SelectTrigger id="managerId"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
              <SelectContent>
                {managers.map((manager) => (
                  <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddCommercial} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>
      
      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} title="Modifier le commercial">
        <h2 className="text-lg font-semibold mb-4">Modifier le commercial</h2>
        {editingCommercial && (
            <div className="grid gap-4">
            <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" name="nom" value={editingCommercial.nom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" name="prenom" value={editingCommercial.prenom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" name="email" type="email" value={editingCommercial.email} onChange={handleEditInputChange} /></div>
            <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" name="telephone" type="tel" value={editingCommercial.telephone || ''} onChange={handleEditInputChange} /></div>
            <div className="space-y-1">
                <Label htmlFor="managerId">Manager</Label>
                <Select onValueChange={handleEditSelectChange} value={editingCommercial.managerId}>
                <SelectTrigger id="managerId"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
                <SelectContent>
                    {managers.map((manager) => ( <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem> ))}
                </SelectContent>
                </Select>
            </div>
            </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
            <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
            <Button onClick={handleUpdateCommercial} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  );
};

export default CommerciauxPage;


# --- pages/admin/Equipes/EquipesPage.tsx ---
import React, { useState, useEffect, useMemo } from "react";
import type { Equipe } from "./equipes-table/columns";
import { createEquipesColumns } from "./equipes-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import type { RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select";
import { equipeService } from "@/services/equipe.service";
import { managerService } from "@/services/manager.service";
import type { Manager } from '@/types/types';

const EquipesPage = () => {
  const [data, setData] = useState<Equipe[]>([]);
  const [managersList, setManagersList] = useState<Manager[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [itemsToDelete, setItemsToDelete] = useState<Equipe[]>([]);

  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const initialFormState = { nom: '', managerId: '' };
  const [newEquipeData, setNewEquipeData] = useState(initialFormState);
  const [editingEquipe, setEditingEquipe] = useState<Equipe | null>(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [equipesFromApi, managersFromApi] = await Promise.all([
        equipeService.getEquipes(),
        managerService.getManagers(),
      ]);

      setManagersList(managersFromApi);

      const managersMap = new Map(managersFromApi.map(m => [m.id, m]));

      const enrichedEquipes: Equipe[] = equipesFromApi.map((equipe) => {
        const manager = managersMap.get(equipe.managerId);
        const totalContratsSignes = equipe.commerciaux.reduce((acc: number, commercial: any) => {
          return acc + commercial.historiques.reduce((accHist: number, hist: any) => accHist + hist.nbContratsSignes, 0);
        }, 0);

        return {
          id: equipe.id,
          nom: equipe.nom,
          manager: {
            id: manager?.id || '',
            nom: manager ? `${manager.prenom} ${manager.nom}` : "N/A",
            avatarFallback: manager ? `${manager.prenom[0]}${manager.nom[0]}` : "?",
          },
          nbCommerciaux: equipe.commerciaux.length,
          totalContratsSignes: totalContratsSignes,
          classementGeneral: 0, // Placeholder, will be calculated next
        };
      });

      // Sort by totalContratsSignes to determine ranking
      enrichedEquipes.sort((a, b) => b.totalContratsSignes - a.totalContratsSignes);

      // Assign classementGeneral based on sorted order
      const rankedEquipes = enrichedEquipes.map((equipe, index) => ({
        ...equipe,
        classementGeneral: index + 1,
      }));
      
      setData(rankedEquipes);
    } catch (error) {
      console.error("Erreur:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleEditOpen = (equipe: Equipe) => {
    setEditingEquipe(equipe);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingEquipe) return;
    setEditingEquipe({ ...editingEquipe, nom: e.target.value });
  };
  
  const handleEditSelectChange = (managerId: string) => {
    if (!editingEquipe) return;
    const manager = managersList.find(m => m.id === managerId);
    if (manager) {
        setEditingEquipe({
            ...editingEquipe,
            manager: {
                ...editingEquipe.manager,
                id: manager.id,
                nom: `${manager.prenom} ${manager.nom}`
            }
        });
    }
  };

  const handleUpdateEquipe = async () => {
    if (!editingEquipe) return;
    try {
      const payload = {
        nom: editingEquipe.nom,
        managerId: editingEquipe.manager.id,
      };
      await equipeService.updateEquipe(editingEquipe.id, payload);
      setIsEditModalOpen(false);
      setEditingEquipe(null);
      fetchData();
    } catch(error) {
      console.error("Erreur de mise à jour de l'équipe:", error);
    }
  };

  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewEquipeData(prev => ({ ...prev, nom: e.target.value }));
  };

  const handleAddSelectChange = (managerId: string) => {
    setNewEquipeData(prev => ({ ...prev, managerId }));
  };

  const handleAddEquipe = async () => {
    if (!newEquipeData.nom || !newEquipeData.managerId) {
      alert("Veuillez remplir tous les champs.");
      return;
    }
    try {
      await equipeService.createEquipe(newEquipeData);
      setIsAddModalOpen(false);
      setNewEquipeData(initialFormState);
      fetchData();
    } catch (error) {
      console.error("Erreur lors de l'ajout de l'équipe:", error);
    }
  };

  const handleDelete = async () => {
    try {
      await Promise.all(itemsToDelete.map(e => equipeService.deleteEquipe(e.id)));
      setItemsToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchData();
    } catch (error) {
      console.error("Erreur lors de la suppression:", error);
    }
  };

  const toggleDeleteMode = () => { setIsDeleteMode(prev => !prev); setRowSelection({}); };
  const handleConfirmDelete = (selectedItems: Equipe[]) => { setItemsToDelete(selectedItems); };

  const columns = useMemo(() => createEquipesColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
    return <div>Chargement des équipes...</div>;
  }

  return (
    <>
      <DataTable 
        columns={columns} data={data} title="Gestion des Équipes" filterColumnId="nom"
        filterPlaceholder="Filtrer par nom d'équipe..." addEntityButtonText="Ajouter une Équipe"
        onAddEntity={() => setIsAddModalOpen(true)} isDeleteMode={isDeleteMode} onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection} setRowSelection={setRowSelection} onConfirmDelete={handleConfirmDelete}
      />

      <Modal isOpen={itemsToDelete.length > 0} onClose={() => setItemsToDelete([])} title="Confirmer la suppression">
        <h2 className="text-lg font-semibold">Confirmer la suppression</h2>
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {itemsToDelete.length} équipe(s) suivante(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {itemsToDelete.map(item => <li key={item.id}>{item.nom} (Manager: {item.manager.nom})</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setItemsToDelete([])}>Annuler</Button>
          <Button variant="destructive" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)} title="Ajouter une nouvelle équipe">
        <h2 className="text-lg font-semibold mb-4">Ajouter une nouvelle équipe</h2>
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom-equipe">Nom de l'équipe</Label><Input id="nom-equipe" placeholder="Ex: Oméga" value={newEquipeData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1">
            <Label htmlFor="manager-equipe">Manager responsable</Label>
            <Select onValueChange={handleAddSelectChange} value={newEquipeData.managerId}>
              <SelectTrigger id="manager-equipe"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
              <SelectContent>
                {managersList.map(manager => (
                  <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddEquipe} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>

      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} title="Modifier l'équipe">
        <h2 className="text-lg font-semibold mb-4">Modifier l'équipe</h2>
        {editingEquipe && (
          <div className="grid gap-4">
            <div className="space-y-1"><Label htmlFor="nom-equipe-edit">Nom de l'équipe</Label><Input id="nom-equipe-edit" value={editingEquipe.nom} onChange={handleEditInputChange} /></div>
            <div className="space-y-1">
              <Label htmlFor="manager-equipe-edit">Manager responsable</Label>
              <Select onValueChange={handleEditSelectChange} value={editingEquipe.manager.id}>
                <SelectTrigger id="manager-equipe-edit"><SelectValue placeholder="Sélectionner un manager" /></SelectTrigger>
                <SelectContent>
                  {managersList.map(manager => (
                    <SelectItem key={manager.id} value={manager.id}>{manager.prenom} {manager.nom}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
          <Button onClick={handleUpdateEquipe} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  )
}

export default EquipesPage;


# --- components/data-table/DataTable.tsx ---
import * as React from "react"
import { useNavigate } from "react-router-dom"
import {
  type ColumnDef, type ColumnFiltersState, type SortingState, type RowSelectionState, type Row,
  flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel,
  getSortedRowModel, useReactTable,
} from "@tanstack/react-table"
import { PlusCircle, Search, Trash2, XCircle } from "lucide-react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui-admin/table"
import { Button } from "@/components/ui-admin/button"
import { Input } from "@/components/ui-admin/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui-admin/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui-admin/select"
import { cn } from "@/lib/utils"

interface DataTableProps<TData extends { id: string }, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  filterColumnId: string
  filterPlaceholder: string
  title: string
  rowLinkBasePath?: string
  onRowClick?: (row: TData) => void
  addEntityButtonText?: string
  onAddEntity?: () => void
  isDeleteMode: boolean
  onToggleDeleteMode: () => void
  onConfirmDelete: (selectedRows: TData[]) => void
  rowSelection: RowSelectionState
  setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>>
  customHeaderContent?: React.ReactNode
  noCardWrapper?: boolean;
}

export function DataTable<TData extends { id: string }, TValue>({
  columns, data, filterColumnId, filterPlaceholder, title, rowLinkBasePath, onRowClick,
  addEntityButtonText, onAddEntity,
  isDeleteMode, onToggleDeleteMode, onConfirmDelete,
  rowSelection, setRowSelection,
  customHeaderContent,
  noCardWrapper = false,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])
  const [searchFocused, setSearchFocused] = React.useState(false)
  const navigate = useNavigate()

  const table = useReactTable({
    data, columns, onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters, onRowSelectionChange: setRowSelection,
    getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(), getFilteredRowModel: getFilteredRowModel(),
    state: { sorting, columnFilters, rowSelection },
  })

  const selectedRowsData = table.getFilteredSelectedRowModel().rows.map(row => row.original)
  const areRowsClickable = (onRowClick || rowLinkBasePath) && !isDeleteMode

  const handleRowClick = (row: Row<TData>) => {
    if (isDeleteMode) {
      row.toggleSelected()
    } else if (onRowClick) {
      onRowClick(row.original)
    } else if (rowLinkBasePath) {
      navigate(`${rowLinkBasePath}/${row.original.id}`)
    }
  }

  const tableContent = (
    <>
      {title && (
        <CardHeader>
          <CardTitle>{title}</CardTitle>
        </CardHeader>
      )}
      
      <CardContent className={!title ? "pt-6" : ""}>
        <div className="flex flex-wrap items-center justify-between gap-4 mb-4">
          <div className={cn(
            "relative w-full md:w-auto transition-all",
            searchFocused ? "ring-2 ring-primary/30 rounded-md" : "",
          )}>
            <Search className={cn(
              "absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 transition-all",
              searchFocused ? "text-primary" : "text-muted-foreground"
            )} />
            <Input
              placeholder={filterPlaceholder}
              value={(table.getColumn(filterColumnId)?.getFilterValue() as string) ?? ""}
              onChange={e=>table.getColumn(filterColumnId)?.setFilterValue(e.target.value)}
              className="pl-10 w-full min-w-[280px] md:min-w-[320px]"
              onFocus={()=>setSearchFocused(true)}
              onBlur={()=>setSearchFocused(false)}
              aria-label="Rechercher"
            />
          </div>

          <div className="flex flex-wrap items-center gap-2">
            {customHeaderContent}
            {!isDeleteMode ? (
              <>
                {addEntityButtonText && (
                  <Button onClick={onAddEntity} className="bg-black text-white hover:bg-zinc-800 focus:ring-2 focus:ring-black/40 focus:outline-none">
                    <PlusCircle className="mr-2 h-4 w-4" />{addEntityButtonText}
                  </Button>
                )}
                <Button variant="outline" onClick={onToggleDeleteMode} className="focus:ring-2 focus:ring-destructive/30 focus:outline-none">
                  <Trash2 className="mr-2 h-4 w-4" />Supprimer
                </Button>
              </>
            ) : (
              <>
                <Button variant="destructive" disabled={selectedRowsData.length===0} onClick={()=>onConfirmDelete(selectedRowsData)} className="bg-red-600 text-white hover:bg-red-700 border border-red-600 focus:ring-2 focus:ring-red-400 focus:outline-none">
                  <Trash2 className="mr-2 h-4 w-4" />Supprimer ({selectedRowsData.length})
                </Button>
                <Button variant="outline" onClick={onToggleDeleteMode} className="focus:ring-2 focus:ring-muted/30 focus:outline-none">
                  <XCircle className="mr-2 h-4 w-4" />Annuler
                </Button>
              </>
            )}
          </div>
        </div>
        
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map(headerGroup=>(
              <TableRow key={headerGroup.id} className="border-b-[#EFEDED] hover:bg-transparent">
                {headerGroup.headers.map(header=>(
                  <TableHead key={header.id} className={cn("h-12 px-4 text-base font-semibold text-gray-600 bg-muted/50", (header.column.columnDef.meta as { className?: string })?.className)}>
                    {header.isPlaceholder?null:flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows.length?table.getRowModel().rows.map((row,index)=>(
              <TableRow key={row.id} data-state={row.getIsSelected()&&"selected"} onClick={()=>handleRowClick(row)} className={cn(
                "group border-b-[#EFEDED] animate-in fade-in-0 slide-in-from-bottom-2 transition",
                areRowsClickable?"cursor-pointer":"select-none",
                row.getIsSelected()&&isDeleteMode?"bg-red-50":row.getIsSelected()?"bg-blue-50":""
              )} style={{animationDelay:`${index*30}ms`}}>
                {row.getVisibleCells().map(cell=>(
                  <TableCell key={cell.id} className={cn("group-hover:bg-zinc-100 transition-colors duration-150 py-4 px-4", (cell.column.columnDef.meta as { className?: string })?.className)}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            )):(
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center text-gray-400">
                  <span className="flex flex-col items-center justify-center gap-2">
                    <Search className="mx-auto h-8 w-8 opacity-30" />
                    <span>Aucun résultat trouvé.</span>
                  </span>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
        
        <div className="flex flex-col-reverse sm:flex-row items-center justify-between gap-4 pt-4">
          <div className="text-sm text-muted-foreground">
            {isDeleteMode?`${table.getFilteredSelectedRowModel().rows.length} sélectionné(s) sur ${table.getFilteredRowModel().rows.length} visible(s)`:
            `${table.getFilteredRowModel().rows.length} ligne(s) affichée(s)`}
          </div>
          <div className="flex items-center justify-center sm:justify-end flex-wrap gap-4">
            <Select value={`${table.getState().pagination.pageSize}`} onValueChange={v=>table.setPageSize(Number(v))}>
              <SelectTrigger className="w-[140px] md:w-[160px] min-w-[140px]"><SelectValue placeholder={`${table.getState().pagination.pageSize} par page`}/></SelectTrigger>
              <SelectContent>{[10,20,30,40,50].map(ps=><SelectItem key={ps} value={`${ps}`}>{ps} par page</SelectItem>)}</SelectContent>
            </Select>
            <div className="flex items-center space-x-2 rounded-lg border px-3 py-1 bg-gray-50 min-w-[180px]">
              <div className="text-sm font-medium">Page {table.getState().pagination.pageIndex+1} sur {table.getPageCount()}</div>
              <Button variant="outline" size="sm" onClick={()=>table.previousPage()} disabled={!table.getCanPreviousPage()}>Précédent</Button>
              <Button variant="outline" size="sm" onClick={()=>table.nextPage()} disabled={!table.getCanNextPage()}>Suivant</Button>
            </div>
          </div>
        </div>
      </CardContent>
    </>
  );

  if (noCardWrapper) {
    return tableContent;
  }
  
  return (
    <Card>
      {tableContent}
    </Card>
  )
}


# --- pages/admin/Managers/ManagersPage.tsx ---
// frontend-shadcn/src/pages/admin/Managers/ManagersPage.tsx

import React, { useState, useEffect, useMemo } from "react";
import type { Manager } from "./managers-table/columns";
import { getColumns } from "./managers-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { Input } from "@/components/ui-admin/input";
import { Label } from "@/components/ui-admin/label";
import { type RowSelectionState } from "@tanstack/react-table";
import { Modal } from "@/components/ui-admin/Modal";
import { managerService } from "@/services/manager.service";

type ManagerWithEquipes = Manager & { equipes: any[] };

const ManagersPage = () => {
  const [data, setData] = useState<ManagerWithEquipes[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  const [managersToDelete, setManagersToDelete] = useState<ManagerWithEquipes[]>([]);
  
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const initialFormState = { nom: '', prenom: '', email: '', telephone: '' };
  const [newManagerData, setNewManagerData] = useState(initialFormState);
  const [editingManager, setEditingManager] = useState<ManagerWithEquipes | null>(null);

  useEffect(() => {
    fetchManagers();
  }, []);

  const fetchManagers = async () => {
    setLoading(true);
    try {
      const managers = await managerService.getManagers() as ManagerWithEquipes[];
      const formattedManagers = managers.map((m) => {
        const nbEquipes = m.equipes.length;
        const totalContratsSignes = m.equipes.reduce((accEquipe: number, equipe: any) => {
          return (
            accEquipe +
            equipe.commerciaux.reduce((accCommercial: number, commercial: any) => {
              return (
                accCommercial +
                commercial.historiques.reduce((accHistory: number, history: any) => {
                  return accHistory + history.nbContratsSignes;
                }, 0)
              );
            }, 0)
          );
        }, 0);

        return {
          ...m,
          telephone: m.telephone || '',
          nbEquipes: nbEquipes,
          totalContratsSignes: totalContratsSignes,
          equipes: m.equipes,
        };
      });

      // Sort managers by totalContratsSignes for ranking
      formattedManagers.sort((a, b) => b.totalContratsSignes - a.totalContratsSignes);

      const rankedManagers = formattedManagers.map((m, index) => ({
        ...m,
        classement: index + 1,
      }));

      setData(rankedManagers);
    } catch (error) {
      console.error("Erreur lors de la récupération des managers:", error);
    } finally {
      setLoading(false);
    }
  };

  // --- LOGIQUE D'ÉDITION ---
  const handleEditOpen = (manager: ManagerWithEquipes) => {
    setEditingManager(manager);
    setIsEditModalOpen(true);
  };
  
  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingManager) return;
    setEditingManager({ ...editingManager, [e.target.id]: e.target.value });
  };
  
  const handleUpdateManager = async () => {
    if (!editingManager) return;
    try {
      const { id, nom, prenom, email, telephone } = editingManager;
      const payload = { nom, prenom, email, telephone: telephone || undefined };
      await managerService.updateManager(id, payload);
      setIsEditModalOpen(false);
      setEditingManager(null);
      fetchManagers();
    } catch (error) {
      console.error("Erreur de mise à jour du manager:", error);
    }
  };

  // --- LOGIQUE D'AJOUT ---
  const handleAddInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewManagerData(prev => ({ ...prev, [e.target.id]: e.target.value }));
  };

  const handleAddManager = async () => {
    if (!newManagerData.nom || !newManagerData.prenom || !newManagerData.email) {
        alert("Les champs Nom, Prénom et Email sont obligatoires.");
        return;
    }
    try {
      await managerService.createManager(newManagerData);
      setIsAddModalOpen(false);
      setNewManagerData(initialFormState);
      fetchManagers();
    } catch (error) {
      console.error("Erreur lors de l'ajout du manager:", error);
    }
  };

  // --- LOGIQUE DE SUPPRESSION ---
  const handleDelete = async () => {
    try {
      await Promise.all(managersToDelete.map(m => managerService.deleteManager(m.id)));
      setManagersToDelete([]);
      setIsDeleteMode(false);
      setRowSelection({});
      fetchManagers();
    } catch (error) {
      console.error("Erreur lors de la suppression:", error);
    }
  };
  
  const toggleDeleteMode = () => {
    setIsDeleteMode(prev => !prev);
    setRowSelection({});
  };

  const handleConfirmDelete = (selectedManagers: ManagerWithEquipes[]) => {
    setManagersToDelete(selectedManagers);
  };
  
  const columns = useMemo(() => getColumns(isDeleteMode, handleEditOpen), [isDeleteMode]);

  if (loading) {
      return <div>Chargement des managers...</div>;
  }

  return (
    <>
      <DataTable 
        columns={columns} 
        data={data} 
        title="Gestion des Managers"
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de manager..."
        addEntityButtonText="Ajouter un Manager"
        onAddEntity={() => setIsAddModalOpen(true)}
        isDeleteMode={isDeleteMode}
        onToggleDeleteMode={toggleDeleteMode}
        rowSelection={rowSelection}
        setRowSelection={setRowSelection}
        onConfirmDelete={handleConfirmDelete}
      />

      <Modal
        isOpen={managersToDelete.length > 0}
        onClose={() => setManagersToDelete([])}
        title="Confirmer la suppression"
      >
        <p className="text-sm text-muted-foreground mt-2">Êtes-vous sûr de vouloir supprimer les {managersToDelete.length} manager(s) suivant(s) ?</p>
        <ul className="my-4 list-disc list-inside max-h-40 overflow-y-auto bg-slate-50 p-3 rounded-md">
          {managersToDelete.map(m => <li key={m.id}>{m.prenom} {m.nom}</li>)}
        </ul>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setManagersToDelete([])}>Annuler</Button>
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={handleDelete}>Valider</Button>
        </div>
      </Modal>

      <Modal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        title="Ajouter un nouveau manager"
      >
        <div className="grid gap-4">
          <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" placeholder="Dupont" value={newManagerData.nom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" placeholder="Jean" value={newManagerData.prenom} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" placeholder="jean.dupont@example.com" value={newManagerData.email} onChange={handleAddInputChange} /></div>
          <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" type="tel" placeholder="0612345678" value={newManagerData.telephone} onChange={handleAddInputChange} /></div>
        </div>
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setIsAddModalOpen(false)}>Annuler</Button>
          <Button onClick={handleAddManager} className="bg-green-600 text-white hover:bg-green-700">Enregistrer</Button>
        </div>
      </Modal>

      <Modal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        title="Modifier le manager"
      >
        {editingManager && (
            <div className="grid gap-4">
                <div className="space-y-1"><Label htmlFor="nom">Nom</Label><Input id="nom" value={editingManager.nom} onChange={handleEditInputChange} /></div>
                <div className="space-y-1"><Label htmlFor="prenom">Prénom</Label><Input id="prenom" value={editingManager.prenom} onChange={handleEditInputChange} /></div>
                <div className="space-y-1"><Label htmlFor="email">Email</Label><Input id="email" type="email" value={editingManager.email} onChange={handleEditInputChange} /></div>
                <div className="space-y-1"><Label htmlFor="telephone">Téléphone</Label><Input id="telephone" type="tel" value={editingManager.telephone || ''} onChange={handleEditInputChange} /></div>
            </div>
        )}
        <div className="flex justify-end gap-2 mt-6">
            <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Annuler</Button>
            <Button onClick={handleUpdateManager} className="bg-green-600 text-white hover:bg-green-700">Enregistrer les modifications</Button>
        </div>
      </Modal>
    </>
  )
}

export default ManagersPage;


# --- components/ui-admin/calendar.tsx ---
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui-admin/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "flex gap-4 flex-col md:flex-row relative",
          defaultClassNames.months
        ),
        month: cn("flex flex-col w-full gap-4", defaultClassNames.month),
        nav: cn(
          "flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn("absolute inset-0 opacity-0", defaultClassNames.dropdown),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none",
          defaultClassNames.weekday
        ),
        week: cn("flex w-full mt-2", defaultClassNames.week),
        week_number_header: cn(
          "select-none w-(--cell-size)",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-[0.8rem] select-none text-muted-foreground",
          defaultClassNames.week_number
        ),
        day: cn(
          "relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none",
          defaultClassNames.day
        ),
        range_start: cn(
          "rounded-l-md bg-accent",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("rounded-r-md bg-accent", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }



# --- components/ui-admin/dropdown-menu.tsx ---
// src/components/ui/dropdown-menu.tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-[#EFEDED] bg-white p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# --- pages/admin/immeubles/ImmeublesPage.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/ImmeublesPage.tsx

import { useState, useMemo, useEffect } from "react";
import type { Immeuble } from "./columns";
import { createColumns } from "./columns";
import type { Zone } from '../zones/columns';
import { DataTable } from "@/components/data-table/DataTable";
import { ImmeublesMap } from './ImmeublesMap';
import type { RowSelectionState } from "@tanstack/react-table";
import { ViewToggleContainer } from "@/components/ui-admin/ViewToggleContainer";
import { immeubleService } from "@/services/immeuble.service";
import { zoneService } from "@/services/zone.service";
import { Skeleton } from "@/components/ui-admin/skeleton";

const ImmeublesPage = () => {
    const [view, setView] = useState<'table' | 'map'>('table');
    const [immeubles, setImmeubles] = useState<Immeuble[]>([]);
    const [zones, setZones] = useState<Zone[]>([]);
    const [loading, setLoading] = useState(true);
    const [immeubleToFocusId, setImmeubleToFocusId] = useState<string | null>(null);
    const [zoneToFocusId, setZoneToFocusId] = useState<string | null>(null);
    const [isDeleteMode, setIsDeleteMode] = useState(false);
    const [rowSelection, setRowSelection] = useState<RowSelectionState>({});

    useEffect(() => {
        fetchData();
    }, []);

    const fetchData = async () => {
        setLoading(true);
        try {
            const [immeublesFromApi, zonesFromApi] = await Promise.all([
                immeubleService.getImmeubles(),
                zoneService.getZones()
            ]);
            
            const formattedImmeubles: Immeuble[] = immeublesFromApi.map(imm => {
                let statusText: Immeuble['status'] = 'À visiter';
                switch(imm.status) {
                    case 'VISITE': statusText = 'Visité'; break;
                    case 'RDV_PRIS': statusText = 'RDV Pris'; break;
                    case 'INACCESSIBLE': statusText = 'Inaccessible'; break;
                }
                
                const prospecteurs = Array.isArray(imm.prospectors) ? imm.prospectors : [];
                const portes = Array.isArray(imm.portes) ? imm.portes : [];
                const historiques = Array.isArray(imm.historiques) ? imm.historiques : [];
                
                return {
                    id: imm.id,
                    adresse: imm.adresse,
                    ville: imm.ville,
                    codePostal: imm.codePostal,
                    status: statusText,
                    nbPortes: portes.length,
                    nbPortesProspectees: historiques.reduce((acc: number, h: { nbPortesVisitees: number }) => acc + h.nbPortesVisitees, 0),
                    prospectingMode: prospecteurs.length > 1 ? "Duo" : "Solo",
                    prospectors: prospecteurs.map((p: { id: string; prenom: string; nom: string; }) => ({
                        id: p.id,
                        nom: `${p.prenom || ''} ${p.nom || ''}`.trim(),
                        avatarFallback: `${p.prenom?.[0] || ''}${p.nom?.[0] || ''}`.toUpperCase()
                    })),
                    dateVisite: historiques.length > 0 ? historiques[0].dateProspection : null,
                    zone: imm.zone?.nom || 'N/A',
                    zoneId: imm.zone?.id || '',
                    latlng: [imm.latitude, imm.longitude],
                };
            });
            
            const formattedZones: Zone[] = zonesFromApi.map(z => ({
                id: z.id, name: z.nom, assignedTo: 'N/A',
                color: z.couleur || 'grey', latlng: [z.latitude, z.longitude],
                radius: z.rayonMetres, dateCreation: z.createdAt,
            }));

            setImmeubles(formattedImmeubles);
            setZones(formattedZones);

        } catch (error) {
            console.error("Erreur de chargement des données:", error);
        } finally {
            setLoading(false);
        }
    };

    const handleSelectAndFocusImmeuble = (immeuble: Immeuble) => {
        setImmeubleToFocusId(immeuble.id);
        setZoneToFocusId(null);
        setView('map');
    };

    const handleSelectAndFocusZone = (zoneId: string) => {
        setZoneToFocusId(zoneId);
        setImmeubleToFocusId(null);
        setView('map');
    };
    
    const handleClearFocus = () => {
        setImmeubleToFocusId(null);
        setZoneToFocusId(null);
    };

    const toggleDeleteMode = () => {
        setIsDeleteMode(prev => !prev);
        setRowSelection({});
    };

    const handleConfirmDelete = async (selectedItems: Immeuble[]) => {
        try {
            await Promise.all(selectedItems.map(imm => immeubleService.deleteImmeuble(imm.id)));
            fetchData();
        } catch (error) {
            console.error("Erreur lors de la suppression:", error);
        }
        setIsDeleteMode(false);
        setRowSelection({});
    };

    const columns = useMemo(() => createColumns(isDeleteMode, handleSelectAndFocusImmeuble, handleSelectAndFocusZone), [isDeleteMode]);

    if (loading) {
        return (
            <div className="p-4 sm:p-6 lg:p-8 space-y-6">
                <div className="flex justify-between items-center">
                    <Skeleton className="h-10 w-1/3" />
                    <Skeleton className="h-10 w-32" />
                </div>
                <Skeleton className="h-96 w-full" />
            </div>
        )
    }

    const tableComponent = (
        <DataTable
            noCardWrapper
            columns={columns}
            data={immeubles}
            title=""
            filterColumnId="adresse"
            filterPlaceholder="Filtrer par adresse..."
            addEntityButtonText=""
            onAddEntity={() => {}}
            isDeleteMode={isDeleteMode}
            onToggleDeleteMode={toggleDeleteMode}
            rowSelection={rowSelection}
            setRowSelection={setRowSelection}
            onConfirmDelete={handleConfirmDelete}
            onRowClick={handleSelectAndFocusImmeuble}
        />
    );
    
    const mapComponent = (
        <ImmeublesMap 
            zones={zones} 
            immeubles={immeubles} 
            immeubleToFocusId={immeubleToFocusId}
            zoneToFocusId={zoneToFocusId}
            onFocusClear={handleClearFocus}
        />
    );

    return (
        <ViewToggleContainer
            title="Gestion des Immeubles"
            description="Basculez entre la vue tableau et la vue carte. Cliquez sur une adresse ou une zone pour la localiser."
            view={view}
            onViewChange={setView}
            tableComponent={tableComponent}
            mapComponent={mapComponent}
        />
    );
};

export default ImmeublesPage;


# --- pages/admin/commerciaux/commerciaux-table/columns.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/commerciaux-table/columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Link } from "react-router-dom"
import { ArrowUpDown, Mail, Eye, Edit } from "lucide-react"
import { Button } from "@/components/ui-admin/button"
import { Badge } from "@/components/ui-admin/badge"
import { Checkbox } from "@/components/ui-admin/checkbox"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"

export type Commercial = {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  manager: string;
  managerId: string;
  equipe: string;
  equipeId?: string;
  classement: number;
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

const SortableHeader = ({ title, column }: { title: string, column: any }) => (
  <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === "asc")} className="p-0 h-8 hover:bg-transparent">
    <Header title={title} />
    <ArrowUpDown className="ml-2 h-3 w-3" />
  </Button>
)

export const createColumns = (isDeleteMode: boolean, onEdit: (commercial: Commercial) => void, managerIdForBack?: string): ColumnDef<Commercial>[] => {
  const columns: ColumnDef<Commercial>[] = [
    // --- Colonne de sélection ---
    ...(isDeleteMode ? [{
      id: "select",
      header: ({ table }: { table: any }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      cell: ({ row }: { row: any }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    }] : []),

    // --- Colonnes de données ---
    {
      accessorKey: "nom",
      header: ({ column }) => <SortableHeader title="Nom" column={column} />,
      cell: ({ row }) => <div className="font-medium text-foreground">{row.getValue("nom")}</div>,
    },
    {
      accessorKey: "prenom",
      header: () => <Header title="Prénom" />,
    },
    {
      accessorKey: "email",
      header: () => <Header title="Email" />,
      cell: ({ row }) => (
        <a href={`mailto:${row.getValue("email")}`} className="flex items-center gap-2 hover:underline">
          <Mail className="h-4 w-4 text-muted-foreground" />
          {row.getValue("email")}
        </a>
      )
    },
    {
      accessorKey: "manager",
      header: () => <Header title="Manager" />,
      cell: ({ row }) => {
        const managerName = row.original.manager;
        const managerId = row.original.managerId;
        return (
            <Link 
                to={`/admin/managers/${managerId}`} 
                className="hover:underline hover:text-primary transition-colors"
                onClick={(e) => e.stopPropagation()}
            >
                {managerName}
            </Link>
        )
      },
    },
    {
      accessorKey: "equipe",
      header: () => <Header title="Équipe" />,
    },
    {
      accessorKey: "classement",
      header: ({ column }) => <div className="flex justify-center"><SortableHeader title="Classement" column={column} /></div>,
      meta: { className: "text-center" },
      cell: ({ row }) => {
        const classement = row.getValue("classement") as number;
        // CORRECTION: Rétablissement des couleurs des badges
        let badgeClass = "";
        if (classement === 1) badgeClass = "bg-yellow-100 text-yellow-800 border-yellow-300 hover:bg-yellow-200/80";
        else if (classement === 2) badgeClass = "bg-slate-200 text-slate-800 border-slate-300 hover:bg-slate-300/80";
        else if (classement === 3) badgeClass = "bg-orange-200 text-orange-800 border-orange-300 hover:bg-orange-300/80";
        else badgeClass = "bg-gray-100 text-gray-800 border-gray-300";
        
        return (
          <div className="flex justify-center">
            <Badge variant="outline" className={badgeClass}>{classement}</Badge>
          </div>
        );
      },
    },

    // --- Colonne d'Actions (améliorée) ---
    {
        id: "actions",
        header: () => <div className="text-right"><Header title="Actions" /></div>,
        cell: ({ row }) => {
            const commercial = row.original;
            return (
                // CORRECTION: Utilisation d'un TooltipProvider et ajout d'espace
                <TooltipProvider delayDuration={100}>
                    <div className="text-right space-x-2">
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button asChild variant="ghost" className="h-8 w-8 p-0">
                                    <Link to={`/admin/commerciaux/${commercial.id}`} state={{ fromManager: managerIdForBack }} onClick={(e) => { e.stopPropagation(); }}>
                                        <Eye className="h-4 w-4" />
                                        <span className="sr-only">Voir les détails</span>
                                    </Link>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Voir les détails</p></TooltipContent>
                        </Tooltip>

                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" className="h-8 w-8 p-0" onClick={(e) => { e.stopPropagation(); onEdit(commercial); }}>
                                    <Edit className="h-4 w-4" />
                                    <span className="sr-only">Modifier</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>Modifier</p></TooltipContent>
                        </Tooltip>
                    </div>
                </TooltipProvider>
            )
        },
    },
  ]
  
  return columns;
}


# --- pages/admin/immeubles/ImmeublesMap.tsx ---
// frontend-shadcn/src/pages/admin/immeubles/ImmeublesMap.tsx
import { useEffect, useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { MapContainer, TileLayer, Circle, Popup, Marker, FeatureGroup } from 'react-leaflet';
import type { Map as LeafletMap, FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { Button } from '@/components/ui-admin/button';
import { type Immeuble } from './columns';
import { type Zone } from '../zones/columns';
import { Eye } from 'lucide-react';

// --- (Icon setup and Leaflet patch) ---
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});
const buildingIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#09090B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-building-2"><path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"/><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"/><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"/><path d="M10 6h4"/><path d="M10 10h4"/><path d="M10 14h4"/><path d="M10 18h4"/></svg>'),
    iconSize: [28, 28],
    iconAnchor: [14, 28],
    popupAnchor: [0, -28]
});
const focusIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="hsl(142.1 76.2% 44.1%)" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [36, 36],
    iconAnchor: [18, 36],
    popupAnchor: [0, -36],
});

interface ImmeublesMapProps {
  zones: Zone[];
  immeubles: Immeuble[];
  immeubleToFocusId: string | null;
  zoneToFocusId: string | null;
  onFocusClear: () => void;
}

export const ImmeublesMap = (props: ImmeublesMapProps) => {
    const { zones, immeubles, immeubleToFocusId, zoneToFocusId, onFocusClear } = props;
    const navigate = useNavigate();
    const [map, setMap] = useState<LeafletMap | null>(null);
    const featureGroupRef = useRef<FeatureGroupType>(null);
    const [selectedImmeuble, setSelectedImmeuble] = useState<Immeuble | null>(null);

    useEffect(() => {
        if (!map) return;

        if (immeubleToFocusId) {
            const immeuble = immeubles.find(i => i.id === immeubleToFocusId);
            if (immeuble) {
                setSelectedImmeuble(immeuble);
                map.flyTo(immeuble.latlng, 17, { animate: true, duration: 1.5 });
            }
            onFocusClear();
        } 
        else if (zoneToFocusId) {
            const zone = zones.find(z => z.id === zoneToFocusId);
            if (zone) {
                setSelectedImmeuble(null);
                map.flyTo(zone.latlng, 14, { animate: true, duration: 1.5 });
            }
            onFocusClear();
        }
    }, [immeubleToFocusId, zoneToFocusId, map, onFocusClear, immeubles, zones]);

    useEffect(() => {
        if (map && featureGroupRef.current) {
            const timer = setTimeout(() => {
                if (featureGroupRef.current && featureGroupRef.current.getLayers().length > 0) {
                     const bounds = featureGroupRef.current.getBounds();
                     if(bounds.isValid()) {
                        map.fitBounds(bounds, { padding: [50, 50], maxZoom: 16 });
                     }
                } else if (zones.length === 0 && immeubles.length === 0) {
                     map.setView([48.8566, 2.3522], 12);
                }
            }, 100);

            return () => clearTimeout(timer);
        }
    }, [map, zones, immeubles]);

    return (
        <div className="h-[70vh] w-full rounded-lg overflow-hidden">
            <MapContainer ref={setMap} center={[48.8566, 2.3522]} zoom={12} style={{ height: '100%', width: '100%' }}>
                <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' />
                
                <FeatureGroup ref={featureGroupRef}>
                    {zones.map(zone => (
                        <Circle key={zone.id} center={zone.latlng} radius={zone.radius} pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.1, weight: 2 }}>
                             <Popup><b>Zone:</b> {zone.name}<br/><b>Assignée à:</b> {zone.assignedTo}</Popup>
                        </Circle>
                    ))}
                    {immeubles.map(immeuble => (
                        <Marker key={immeuble.id} position={immeuble.latlng} icon={buildingIcon}>
                            <Popup>
                                <div className="space-y-2">
                                    <p className="font-bold">{immeuble.adresse}</p>
                                    <p className="text-sm text-muted-foreground">{immeuble.codePostal} {immeuble.ville}</p>
                                    <Button size="sm" className="bg-green-600 text-white hover:bg-green-700" onClick={() => navigate(`/admin/immeubles/${immeuble.id}`)}>
                                        <Eye className="mr-2 h-4 w-4" /> Voir les portes
                                    </Button>
                                </div>
                            </Popup>
                        </Marker>
                    ))}
                </FeatureGroup>

                {selectedImmeuble && (
                    <Marker position={selectedImmeuble.latlng} icon={focusIcon} zIndexOffset={1000}>
                        <Popup>
                            <p className="font-bold">Focus: {selectedImmeuble.adresse}</p>
                        </Popup>
                    </Marker>
                )}
            </MapContainer>
        </div>
    );
};


# --- index.css ---
/* src/index.css */
/* 
  1. NOUVELLES VARIABLES DE COULEUR "WINVEST CAPITAL"
*/
:root {
  /* Fonds et Cartes */
  --background: 255 100% 100%; /* #FFFFFF */
  --foreground: 240 10% 3.9%;   /* #0A0A0A (Presque noir pour le texte) */
  --card: 255 100% 100%;
  --card-foreground: 240 10% 3.9%;

  /* Couleurs primaires (Winvest Blue) */
  --primary: 216 70% 61%;         /* #4d86df (Bleu moyen) */
  --primary-foreground: 255 100% 100%; /* #FFFFFF (Texte sur les boutons primaires) */
  
  /* Couleurs secondaires */
  --secondary: 218 81% 83%;      /* #A5BDF1 (Bleu clair pastel) */
  --secondary-foreground: 221 100% 31%; /* #002D9F (Texte contrasté sur le secondaire) */

  /* Couleurs d'accentuation (pour les hovers, fonds subtils) */
  --accent: 0 0% 95%;           /* #F2F2F2 (Un gris très clair) */
  --accent-foreground: 240 10% 3.9%;
  
  /* Bordures et Inputs */
  --border: 0 0% 85.1%;          /* #d9d9d9 */
  --input: 0 0% 85.1%;

  /* Ring (focus) */
  --ring: 216 70% 61%;           /* #4d86df */

  /* NOUVELLES VARIABLES POUR LES ACCENTS ET DÉGRADÉS */
  --winvest-accent-purple: 259 92% 67%; /* Un violet pour les accents forts */
  --winvest-accent-cyan: 190 85% 60%;  /* Un cyan pour les dégradés */  /* Autres */

  
  --popover: 255 100% 100%;
  --popover-foreground: 240 10% 3.9%;
  --muted: 0 0% 95%;
  --muted-foreground: 240 3.8% 46.1%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  /* On définit les couleurs spécifiques mentionnées */
  --winvest-blue-clair: 218 81% 83%;    /* #A5BDF1 */
  --winvest-blue-moyen: 216 70% 61%;    /* #4d86df */
  --winvest-blue-nuit: 221 100% 31%;     /* #002D9F */
  --winvest-blue-profond: 201 77% 35%; /* #14659e */
  --winvest-grey: 0 0% 85.1%;          /* #d9d9d9 */
  --radius: 0.5rem;
}

/* On force le même thème en mode sombre pour la cohérence */
.dark {
  --background: 255 100% 100%;
  --foreground: 240 10% 3.9%;
  --card: 255 100% 100%;
  --card-foreground: 240 10% 3.9%;
  --primary: 216 70% 61%;
  --primary-foreground: 255 100% 100%;
  --secondary: 218 81% 83%;
  --secondary-foreground: 221 100% 31%;
  --accent: 0 0% 95%;
  --accent-foreground: 240 10% 3.9%;
  --border: 0 0% 85.1%;
  --input: 0 0% 85.1%;
  --ring: 216 70% 61%;
  --popover: 255 100% 100%;
  --popover-foreground: 240 10% 3.9%;
  --muted: 0 0% 95%;
  --muted-foreground: 240 3.8% 46.1%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;
}

@import "tailwindcss";

/* ... autres styles ... */

/* 
  =======================================================================
  PATCH DE DERNIER RECOURS POUR LES ÉLÉMENTS FLOTTANTS
  =======================================================================
*/

/* --- Patch pour le Dropdown Menu --- */
[data-radix-popper-content-wrapper] {
  z-index: 100 !important; /* S'assure qu'il est au-dessus de tout */
  background-color: white !important;
  border: 1px solid #EFEDED !important;
  border-radius: 0.5rem !important;
}
[data-radix-popper-content-wrapper] [role="menuitem"]:focus {
  background-color: #f4f4f5 !important;
}
/* etc. pour les autres styles du dropdown... */


/* --- Patch pour le Dialog (Modale / Popup) --- */

/* 1. Le voile d'arrière-plan */
[data-radix-dialog-overlay] {
  background-color: hsl(0 0% 0% / 0.8) !important;
  z-index: 99 !important; /* Un z-index élevé */
}

/* 2. Le contenu de la modale */
[data-radix-dialog-content-wrapper] {
  z-index: 100 !important; /* z-index PLUS ÉLEVÉ que l'overlay */
  background-color: white !important;
  border-radius: 0.5rem !important;
}

/* 3. On s'assure que le texte est lisible (au cas où il hériterait d'une couleur blanche) */
[data-radix-dialog-content-wrapper] *,
[data-radix-dialog-content-wrapper] {
  color: #09090B !important;
}

/* --- Dialog (Modale / Popup) --- */
[data-slot="dialog-overlay"] {
  z-index: 1998 !important; /* Overlay juste en dessous du contenu */
}
[data-slot="dialog-content"] {
  z-index: 1999 !important; /* Contenu de la modale au-dessus de son overlay */
}

/* --- Créateur de Zone (qui est en plein écran) --- */
[data-slot="zone-creator"] {
  z-index: 1500 !important;
}


/* ... (tout votre CSS existant) ... */

/* ======================================================= */
/*   Amélioration du style pour Leaflet GeoSearch          */
/* ======================================================= */

/* Conteneur principal de la barre de recherche */
.geosearch.bar .search-form {
  background-color: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: 0.5rem; /* Corresponds à rounded-md */
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  transition: all 150ms ease-in-out;
}

.geosearch.bar .search-form:hover {
  border-color: hsl(var(--ring));
}

/* Le champ de saisie */
.geosearch.bar .search-input {
  background-color: transparent;
  border: none;
  color: hsl(var(--foreground));
  outline: none;
}

/* Le bouton de recherche (icône loupe) */
.geosearch.bar .search-btn {
  border: none;
  border-radius: 0.375rem; /* rounded-md */
  color: hsl(var(--muted-foreground));
}
.geosearch.bar .search-btn:hover {
    background-color: hsl(var(--accent));
    color: hsl(var(--accent-foreground));
}

/* Conteneur des résultats */
.geosearch .results {
  background-color: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
}

/* Un résultat individuel */
.geosearch .results > * {
  border-bottom: 1px solid hsl(var(--border));
  color: hsl(var(--muted-foreground));
  padding-left: 1rem;
  padding-right: 1rem;
}
.geosearch .results > *:last-child {
  border-bottom: none;
}
.geosearch .results > *.active,
.geosearch .results > *:hover {
  background-color: hsl(var(--accent));
  color: hsl(var(--accent-foreground));
}



# --- App.tsx ---
// src/App.tsx
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';

// --- Logique de Routage ---
import PrivateRoute from './routes/PrivateRoute';
import RoleBasedRedirect from './routes/RoleBasedRedirect';

// --- Layouts et Pages Publiques ---
import AdminLayout from './layout/AdminLayout';
import CommercialLayout from './layout/CommercialLayout';
import Login from './pages/auth/Login';

// --- Pages Admin ---
import DashboardAdmin from './pages/admin/Dashboard/DashboardAdmin';
import ManagersPage from './pages/admin/Managers/ManagersPage';
import ManagerDetailsPage from './pages/admin/Managers/ManagerDetailsPage';
import CommerciauxPage from './pages/admin/commerciaux/CommerciauxPage';
import CommercialDetailsPage from './pages/admin/commerciaux/CommercialDetailsPage';
import EquipesPage from './pages/admin/Equipes/EquipesPage'; 
import EquipeDetailsPage from './pages/admin/Equipes/EquipeDetailsPage';
import StatistiquesPage from './pages/admin/statitistiques/StatistiquesPage';
import ZonesPage from './pages/admin/zones/ZonesPage';
import ZoneDetailsPage from './pages/admin/zones/ZoneDetailsPage'; 
import ImmeublesPage from './pages/admin/immeubles/ImmeublesPage';
import ImmeubleDetailsPage from './pages/admin/immeubles/portes/ImmeubleDetailsPage';
import SuiviPage from './pages/admin/suivi/SuiviPage';
import AssignmentGoalsPage from './pages/admin/assignment-goals/AssignmentGoalsPage';

// --- Pages Commercial ---
import CommercialDashboardPage from './pages/commercial/DashboardCommercial';
import SelectBuildingPage from './pages/commercial/SelectBuildingPage';
import ProspectingSetupPage from './pages/commercial/ProspectingSetupPage'; // <-- On importe le vrai composant
import ProspectingDoorsPage from './pages/commercial/ProspectingDoorsPage';

// On crée des composants temporaires pour les routes non encore développées
const CommercialHistory = () => <div className="p-8"><h1 className="text-3xl font-bold">Historique de Prospection</h1></div>;
const CommercialStats = () => <div className="p-8"><h1 className="text-3xl font-bold">Mes Statistiques</h1></div>;
const CommercialProfile = () => <div className="p-8"><h1 className="text-3xl font-bold">Mon Profil</h1></div>;

// --- Pages des autres Rôles (pour l'exemple) ---
import DashboardManager from './pages/manager/DashboardManager';
import DashboardDirecteur from './pages/directeur/DashboardDirecteur';
import DashboardBackoffice from './pages/backoffice/DashboardBackoffice';

import { Toaster } from "sonner";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        {/* --- Route Publique --- */}
        <Route path="/login" element={<Login />} />

        {/* --- Routes Privées Protégées --- */}
        <Route element={<PrivateRoute />}>
          
          <Route path="/" element={<RoleBasedRedirect />} />
          
          {/* --- Layout pour les administrateurs --- */}
          <Route path="/admin" element={<AdminLayout />}>
            <Route index element={<DashboardAdmin />} />
            <Route path="managers" element={<ManagersPage />} />
            <Route path="managers/:managerId" element={<ManagerDetailsPage />} />
            <Route path="equipes" element={<EquipesPage />} /> 
            <Route path="equipes/:equipeId" element={<EquipeDetailsPage />} />
            <Route path="commerciaux" element={<CommerciauxPage />} />
            <Route path="commerciaux/:id" element={<CommercialDetailsPage />} />
            <Route path="statistiques" element={<StatistiquesPage />} />
            <Route path="zones" element={<ZonesPage />} /> 
            <Route path="zones/:zoneId" element={<ZoneDetailsPage />} /> 
            <Route path="immeubles" element={<ImmeublesPage />} />
            <Route path="immeubles/:immeubleId" element={<ImmeubleDetailsPage />} />
            <Route path="suivi" element={<SuiviPage />} />
            <Route path="assignations-objectifs" element={<AssignmentGoalsPage />} />
          </Route>

          {/* --- Layout pour les commerciaux --- */}
          <Route path="/commercial" element={<CommercialLayout />}>
            <Route index element={<Navigate to="/commercial/dashboard" replace />} /> 
            
            <Route path="dashboard" element={<CommercialDashboardPage />} /> 
            
            {/* Flow de prospection */}
            <Route path="prospecting" element={<SelectBuildingPage />} />
            <Route path="prospecting/setup/:buildingId" element={<ProspectingSetupPage />} />
            <Route path="prospecting/doors/:buildingId" element={<ProspectingDoorsPage />} />

            {/* Autres pages du commercial */}
            <Route path="history" element={<CommercialHistory />} />
            <Route path="stats" element={<CommercialStats />} />
            <Route path="profile" element={<CommercialProfile />} />
          </Route>
            
          {/* Routes pour les autres rôles */}
          <Route path="/manager" element={<DashboardManager />} />
          <Route path="/directeur" element={<DashboardDirecteur />} />
          <Route path="/backoffice" element={<DashboardBackoffice />} />

        </Route>

        <Route path="*" element={<div>Page non trouvée</div>} />
      </Routes>
      <Toaster richColors position="top-right" />
    </BrowserRouter>
  );
}

export default App;


# --- pages/commercial/ProspectingSetupPage.tsx ---
// src/pages/commercial/ProspectingSetupPage.tsx
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Label } from '@/components/ui-admin/label';
import { User, Users, ArrowRight, Send } from 'lucide-react';
import { cn } from '@/lib/utils';

type ProspectingMode = 'solo' | 'duo';

const ProspectingSetupPage = () => {
    const { buildingId } = useParams<{ buildingId: string }>();
    const navigate = useNavigate();
    const [mode, setMode] = useState<ProspectingMode | null>(null);
    const [duoEmail, setDuoEmail] = useState('');

    console.log(`ProspectingSetupPage loaded with buildingId: ${buildingId}`);

    const handleStartSolo = () => {
        console.log(`Navigating from ProspectingSetupPage with ID: ${buildingId}`);
        console.log(`Démarrage en SOLO pour l'immeuble ${buildingId}`);
        navigate(`/commercial/prospecting/doors/${buildingId}`);
    };

    const handleInviteDuo = () => {
        if (duoEmail) {
            console.log(`Invitation envoyée à ${duoEmail} pour l'immeuble ${buildingId}`);
            alert(`Invitation envoyée à ${duoEmail} !`);
        }
    };

    return (
        <div className="container mx-auto py-8">
            <Card className="max-w-2xl mx-auto">
                <CardHeader>
                    <CardTitle className="text-2xl flex items-center gap-3">
                        <Users className="h-6 w-6 text-primary"/>
                        Étape 2 : Mode de Prospection
                    </CardTitle>
                    <CardDescription>
                        Allez-vous prospecter seul ou en équipe aujourd'hui ?
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Card 
                            onClick={() => setMode('solo')}
                            className={cn(
                                "p-6 text-center cursor-pointer transition-all border-2",
                                mode === 'solo' ? 'border-primary shadow-lg scale-105' : 'hover:border-primary/50'
                            )}
                        >
                            <User className="mx-auto h-12 w-12 text-primary" />
                            <h3 className="mt-4 text-lg font-bold">Mode Solo</h3>
                            <p className="text-sm text-muted-foreground">Prospectez seul à votre rythme.</p>
                        </Card>
                        <Card 
                            onClick={() => setMode('duo')}
                            className={cn(
                                "p-6 text-center cursor-pointer transition-all border-2",
                                mode === 'duo' ? 'border-primary shadow-lg scale-105' : 'hover:border-primary/50'
                            )}
                        >
                            <Users className="mx-auto h-12 w-12 text-primary" />
                            <h3 className="mt-4 text-lg font-bold">Mode Duo</h3>
                            <p className="text-sm text-muted-foreground">Collaborez avec un coéquipier.</p>
                        </Card>
                    </div>

                    {mode === 'duo' && (
                        <div className="space-y-2 animate-in fade-in-0">
                            <Label htmlFor="duo-email">Email du coéquipier</Label>
                            <div className="flex gap-2">
                                <Input 
                                    id="duo-email" 
                                    type="email"
                                    placeholder="nom.prenom@winvest.capital"
                                    value={duoEmail}
                                    onChange={(e) => setDuoEmail(e.target.value)}
                                />
                                <Button 
                                    onClick={handleInviteDuo}
                                    disabled={!duoEmail}
                                    className="bg-green-600 text-white hover:bg-green-700"
                                >
                                    <Send className="mr-2 h-4 w-4" />
                                    Inviter
                                </Button>
                            </div>
                        </div>
                    )}
                </CardContent>

                {mode === 'solo' && (
                    <CardFooter className="flex justify-end">
                        <Button 
                            onClick={handleStartSolo}
                            className="bg-green-600 text-white hover:bg-green-700"
                        >
                            Commencer la prospection <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    </CardFooter>
                )}
            </Card>
        </div>
    );
};

export default ProspectingSetupPage;


# --- pages/commercial/SelectBuildingPage.tsx ---
// src/pages/commercial/SelectBuildingPage.tsx
import { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { DataTable } from '@/components/data-table/DataTable';
import type { ColumnDef, RowSelectionState } from '@tanstack/react-table';
import { Button } from '@/components/ui-admin/button';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui-admin/card';
import { ArrowRight, Building} from 'lucide-react';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';

// Type pour les données de la table
export type BuildingData = {
  id: string;
  adresse: string;
  ville: string;
  codePostal: string;
  nbPortes: number;
  dateAjout: Date;
};

// Données simulées pour les immeubles
const MOCK_BUILDINGS: BuildingData[] = [
  { id: 'imm-1', adresse: '10 Rue de la Paix', ville: 'Paris', codePostal: '75002', nbPortes: 25, dateAjout: new Date('2025-06-30') },
  { id: 'imm-2', adresse: '25 Bd des Capucines', ville: 'Paris', codePostal: '75009', nbPortes: 40, dateAjout: new Date('2025-06-28') },
  { id: 'imm-3', adresse: '15 Av. des Champs-Élysées', ville: 'Paris', codePostal: '75008', nbPortes: 60, dateAjout: new Date('2025-06-25') },
];

// Création des colonnes pour la DataTable
const createBuildingColumns = (setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>>): ColumnDef<BuildingData>[] => [
  {
    id: 'select',
    header: () => null,
    cell: ({ row }) => (
      <input
        type="radio"
        name="select-building"
        checked={row.getIsSelected()}
        onChange={() => setRowSelection({ [row.id]: true })}
        className="h-4 w-4 accent-primary"
      />
    ),
  },
  {
    accessorKey: 'adresse',
    header: 'Adresse',
    cell: ({ row }) => (
      <div>
        <div className="font-bold">{row.original.adresse}</div>
        <div className="text-sm text-muted-foreground">{`${row.original.codePostal} ${row.original.ville}`}</div>
      </div>
    ),
  },
  {
    accessorKey: 'nbPortes',
    header: () => <div className="text-center">Portes</div>,
    cell: ({ row }) => <div className="text-center">{row.original.nbPortes}</div>,
  },
  {
    accessorKey: 'dateAjout',
    header: () => <div className="text-right">Ajouté le</div>,
    cell: ({ row }) => (
      <div className="text-right text-muted-foreground">
        {format(row.original.dateAjout, "d MMM yyyy", { locale: fr })}
      </div>
    ),
  },
];

const SelectBuildingPage = () => {
    const navigate = useNavigate();
    const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
    
    const sortedBuildings = useMemo(() => 
        [...MOCK_BUILDINGS].sort((a, b) => b.dateAjout.getTime() - a.dateAjout.getTime()), 
        []
    );

    const columns = useMemo(() => createBuildingColumns(setRowSelection), []);

    const selectedBuildingId = Object.keys(rowSelection).length > 0 ? sortedBuildings[parseInt(Object.keys(rowSelection)[0])].id : undefined;

    const handleNext = () => {
        if (selectedBuildingId) {
            console.log(`Navigating from SelectBuildingPage with ID: ${selectedBuildingId}`);
            navigate(`/commercial/prospecting/setup/${selectedBuildingId}`);
        }
    };

    return (
        <div className="container mx-auto py-8">
            <Card className="max-w-4xl mx-auto">
                <CardHeader>
                    <CardTitle className="text-2xl flex items-center gap-3">
                        <Building className="h-6 w-6 text-primary"/>
                        Étape 1 : Sélection de l'immeuble
                    </CardTitle>
                    <CardDescription>
                        Choisissez l'immeuble que vous souhaitez prospecter. Les plus récents apparaissent en premier.
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <DataTable
                        title="Immeubles"
                        columns={columns}
                        data={sortedBuildings}
                        filterColumnId="adresse"
                        filterPlaceholder="Rechercher une adresse..."
                        rowSelection={rowSelection}
                        setRowSelection={setRowSelection}
                        isDeleteMode={false}
                        onAddEntity={() => {}}
                        onConfirmDelete={() => {}}
                        onToggleDeleteMode={() => {}}
                    />
                    <div className="flex justify-end mt-6">
                        <Button onClick={handleNext} disabled={!selectedBuildingId} className="bg-green-600 hover:bg-green-700 text-white">
                            Suivant <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
};

export default SelectBuildingPage;


# --- pages/admin/suivi/SuiviMap.tsx ---
// src/pages/admin/suivi/SuiviMap.tsx
import { useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Circle, Popup, FeatureGroup, Marker } from 'react-leaflet';
import type { Map as LeafletMap, FeatureGroup as FeatureGroupType } from 'leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { type Zone, type Commercial } from './types';

// --- Configuration des icônes ---

// Patch pour l'icône par défaut de Leaflet
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

// NOUVEAU : Icône personnalisée pour un commercial non sélectionné
const defaultIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(222.2 47.4% 11.2%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
});

// NOUVEAU : Icône personnalisée pour le commercial sélectionné (plus grosse et colorée)
const selectedIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="hsl(142.1 76.2% 44.1%)" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>'),
    iconSize: [40, 40],
    iconAnchor: [20, 40],
    popupAnchor: [0, -40],
});


// --- MODIFICATION des Props ---
interface SuiviMapProps {
  zones: Zone[];
  commercials: Commercial[];
  onMarkerClick: (commercial: Commercial) => void; // Callback pour informer le parent
  selectedCommercialId?: string; // ID du commercial sélectionné pour le style
}

export const SuiviMap = ({ zones, commercials, onMarkerClick, selectedCommercialId }: SuiviMapProps) => {
  const mapRef = useRef<LeafletMap | null>(null);
  const featureGroupRef = useRef<FeatureGroupType>(null);

  useEffect(() => {
    // Centre la carte sur tous les éléments au chargement
    if (mapRef.current && featureGroupRef.current) {
        const bounds = featureGroupRef.current.getBounds();
        if (bounds.isValid()) {
            mapRef.current.fitBounds(bounds, { padding: [50, 50] });
        }
    }
  }, [zones, commercials]);

  return (
    <div className="h-full w-full rounded-lg overflow-hidden shadow-md">
      <MapContainer 
        ref={mapRef} 
        center={[48.8566, 2.3522]} 
        zoom={12} 
        style={{ height: '100%', width: '100%' }}
      >
        <TileLayer 
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" 
          attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' 
        />
        <FeatureGroup ref={featureGroupRef}>
          {/* Affichage des zones */}
          {zones.map(zone => (
            <Circle 
              key={zone.id} 
              center={zone.latlng} 
              radius={zone.radius}
              pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2 }}
            >
              <Popup><b>Zone:</b> {zone.name}</Popup>
            </Circle>
          ))}
          {/* NOUVEAU : Affichage des commerciaux */}
          {commercials.map(commercial => (
            <Marker
              key={commercial.id}
              position={commercial.position}
              icon={selectedCommercialId === commercial.id ? selectedIcon : defaultIcon}
              eventHandlers={{
                click: () => {
                  onMarkerClick(commercial); // Appel du callback au clic
                },
              }}
              zIndexOffset={selectedCommercialId === commercial.id ? 1000 : 0} // Met le marqueur sélectionné au-dessus
            >
              <Popup><b>{commercial.name}</b><br/>Équipe {commercial.equipe}</Popup>
            </Marker>
          ))}
        </FeatureGroup>
      </MapContainer>
    </div>
  );
};


# --- pages/admin/Equipes/EquipeDetailsPage.tsx ---
// frontend-shadcn/src/pages/admin/Equipes/EquipeDetailsPage.tsx

import { useEffect, useState, useMemo } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { createColumns as createCommerciauxColumns } from "../commerciaux/commerciaux-table/columns";
import { DataTable } from "@/components/data-table/DataTable";
import { Button } from "@/components/ui-admin/button";
import { ArrowLeft, Users, CheckCircle, Briefcase, Target, Trophy } from "lucide-react";
import { Skeleton } from "@/components/ui-admin/skeleton";
import StatCard from "@/components/ui-admin/StatCard";
import { GenericLineChart } from "@/components/charts/GenericLineChart";
import { equipeService, type EquipeDetailsFromApi } from "@/services/equipe.service";

const EquipeDetailsPage = () => {
  const { equipeId } = useParams<{ equipeId: string }>();
  const navigate = useNavigate();
  const [equipeDetails, setEquipeDetails] = useState<EquipeDetailsFromApi | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (equipeId) {
      setLoading(true);
      equipeService.getEquipeDetails(equipeId)
        .then(data => {
          setEquipeDetails(data);
        })
        .catch(error => {
          console.error("Erreur lors de la récupération des détails de l'équipe:", error);
          setEquipeDetails(null); // Reset in case of error
        })
        .finally(() => {
          setLoading(false);
        });
    }
  }, [equipeId]);

  const commerciauxColumns = useMemo(() => {
    const allCols = createCommerciauxColumns(false, () => {}); // Pas de mode suppression
    // On exclut les colonnes 'manager' et 'equipe' car redondantes ici
    return allCols.filter(col => col.id !== 'manager' && col.id !== 'equipe');
  }, []);

  if (loading) {
    return (
        <div className="space-y-6 animate-pulse">
            <Skeleton className="h-10 w-48" />
            <Skeleton className="h-24 w-full" />
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                {[...Array(4)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}
            </div>
            <Skeleton className="h-96 w-full" />
            <Skeleton className="h-96 w-full" />
        </div>
    )
  }

  if (!equipeDetails) {
    return <div>Équipe non trouvée ou erreur de chargement.</div>;
  }

  return (
    <div className="space-y-8">
      <Button variant="outline" onClick={() => navigate(-1)}>
        <ArrowLeft className="mr-2 h-4 w-4" />
        Retour à la liste des équipes
      </Button>

      <div className="space-y-2">
        <h1 className="text-3xl font-bold flex items-center gap-3">
            <Users className="h-8 w-8 text-primary" />
            Équipe {equipeDetails.nom}
        </h1>
        <p className="text-muted-foreground">Manager : {equipeDetails.manager}</p>
      </div>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard title="Contrats Signés" value={equipeDetails.stats.contratsSignes} Icon={CheckCircle} color="text-emerald-500" />
        <StatCard title="RDV Pris" value={equipeDetails.stats.rdvPris} Icon={Briefcase} color="text-sky-500"/>
        <StatCard title="Performance Moyenne" value={equipeDetails.stats.perfMoyenne} Icon={Target} suffix="%" color="text-amber-500"/>
        <StatCard title="Classement Général" value={Number(equipeDetails.stats.classementGeneral)} Icon={Trophy} prefix="#" color="text-yellow-500"/>
      </div>

      <GenericLineChart
        title="Évolution de la Performance de l'Équipe"
        data={equipeDetails.perfHistory}
        xAxisDataKey="name"
        lines={[{ dataKey: 'perf', stroke: 'hsl(var(--chart-2))', name: 'Performance (%)' }]}
      />

      <DataTable 
        columns={commerciauxColumns as any} 
        data={equipeDetails.commerciaux} 
        title={`Membres de l'équipe (${equipeDetails.commerciaux.length})`}
        filterColumnId="nom"
        filterPlaceholder="Filtrer par nom de commercial..."
        isDeleteMode={false}
        onToggleDeleteMode={() => {}}
        rowSelection={{}}
        setRowSelection={() => {}}
        onConfirmDelete={() => {}}
      />
    </div>
  )
}

export default EquipeDetailsPage;


# --- components/ui-admin/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        onPointerDownOutside={(e) => {
          const target = e.target as HTMLElement;
          if (target.closest('[data-radix-select-content]')) {
            e.preventDefault();
          }
        }}
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



# --- components/ui-admin/alert-dialog.tsx ---
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui-admin/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



# --- pages/admin/zones/ZoneDetailsPage.tsx ---
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { zoneService, type ZoneDetailsFromApi } from '@/services/zone.service';
import { Button } from '@/components/ui-admin/button';
import { ArrowLeft, MapPin, Building, CheckCircle, Briefcase } from 'lucide-react';
import { Skeleton } from '@/components/ui-admin/skeleton';
import StatCard from '@/components/ui-admin/StatCard';
import { ZoneMap } from './ZoneMap'; // Assurez-vous que ce composant peut être réutilisé ou adapté
import type { Zone as ZoneTableType } from './columns';

const ZoneDetailsPage = () => {
  const { zoneId } = useParams<{ zoneId: string }>();
  const navigate = useNavigate();
  const [zoneDetails, setZoneDetails] = useState<ZoneDetailsFromApi | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (zoneId) {
      setLoading(true);
      zoneService.getZoneDetails(zoneId)
        .then(data => {
          setZoneDetails(data);
        })
        .catch(error => {
          console.error('Erreur lors de la récupération des détails de la zone:', error);
          setZoneDetails(null);
        })
        .finally(() => {
          setLoading(false);
        });
    }
  }, [zoneId]);

  if (loading) {
    return (
      <div className="space-y-6 animate-pulse">
        <Skeleton className="h-10 w-48" />
        <Skeleton className="h-24 w-full" />
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[...Array(3)].map((_, i) => <Skeleton key={i} className="h-28 rounded-lg" />)}
        </div>
        <Skeleton className="h-96 w-full" />
      </div>
    );
  }

  if (!zoneDetails) {
    return <div>Zone non trouvée ou erreur de chargement.</div>;
  }

  return (
    <div className="h-full flex flex-col space-y-8">
      <Button variant="outline" onClick={() => navigate(-1)}>
        <ArrowLeft className="mr-2 h-4 w-4" />
        Retour à la liste des zones
      </Button>

      <div className="space-y-2">
        <h1 className="text-3xl font-bold flex items-center gap-3">
          <MapPin className="h-8 w-8 text-primary" />
          Zone: {zoneDetails.nom}
        </h1>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <StatCard title="Nombre d'immeubles" value={zoneDetails.stats.nbImmeubles} Icon={Building} color="text-blue-500" />
        <StatCard title="Contrats Signés" value={zoneDetails.stats.totalContratsSignes} Icon={CheckCircle} color="text-emerald-500" />
        <StatCard title="RDV Pris" value={zoneDetails.stats.totalRdvPris} Icon={Briefcase} color="text-sky-500" />
      </div>

      <div className="flex-grow flex flex-col">
        <h2 className="text-2xl font-bold mb-4">Carte de la Zone</h2>
        <div className="flex-grow w-full">
          <ZoneMap
            existingZones={[{
              id: zoneDetails.id,
              name: zoneDetails.nom,
              assignedTo: '', // L'assignation n'est pas nécessaire ici
              color: zoneDetails.couleur,
              latlng: [zoneDetails.latitude, zoneDetails.longitude],
              radius: zoneDetails.rayonMetres,
              dateCreation: zoneDetails.createdAt,
            } as ZoneTableType]}
            immeubles={zoneDetails.immeubles.map(imm => ({
              id: imm.id,
              adresse: imm.adresse,
              status: imm.status, // Le statut est déjà une chaîne de caractères
              latlng: [imm.latitude, imm.longitude],
            }))}
            zoneToFocus={zoneDetails.id}
          />
        </div>
      </div>
    </div>
  );
};

export default ZoneDetailsPage;



# --- components/ui-admin/ustomDatePicker.tsx ---
// frontend-shadcn/src/pages/admin/commerciaux/CustomDatePicker.tsx 
// (Ou à l'intérieur de CommercialDetailsPage.tsx)
import React from 'react';
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { Calendar as CalendarIcon } from 'lucide-react';

import { Button } from '@/components/ui-admin/button';
import { Calendar } from "@/components/ui-admin/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui-admin/popover";

interface CustomDatePickerProps {
  onCancel: () => void;
  onValidate: (range: { from: Date; to: Date }) => void;
}

export const CustomDatePicker = ({ onCancel, onValidate }: CustomDatePickerProps) => {
    const [startDate, setStartDate] = React.useState<Date | undefined>();
    const [endDate, setEndDate] = React.useState<Date | undefined>();

    // Ferme le popover après sélection
    const handleStartDateSelect = (date?: Date) => {
        setStartDate(date);
    };

    const handleEndDateSelect = (date?: Date) => {
        setEndDate(date);
    };

    return (
        <div className="flex flex-wrap items-center gap-2 rounded-lg border p-2 bg-background shadow-sm">
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" className="w-[200px] font-normal justify-start text-left">
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {startDate ? format(startDate, 'd LLL y', { locale: fr }) : <span>Date de début</span>}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                    <Calendar
                        mode="single"
                        selected={startDate}
                        onSelect={handleStartDateSelect}
                        initialFocus
                        locale={fr}
                    />
                </PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" className="w-[200px] font-normal justify-start text-left">
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {endDate ? format(endDate, 'd LLL y', { locale: fr }) : <span>Date de fin</span>}
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                    <Calendar
                        mode="single"
                        selected={endDate}
                        onSelect={handleEndDateSelect}
                        initialFocus
                        locale={fr}
                    />
                </PopoverContent>
            </Popover>
            <Button 
                className="bg-green-600 hover:bg-green-700" 
                onClick={() => onValidate({ from: startDate!, to: endDate! })} 
                disabled={!startDate || !endDate}
            >
                Valider
            </Button>
            <Button variant="ghost" onClick={onCancel}>
                Annuler
            </Button>
        </div>
    );
};


# --- components/page-components/GoalSettingCard.tsx ---
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui-admin/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui-admin/select';
import { Button } from '@/components/ui-admin/button';
import { Input } from '@/components/ui-admin/input';
import { Target, Loader2 } from 'lucide-react';
import type { Commercial } from '@/types/types';

interface GoalSettingCardProps {
  commercials: Commercial[];
  onSetGoal: (commercialId: string, goal: number) => Promise<void>;
}

export const GoalSettingCard = ({ commercials, onSetGoal }: GoalSettingCardProps) => {
  const [commercialId, setCommercialId] = useState('');
  const [goal, setGoal] = useState<number | string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const isFormValid = commercialId && typeof goal === 'number' && goal > 0;

  const handleSubmit = async () => {
    if (!isFormValid) return;
    setIsSubmitting(true);
    await onSetGoal(commercialId, goal as number);
    setIsSubmitting(false);
  };
  
  return (
     <Card className="shadow-md hover:shadow-lg transition-shadow">
      <CardHeader>
        <CardTitle className="flex items-center text-green-600">
          <Target className="mr-3 h-6 w-6" /> Définir un Objectif
        </CardTitle>
        <CardDescription>Fixez l'objectif mensuel de contrats pour un commercial.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Sélecteur de Commercial */}
        <div className="space-y-2">
          <label className="text-sm font-medium">Commercial</label>
          <Select onValueChange={setCommercialId} value={commercialId}>
            <SelectTrigger><SelectValue placeholder="Sélectionner un commercial" /></SelectTrigger>
            <SelectContent>
              {commercials.map(c => <SelectItem key={c.id} value={c.id}>{c.prenom} {c.nom}</SelectItem>)}
            </SelectContent>
          </Select>
        </div>
        
        {/* Input de l'objectif */}
        <div className="space-y-2">
            <label htmlFor="monthly-goal" className="text-sm font-medium">Objectif (nombre de contrats)</label>
            <div className="relative">
                <Target className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                <Input 
                    id="monthly-goal" 
                    type="number" 
                    value={goal}
                    onChange={e => setGoal(e.target.value === '' ? '' : parseInt(e.target.value, 10))} 
                    min="1"
                    placeholder="Ex: 10" 
                    className="pl-10" 
                />
            </div>
        </div>

        <Button onClick={handleSubmit} disabled={!isFormValid || isSubmitting} className="w-full bg-green-600 hover:bg-green-700">
          {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Target className="mr-2 h-4 w-4" />}
          Définir l'Objectif
        </Button>
      </CardContent>
    </Card>
  );
}


# --- pages/admin/suivi/HistoryList.tsx ---
// src/pages/admin/suivi/HistoryList.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { ScrollArea } from '@/components/ui-admin/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { formatDistanceToNow } from 'date-fns';
import { fr } from 'date-fns/locale';
import type { Transcription } from './types';
import { ArchiveX } from 'lucide-react'; // Importer une icône pour l'état vide

interface HistoryListProps {
  transcriptions: Transcription[];
  onHistoryItemClick: (transcription: Transcription) => void;
  commercials: { [id: string]: { name: string; avatarFallback: string } };
}

export const HistoryList = ({ transcriptions, onHistoryItemClick, commercials }: HistoryListProps) => {
  return (
    <Card className="flex-1 flex flex-col h-full bg-white shadow-md">
      <CardHeader>
        <CardTitle>Historique des transcriptions</CardTitle>
        <CardDescription>Derniers appels enregistrés pour ce commercial.</CardDescription>
      </CardHeader>
      <CardContent className="p-0 flex-1 overflow-hidden">
        <ScrollArea className="h-full">
          {transcriptions.length > 0 ? (
            <div className="space-y-0">
              {transcriptions.map((item) => (
                <div
                  key={item.id}
                  onClick={() => onHistoryItemClick(item)}
                  // AMÉLIORATION : Style de chaque item de la liste
                  className="flex items-start gap-4 p-4 border-b border-zinc-200 hover:bg-zinc-100 cursor-pointer transition-colors"
                >
                  <Avatar>
                    <AvatarFallback className="bg-zinc-200 text-zinc-700">
                      {commercials[item.commercialId]?.avatarFallback || '?'}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    <div className="flex justify-between items-center">
                      <p className="font-semibold">{item.commercialName}</p>
                      <p className="text-xs text-muted-foreground">
                        {formatDistanceToNow(item.date, { addSuffix: true, locale: fr })}
                      </p>
                    </div>
                    <p className="text-sm text-muted-foreground line-clamp-2 mt-1">
                      {item.snippet}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            // AMÉLIORATION : Gestion de l'état vide
            <div className="flex flex-col items-center justify-center h-full text-muted-foreground text-center p-8">
                <ArchiveX className="h-12 w-12 mb-4" />
                <p className="font-semibold">Aucun historique</p>
                <p className="text-sm">Aucun appel n'a été enregistré pour ce commercial.</p>
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
};


# --- pages/auth/CommercialSelectionPage.tsx ---
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { CommercialService } from '../../services/commercial.service';
import { Commercial } from '../../types/types';
import { Button } from '../../components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui-admin/card';
import { ScrollArea } from '../../components/ui-admin/scroll-area';

const CommercialSelectionPage: React.FC = () => {
  const [commerciaux, setCommerciaux] = useState<Commercial[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();
  const { loginCommercial } = useAuth();

  useEffect(() => {
    const fetchCommerciaux = async () => {
      try {
        const service = new CommercialService();
        const data = await service.getAllCommerciaux();
        setCommerciaux(data);
      } catch (err) {
        setError('Failed to fetch commercials.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchCommerciaux();
  }, []);

  const handleSelectCommercial = (commercial: Commercial) => {
    loginCommercial(commercial);
    navigate('/commercial/dashboard');
  };

  if (loading) {
    return <div className="flex justify-center items-center h-screen">Loading commercials...</div>;
  }

  if (error) {
    return <div className="flex justify-center items-center h-screen text-red-500">{error}</div>;
  }

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100 p-4">
      <Card className="w-full max-w-md shadow-lg">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">Select Your Commercial Profile</CardTitle>
          <CardDescription className="text-center text-gray-600">
            Choose a commercial to access their dashboard and specific data.
          </CardDescription>
        </CardHeader>
        <CardContent>
          {commerciaux.length === 0 ? (
            <p className="text-center text-gray-500">No commercial profiles available.</p>
          ) : (
            <ScrollArea className="h-72 w-full rounded-md border p-4">
              <div className="grid gap-4">
                {commerciaux.map((commercial) => (
                  <Button
                    key={commercial.id}
                    variant="outline"
                    className="w-full justify-start h-12 text-lg"
                    onClick={() => handleSelectCommercial(commercial)}
                  >
                    {commercial.name}
                  </Button>
                ))}
              </div>
            </ScrollArea>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default CommercialSelectionPage;



# --- pages/commercial/ZoneFocusMap.tsx ---
// src/pages/commercial/ZoneFocusMap.tsx
import { MapContainer, TileLayer, Circle, Marker, Popup } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

// Patch pour les icônes Leaflet
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});
const buildingIcon = new L.Icon({
    iconUrl: 'data:image/svg+xml;base64,' + btoa('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#09090B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-building-2"><path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"/><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"/><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"/><path d="M10 6h4"/><path d="M10 10h4"/><path d="M10 14h4"/><path d="M10 18h4"/></svg>'),
    iconSize: [28, 28],
});

interface ZoneFocusMapProps {
  zone: {
    nom: string;
    latlng: [number, number];
    radius: number;
    color: string;
  };
  immeubles: {
    id: string;
    adresse: string;
    latlng: [number, number];
  }[];
}

export const ZoneFocusMap = ({ zone, immeubles }: ZoneFocusMapProps) => {
  return (
    // --- MODIFICATION ICI ---
    <div className="relative z-10 h-full w-full rounded-lg overflow-hidden border-2 border-[hsl(var(--winvest-blue-clair))]">
        <MapContainer 
            center={zone.latlng} 
            zoom={14} 
            style={{ height: '100%', width: '100%' }}
            dragging={false}
            zoomControl={false}
            scrollWheelZoom={false}
            doubleClickZoom={false}
            touchZoom={false}
        >
            <TileLayer
                attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            <Circle 
                center={zone.latlng} 
                radius={zone.radius}
                pathOptions={{ color: zone.color, fillColor: zone.color, fillOpacity: 0.2 }}
            >
                <Popup>{zone.nom}</Popup>
            </Circle>

            {immeubles.map(imm => (
                <Marker key={imm.id} position={imm.latlng} icon={buildingIcon}>
                    <Popup>{imm.adresse}</Popup>
                </Marker>
            ))}
        </MapContainer>
    </div>
  );
};


# --- layout/UserNavMenu.tsx ---
// src/layout/UserNavMenu.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui-admin/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { ChevronsUpDown, LogOut } from 'lucide-react';
import { cn } from '@/lib/utils';

interface UserNavMenuProps {
  isCollapsed: boolean;
}

export function UserNavMenu({ isCollapsed }: UserNavMenuProps) {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };

  const initials = user.name.split(' ').map((n) => n[0]).join('').toUpperCase();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className={cn(
            `w-full h-auto px-2 py-2 transition-all duration-300 text-black hover:bg-zinc-100`,
            isCollapsed ? 'justify-center' : 'justify-between'
          )}
        >
          <div className="flex items-center gap-3">
            <Avatar className="h-8 w-8"><AvatarFallback>{initials}</AvatarFallback></Avatar>
            {!isCollapsed && (
              <div className="flex flex-col items-start truncate text-left">
                <span className="text-sm font-medium">{user.name}</span>
                <span className="text-xs text-muted-foreground">{user.role}</span>
              </div>
            )}
          </div>
          {!isCollapsed && <ChevronsUpDown className="h-4 w-4 text-muted-foreground" />}
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.name}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.role}@winvest.capital
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer text-red-600 focus:text-red-600 focus:bg-red-50">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Déconnexion</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


# --- pages/admin/suivi/FloatingTranscriptPopup.tsx ---
// src/pages/admin/suivi/FloatingTranscriptPopup.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { ScrollArea } from '@/components/ui-admin/scroll-area';
import { X } from 'lucide-react';
import type { Transcription } from './types';

interface FloatingTranscriptPopupProps {
  transcription: Transcription | null;
  onClose: () => void;
}

export const FloatingTranscriptPopup = ({ transcription, onClose }: FloatingTranscriptPopupProps) => {
  if (!transcription) {
    return null;
  }

  return (
    // AMÉLIORATION : Le conteneur ne gère plus la position, seulement l'animation et la taille.
    // La classe `pointer-events-auto` est cruciale pour rendre la carte cliquable.
    <div className="w-full max-w-lg pointer-events-auto animate-in fade-in-0 zoom-in-95 duration-300">
      <Card className="bg-white/95 backdrop-blur-sm shadow-xl border-zinc-200/80 flex flex-col h-[calc(100vh-12rem)] max-h-[650px]">
        <CardHeader className="flex flex-row items-center justify-between p-4 border-b border-zinc-200/80">
          <div>
            {/* AMÉLIORATION : Typographie du titre et de la description */}
            <CardTitle className="text-lg font-bold text-zinc-800 tracking-tight">
              Appel de {transcription.commercialName}
            </CardTitle>
            <CardDescription className="text-xs tracking-wider uppercase text-zinc-500 mt-1">
              {transcription.date.toLocaleDateString('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
            </CardDescription>
          </div>
          {/* AMÉLIORATION : Style du bouton de fermeture */}
          <Button variant="ghost" size="icon" onClick={onClose} className="shrink-0 text-zinc-500 hover:bg-zinc-100 hover:text-zinc-800 rounded-full">
            <X className="h-5 w-5" />
            <span className="sr-only">Fermer</span>
          </Button>
        </CardHeader>
        <CardContent className="flex-1 p-0">
          <ScrollArea className="h-full">
            {/* AMÉLIORATION : Typographie du contenu pour meilleure lisibilité */}
            <p className="text-base whitespace-pre-wrap leading-relaxed text-zinc-700 p-6">
              {transcription.fullText}
            </p>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
};


# --- components/ui-admin/ViewToggleContainer.tsx ---
// frontend-shadcn/src/components/ui/ViewToggleContainer.tsx
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { Button } from '@/components/ui-admin/button';
import { Table as TableIcon, Map as MapIcon } from 'lucide-react';
import { cn } from '@/lib/utils'; // N'oubliez pas d'importer 'cn'

interface ViewToggleContainerProps {
  title: string;
  description: string;
  view: 'table' | 'map';
  onViewChange: (view: 'table' | 'map') => void;
  tableComponent: React.ReactNode;
  mapComponent: React.ReactNode;
}

export const ViewToggleContainer = ({
  title,
  description,
  view,
  onViewChange,
  tableComponent,
  mapComponent
}: ViewToggleContainerProps) => {
  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <div className="flex flex-wrap items-start justify-between gap-4">
          <div>
            <CardTitle>{title}</CardTitle>
            <CardDescription>{description}</CardDescription>
          </div>
          <div className="flex-shrink-0 flex items-center gap-1 rounded-lg border p-1 bg-muted/50">
            {/* --- CORRECTION DES BOUTONS ICI --- */}
            <Button
              variant='ghost'
              className={cn("transition-all", view === 'table' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')}
              onClick={() => onViewChange('table')}
            >
              <TableIcon className="mr-2 h-4 w-4" /> Tableau
            </Button>
            <Button
              variant='ghost'
              className={cn("transition-all", view === 'map' ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] hover:bg-[hsl(var(--winvest-blue-clair))]' : 'text-black hover:bg-zinc-100')}
              onClick={() => onViewChange('map')}
            >
              <MapIcon className="mr-2 h-4 w-4" /> Carte
            </Button>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="flex-1 p-0">
        {view === 'table' && <div className="animate-in fade-in-0 p-6 pt-0">{tableComponent}</div>}
        {view === 'map' && <div className="animate-in fade-in-0 h-full p-0">{mapComponent}</div>}
      </CardContent>
    </Card>
  );
};


# --- layout/UserNav.tsx ---
// src/layout/UserNav.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuGroup,
} from '@/components/ui-admin/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui-admin/avatar';
import { LogOut, User as UserIcon } from 'lucide-react';

export function UserNav() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };

  const initials = (user.name || '').split(' ').map((n) => n[0]).join('').toUpperCase();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-10 w-10 rounded-full hover:bg-black/10">
          <Avatar className="h-10 w-10 border-2 border-white/50">
            <AvatarFallback className="bg-transparent text-white font-bold">{initials}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.name}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.email || `${user.role}@winvest.capital`}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem className="cursor-pointer">
            <UserIcon className="mr-2 h-4 w-4" />
            <span>Profil</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer text-red-600 focus:text-red-600 focus:bg-red-50">
          <LogOut className="mr-2 h-4 w-4" />
          <span>Déconnexion</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


# --- components/ui-admin/slider.tsx ---
// src/components/ui-admin/slider.tsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        {/* MODIFICATION: La barre de progression utilise la couleur primaire */}
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        // MODIFICATION: Le curseur utilise la couleur primaire
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-primary ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }


# --- layout/AdminHeader.tsx ---
// src/layout/AdminHeader.tsx
import { useState } from 'react'; // 'useEffect' a été retiré car non utilisé
import { Button } from '@/components/ui-admin/button';
import { Sheet, SheetContent, SheetHeader, SheetTrigger } from '@/components/ui-admin/sheet';
import { Menu } from 'lucide-react';
import { AdminNavContent } from './AdminNavContent';
import { BrandLogo } from '@/components/ui-commercial/BrandLogo';
import { DateTimeDisplay } from './DateTimeDisplay';
import { UserNav } from './UserNav';

const AdminHeader = () => {
  const [isSheetOpen, setIsSheetOpen] = useState(false);

  return (
    <header className="sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b border-b-[hsl(var(--winvest-blue-moyen))] bg-[hsl(var(--winvest-blue-moyen))] px-4 text-white sm:px-6">
      {/* Section de gauche : Titre et menu hamburger pour mobile */}
      <div className="flex items-center gap-4">
        <div className="lg:hidden">
          <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon" className="border-white/30 bg-transparent text-white hover:bg-black/10">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[250px] p-0 bg-white">
              <SheetHeader className='p-4 border-b'><BrandLogo /></SheetHeader>
              <div className="py-4">
                <AdminNavContent isCollapsed={false} onLinkClick={() => setIsSheetOpen(false)} />
              </div>
            </SheetContent>
          </Sheet>
        </div>
        <h1 className="text-xl md:text-2xl font-bold">Espace Admin</h1>
      </div>
      
      {/* Section de droite : Date, Heure et Menu Utilisateur */}
      <div className="flex items-center gap-4">
        <DateTimeDisplay />
        <div className="border-l h-8"></div> {/* Votre séparateur est bien conservé */}
        <UserNav />
      </div>
    </header>
  );
};

export default AdminHeader;


# --- send_to_gemini.py ---
import os

EXCLUDED_DIRS = {"node_modules", ".git", ".next", ".turbo", "dist", "build"}
TEXT_EXTENSIONS = {'.ts', '.tsx', '.js', '.jsx', '.json', '.html', '.css', '.md', '.txt', '.py'}

def get_all_files(root_dir):
    result = []

    for foldername, _, filenames in os.walk(root_dir):
        if any(excluded in foldername for excluded in EXCLUDED_DIRS):
            continue

        for filename in filenames:
            filepath = os.path.join(foldername, filename)
            ext = os.path.splitext(filename)[1].lower()
            if ext in TEXT_EXTENSIONS:
                result.append(filepath)

    return result

def read_file_content(filepath):
    try:
        with open(filepath, "r", encoding="utf-8", errors="ignore") as f:
            return f.read()
    except:
        return ""

def export_balanced_parts(root_dir, output_base="code_part"):
    all_files = get_all_files(root_dir)

    # Lire tous les fichiers avec leur contenu
    file_entries = []
    for path in all_files:
        content = read_file_content(path)
        relative_path = os.path.relpath(path, root_dir)
        wrapped_content = f"\n\n# --- {relative_path} ---\n{content}\n"
        file_entries.append((relative_path, wrapped_content, len(wrapped_content)))

    # Trier les fichiers par taille (descendant)
    file_entries.sort(key=lambda x: x[2], reverse=True)

    part1, part2 = [], []
    size1, size2 = 0, 0

    for _, content, size in file_entries:
        if size1 <= size2:
            part1.append(content)
            size1 += size
        else:
            part2.append(content)
            size2 += size

    with open(f"{output_base}1.txt", "w", encoding="utf-8") as f1:
        f1.writelines(part1)

    with open(f"{output_base}2.txt", "w", encoding="utf-8") as f2:
        f2.writelines(part2)

    print(f"✅ Fichiers générés : {output_base}1.txt ({size1} car.), {output_base}2.txt ({size2} car.)")

if __name__ == "__main__":
    export_balanced_parts("./")



# --- layout/AdminSidebar.tsx ---
// src/layout/AdminSidebar.tsx
import { Button } from '@/components/ui-admin/button';
import { PanelLeftClose, PanelLeftOpen } from 'lucide-react';
import { AdminNavContent } from './AdminNavContent';
import { UserNavMenu } from './UserNavMenu';
import logo from '@/assets/logo.png';

interface AdminSidebarProps {
  isCollapsed: boolean;
  toggleSidebar: () => void;
}

export const AdminSidebar = ({ isCollapsed, toggleSidebar }: AdminSidebarProps) => {
  return (
    <aside
      className={`hidden lg:flex flex-col bg-[#FAFAFA] transition-all duration-300 sticky top-0 h-screen ${
        isCollapsed ? 'w-20' : 'w-64'
      }`}
    >
      {/* HEADER CORRIGÉ */}
      <div
        className={`flex items-center h-20 px-4 shrink-0 ${ // shrink-0 empêche le header de se réduire
          isCollapsed ? 'justify-center' : 'justify-between'
        }`}
      >
        {/* Le logo n'est visible que si la sidebar est dépliée */}
        {!isCollapsed && (
          // Le logo est dans un conteneur pour ne pas perturber le flexbox
          <div className="flex-1"> 
            <img
              src={logo}
              alt="Logo Groupe Finanssor"
              className="h-30 w-auto object-contain -translate-x-6" // Votre style est conservé
            />
          </div>
        )}

        {/* Bouton pour plier/déplier */}
        <Button
          variant="ghost"
          size="icon"
          onClick={toggleSidebar}
        >
          {isCollapsed ? <PanelLeftOpen className="h-5 w-5" /> : <PanelLeftClose className="h-5 w-5" />}
        </Button>
      </div>

      {/* NAVIGATION */}
      <div className="flex-1 overflow-y-auto"> {/* Ajout de overflow-y-auto pour les petits écrans */}
        <AdminNavContent isCollapsed={isCollapsed} />
      </div>

      {/* USER MENU */}
      <div className="p-2 border-t mt-auto shrink-0">
        <UserNavMenu isCollapsed={isCollapsed} />
      </div>
    </aside>
  );
};


# --- pages/admin/statitistiques/StatistiquesSkeleton.tsx ---
// src/pages/admin/statistiques/StatistiquesSkeleton.tsx
import { Skeleton } from "@/components/ui-admin/Skeleton";

export const StatistiquesSkeleton = () => {
  return (
    <div className="space-y-8">
      {/* Header Skeleton */}
      <div className="flex flex-wrap gap-4 justify-between items-center border-b pb-4">
        <Skeleton className="h-9 w-1/3" />
        <div className="flex items-center gap-2">
          <Skeleton className="h-10 w-[180px]" />
          <Skeleton className="h-10 w-[180px]" />
        </div>
        <Skeleton className="h-10 w-[250px]" />
      </div>

      {/* KPIs Skeleton */}
      <section>
        <Skeleton className="h-6 w-1/4 mb-4" />
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Skeleton className="h-28 w-full" />
          <Skeleton className="h-28 w-full" />
          <Skeleton className="h-28 w-full" />
          <Skeleton className="h-28 w-full" />
        </div>
      </section>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column */}
        <div className="lg:col-span-2 space-y-6">
          <section>
            <Skeleton className="h-6 w-1/4 mb-4" />
            <Skeleton className="h-80 w-full" />
          </section>
          <section>
            <Skeleton className="h-6 w-1/4 mb-4" />
            <Skeleton className="h-80 w-full" />
          </section>
        </div>

        {/* Right Column */}
        <div className="lg:col-span-1 space-y-6">
          <section>
            <Skeleton className="h-6 w-1/4 mb-4" />
            <Skeleton className="h-96 w-full" />
          </section>
          <section>
            <Skeleton className="h-6 w-1/4 mb-4" />
            <Skeleton className="h-96 w-full" />
          </section>
        </div>
      </div>
    </div>
  );
};


# --- layout/CommercialNavContent.tsx ---
// src/layout/CommercialNavContent.tsx
import { NavLink } from 'react-router-dom';
import { Button } from '@/components/ui-admin/button';
import { 
    LayoutDashboard, 
    Target, 
    History, 
    BarChart2, 
    User as UserIcon 
} from 'lucide-react';
import { cn } from '@/lib/utils';

const commercialNavLinks = [
    { to: '/commercial/dashboard', text: 'Tableau de bord', icon: LayoutDashboard, exact: true },
    { to: '/commercial/prospecting', text: 'Prospection', icon: Target, exact: false },
    { to: '/commercial/history', text: 'Historique', icon: History, exact: true },
    { to: '/commercial/stats', text: 'Mes statistiques', icon: BarChart2, exact: true },
    { to: '/commercial/profile', text: 'Profil', icon: UserIcon, exact: true },
];

interface CommercialNavContentProps {
  isCollapsed: boolean;
  onLinkClick?: () => void;
}

export const CommercialNavContent = ({ isCollapsed, onLinkClick }: CommercialNavContentProps) => {
  return (
    <nav className="flex flex-col gap-1 px-2">
      {commercialNavLinks.map((link) => (
        // --- CORRECTION DÉFINITIVE ICI ---
        <NavLink to={link.to} key={link.text} onClick={onLinkClick} end={link.exact}>
          {({ isActive }) => (
            <Button
              variant='ghost'
              className={cn(
                "w-full justify-start gap-3 h-10 transition-colors duration-200",
                isActive
                  ? 'bg-[hsl(var(--winvest-blue-clair))] text-[hsl(var(--winvest-blue-nuit))] font-semibold hover:bg-[hsl(var(--winvest-blue-clair))]'
                  : 'hover:bg-zinc-100 text-black'
              )}
            >
              <link.icon className="h-5 w-5" />
              {!isCollapsed && <span className="truncate">{link.text}</span>}
            </Button>
          )}
        </NavLink>
      ))}
    </nav>
  );
};


# --- components/ui-admin/GenericRadialBarChart.tsx ---
// src/components/charts/GenericRadialBarChart.tsx

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui-admin/card';
import { ResponsiveContainer, PolarAngleAxis, RadialBarChart, RadialBar } from 'recharts';

interface GenericRadialChartProps {
  title: string;
  value: number;
  total: number;
  color: string;
}

export const GenericRadialBarChart = ({ title, value, total, color }: GenericRadialChartProps) => {
  const percentage = total > 0 ? (value / total) * 100 : 0;
  const data = [{ name: 'objectif', value: percentage }];

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent className="flex-1 flex justify-center items-center relative">
        <ResponsiveContainer width="100%" height={200}>
          <RadialBarChart
            innerRadius="80%"
            outerRadius="100%"
            data={data}
            startAngle={90}
            endAngle={-270}
            cx="50%"
            cy="50%"
            barSize={15}
          >
            <PolarAngleAxis
              type="number"
              domain={[0, 100]}
              angleAxisId={0}
              tick={false}
            />
            <RadialBar
              background
              dataKey="value"
              cornerRadius={10}
              angleAxisId={0}
              className={color} // Utilise la classe de couleur passée
            />
          </RadialBarChart>
        </ResponsiveContainer>
        <div className="absolute flex flex-col items-center justify-center">
          <span className="text-4xl font-bold">{Math.round(percentage)}%</span>
          <span className="text-sm text-muted-foreground">{value} / {total}</span>
        </div>
      </CardContent>
    </Card>
  );
};


# --- components/charts/GenericStackedBarChart.tsx ---
import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui-admin/card";

interface ChartDataItem {
  [key: string]: string | number;
}

interface StackedBarChartProps {
  title: string;
  description: string;
  data: ChartDataItem[];
  xAxisKey: string;
  bars: { key: string; name: string; color: string }[];
}

export const GenericStackedBarChart = ({ title, description, data, xAxisKey, bars }: StackedBarChartProps) => {
  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent className="flex-1 pb-0">
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={data} layout="vertical" margin={{ top: 5, right: 20, left: 80, bottom: 20 }}>
            <CartesianGrid strokeDasharray="3 3" horizontal={false} />
            <XAxis type="number" stroke="hsl(var(--muted-foreground))" fontSize={12} />
            <YAxis type="category" dataKey={xAxisKey} stroke="hsl(var(--muted-foreground))" fontSize={12} width={80} />
            <Tooltip cursor={{ fill: 'hsl(var(--muted))' }} contentStyle={{ backgroundColor: 'hsl(var(--background))', borderColor: 'hsl(var(--border))' }} />
            <Legend wrapperStyle={{ paddingTop: '20px' }}/>
            {bars.map(bar => (
              <Bar key={bar.key} dataKey={bar.key} name={bar.name} stackId="a" fill={bar.color} radius={[4, 4, 4, 4]} />
            ))}
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};


# --- services/commercial.service.ts ---
// frontend-shadcn/src/services/commercial.service.ts
import axios from 'axios';

const API_URL = 'http://localhost:3000/commerciaux';

export type CommercialFromAPI = {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string | null;
  equipeId?: string;
  managerId: string;
  historiques: { nbContratsSignes: number }[];
};

type CreateCommercialPayload = {
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
  equipeId?: string;
  managerId: string; // Ajout du managerId
};

// AJOUT: Type pour la mise à jour
type UpdateCommercialPayload = Partial<CreateCommercialPayload>;

const getCommerciaux = async (): Promise<CommercialFromAPI[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const createCommercial = async (data: CreateCommercialPayload): Promise<CommercialFromAPI> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

// AJOUT: Fonction pour mettre à jour un commercial
const updateCommercial = async (id: string, data: UpdateCommercialPayload): Promise<CommercialFromAPI> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};

const deleteCommercial = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};
// frontend-shadcn/src/services/commercial.service.ts
// ... (haut du fichier inchangé)

// AJOUT DE LA NOUVELLE FONCTION
const getCommercialDetails = async (id: string): Promise<any> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

export const commercialService = {
  getCommerciaux,
  getCommercialDetails, // AJOUT
  createCommercial,
  updateCommercial,
  deleteCommercial,
};



# --- services/manager.service.ts ---
// frontend-shadcn/src/services/manager.service.ts
import axios from 'axios';
import type { Manager } from '@/types/types'; // On réutilise le type existant

const API_URL = 'http://localhost:3000/managers'; // L'URL de notre back-end

// DTO pour la création/mise à jour, on peut les définir ici
type CreateManagerPayload = {
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
};

type UpdateManagerPayload = Partial<CreateManagerPayload>;

// Fonction pour récupérer tous les managers
const getManagers = async (): Promise<Manager[]> => {
  const response = await axios.get(API_URL);
  // On peut ajouter ici un mapping si les données de l'API ne correspondent pas exactement au type `Manager` du front.
  // Dans notre cas, elles correspondent, mais c'est une bonne pratique.
  return response.data;
};

// Fonction pour créer un manager
const createManager = async (data: CreateManagerPayload): Promise<Manager> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

// Fonction pour mettre à jour un manager
const updateManager = async (id: string, data: UpdateManagerPayload): Promise<Manager> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};
// AJOUT DE LA NOUVELLE FONCTION
const getManagerDetails = async (id: string): Promise<any> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};
// Fonction pour supprimer un manager
const deleteManager = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

export const managerService = {
  getManagers,
  createManager,
  getManagerDetails,
  updateManager,
  deleteManager,
};


# --- components/ui-admin/scroll-area.tsx ---
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }



# --- components/ui-admin/button-variants.ts ---
import { cva } from "class-variance-authority"

export const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)



# --- pages/auth/Login.tsx ---
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui-admin/card';

const Login = () => {
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleLogin = (role: 'admin' | 'manager' | 'directeur' | 'backoffice' | 'commercial') => {
    login(role);
    navigate('/'); // On redirige vers la racine, qui s'occupera de dispatcher vers le bon dashboard
  };

  return (
    <div className="flex items-center justify-center h-screen bg-secondary">
      <Card className="w-[400px]">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl">Finanssor</CardTitle>
          <CardDescription>Veuillez vous connecter en choisissant un rôle.</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <Button className="bg-green-600 text-white hover:bg-green-700" onClick={() => handleLogin('admin')}>Connexion Admin</Button>
          <Button variant="outline" onClick={() => handleLogin('manager')}>Connexion Manager</Button>
          <Button variant="outline" onClick={() => handleLogin('directeur')}>Connexion Directeur</Button>
          <Button variant="outline" onClick={() => handleLogin('backoffice')}>Connexion Back-office</Button>
          <Button variant="outline" onClick={() => handleLogin('commercial')}>Connexion Commercial</Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default Login;


# --- layout/LogoutButton.tsx ---
// src/layout/LogoutButton.tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui-admin/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui-admin/tooltip"
import { LogOut } from 'lucide-react';
import { cn } from '@/lib/utils';

interface LogoutButtonProps {
  // Contexte pour adapter le style (fond bleu vs fond blanc)
  context?: 'header' | 'sidebar';
}

export function LogoutButton({ context = 'sidebar' }: LogoutButtonProps) {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/login', { replace: true });
  };
  
  // Styles différents pour le bouton selon où il se trouve
  const buttonVariant = context === 'header' ? 'ghost' : 'outline';
  const buttonClasses = context === 'header' ? 'text-white hover:bg-black/10 hover:text-white border-white/30' : '';

  return (
    <TooltipProvider delayDuration={100}>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant={buttonVariant}
            size="icon"
            onClick={handleLogout}
            className={cn(buttonClasses)}
          >
            <LogOut className="h-4 w-4" />
            <span className="sr-only">Déconnexion</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>Déconnexion</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}


# --- layout/CommercialSidebar.tsx ---
// src/layout/CommercialSidebar.tsx
import { Button } from '@/components/ui-admin/button';
import { PanelLeftClose, PanelLeftOpen } from 'lucide-react';
import { CommercialNavContent } from './CommercialNavContent';
import logo from '@/assets/logo.png';

interface CommercialSidebarProps {
  isCollapsed: boolean;
  toggleSidebar: () => void;
}

export const CommercialSidebar = ({ isCollapsed, toggleSidebar }: CommercialSidebarProps) => {
  return (
    <aside
      className={`hidden lg:flex flex-col bg-[#FAFAFA] transition-all duration-300 sticky top-0 h-screen ${
        isCollapsed ? 'w-20' : 'w-64'
      }`}
    >
      {/* HEADER (identique à AdminSidebar) */}
      <div className="relative flex items-center h-20 transition-all duration-300 justify-center">
        {!isCollapsed && (
          <img
            src={logo}
            alt="Logo Groupe Finanssor"
            className="h-30 w-auto object-contain -translate-x-6"
          />
        )}

        <Button
          variant="ghost"
          size="icon"
          onClick={toggleSidebar}
          className="absolute right-4"
        >
          {isCollapsed
            ? <PanelLeftOpen className="h-5 w-5" />
            : <PanelLeftClose className="h-5 w-5" />}
        </Button>
      </div>

      {/* NAVIGATION */}
      <div className="flex-1 py-4">
        <CommercialNavContent isCollapsed={isCollapsed} />
      </div>
    </aside>
  );
};



# --- services/porte.service.ts ---
import axios from 'axios';

const API_URL = 'http://localhost:3000/portes';

export type PorteFromAPI = {
  id: string;
  numeroPorte: string;
  status: string; // Assuming string for now, can be refined with an enum if available
  nbPassages: number;
  commentaire: string | null;
  immeubleId: string;
};

type CreatePortePayload = {
  numeroPorte: string;
  status: string;
  nbPassages?: number;
  commentaire?: string;
  repassage?: boolean;
  immeubleId: string;
};

type UpdatePortePayload = Partial<CreatePortePayload>;

const getPortes = async (): Promise<PorteFromAPI[]> => {
  const response = await axios.get(API_URL);
  return response.data;
};

const getPorteDetails = async (id: string): Promise<PorteFromAPI> => {
  const response = await axios.get(`${API_URL}/${id}`);
  return response.data;
};

const createPorte = async (data: CreatePortePayload): Promise<PorteFromAPI> => {
  const response = await axios.post(API_URL, data);
  return response.data;
};

const updatePorte = async (id: string, data: UpdatePortePayload): Promise<PorteFromAPI> => {
  const response = await axios.patch(`${API_URL}/${id}`, data);
  return response.data;
};

const deletePorte = async (id: string): Promise<void> => {
  await axios.delete(`${API_URL}/${id}`);
};

export const porteService = {
  getPortes,
  getPorteDetails,
  createPorte,
  updatePorte,
  deletePorte,
};



# --- pages/admin/Managers/managers-table/equipes-columns.tsx ---
// frontend-shadcn/src/pages/admin/manager-details-table/equipes-columns.tsx
"use client"

import type { ColumnDef } from "@tanstack/react-table"
import { Users, Flag } from "lucide-react"
import type { Commercial } from '../../commerciaux/commerciaux-table/columns';

export type EquipeDuManager = {
  id: string
  nom: string
  nbCommerciaux: number
  commerciaux: Commercial[];
}

const Header = ({ title }: { title: string }) => (
  <span className="text-xs font-semibold uppercase tracking-wider text-muted-foreground">{title}</span>
)

export const createEquipesColumns = (): ColumnDef<EquipeDuManager>[] => [
  {
    accessorKey: "nom",
    header: () => <Header title="Nom de l'équipe" />,
    cell: ({ row }) => (
      <div className="flex items-center gap-2 font-medium text-foreground">
        <Flag className="h-4 w-4 text-muted-foreground" />
        {row.getValue("nom")}
      </div>
    ),
  },
  {
    accessorKey: "nbCommerciaux",
    header: () => <div className="text-center"><Header title="Effectif" /></div>,
    cell: ({ row }) => (
      <div className="text-center flex items-center justify-center gap-2">
        <Users className="h-4 w-4 text-muted-foreground" />
        {row.getValue("nbCommerciaux")}
      </div>
    )
  },
  // La colonne "Actions" est supprimée. La navigation se fera au clic de la ligne.
]


# --- components/ui-admin/badge-variants.ts ---
import { cva } from "class-variance-authority"

export const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)



# --- pages/admin/suivi/SuiviSidebar.tsx ---
// src/pages/admin/suivi/SuiviSidebar.tsx
import { AudioPlayer } from './AudioPlayer';
import { HistoryList } from './HistoryList';
import type { Commercial, Transcription } from './types';

interface SuiviSidebarProps {
  activeCommercial: Commercial | null;
  transcriptions: Transcription[];
  commercialsMap: { [id: string]: { name: string; avatarFallback: string } };
  onHistoryItemClick: (transcription: Transcription) => void;
  liveText: string;
  isProspecting: boolean;
  audioChunks: Blob[]; // NOUVEAU
}

export const SuiviSidebar = (props: SuiviSidebarProps) => {
  return (
    <div className="bg-zinc-50 rounded-lg flex flex-col h-full gap-6 p-4 border border-zinc-200 shadow-sm">
      <AudioPlayer 
        activeCommercial={props.activeCommercial}
        liveText={props.liveText}
        isProspecting={props.isProspecting}
        audioChunks={props.audioChunks} // Transmission des données audio
      />
      <HistoryList 
        transcriptions={props.transcriptions} 
        onHistoryItemClick={props.onHistoryItemClick}
        commercials={props.commercialsMap}
      />
    </div>
  );
};


# --- services/assignment-goals.service.ts ---
import axios from 'axios';
import { AssignmentType } from '@/types/enums';

const API_URL = 'http://localhost:3000/assignment-goals';

interface AssignZonePayload {
  zoneId: string;
  assigneeId: string;
  assigneeType: AssignmentType;
}

interface SetMonthlyGoalPayload {
  commercialId: string;
  goal: number;
  month: number;
  year: number;
}

const assignZone = async (zoneId: string, assigneeId: string, assigneeType: AssignmentType) => {
  const payload: AssignZonePayload = {
    zoneId,
    assigneeId,
    assigneeType,
  };
  const response = await axios.post(`${API_URL}/assign-zone`, payload);
  return response.data;
};

const setMonthlyGoal = async (commercialId: string, goal: number, month: number, year: number) => {
  const payload: SetMonthlyGoalPayload = {
    commercialId,
    goal,
    month,
    year,
  };
  const response = await axios.post(`${API_URL}/set-monthly-goal`, payload);
  return response.data;
};

export const assignmentGoalsService = {
  assignZone,
  setMonthlyGoal,
};



# --- pages/admin/Dashboard/DashboardSkeleton.tsx ---
import { Skeleton } from "@/components/ui-admin/skeleton";

export const DashboardSkeleton = () => {
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <Skeleton className="h-8 w-64" />
        <Skeleton className="h-10 w-[180px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
        <Skeleton className="h-[108px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Skeleton className="lg:col-span-4 h-[380px]" />
        <Skeleton className="lg:col-span-3 h-[380px]" />
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Skeleton className="lg:col-span-4 h-[380px]" />
        <Skeleton className="lg:col-span-3 h-[380px]" />
      </div>
    </div>
  );
};


# --- routes/RoleBasedRedirect.tsx ---
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const RoleBasedRedirect = () => {
  const { user } = useAuth();

  if (!user) {
    return <Navigate to="/login" />;
  }
  
  // En fonction du rôle de l'utilisateur, on le redirige vers le bon dashboard
  switch (user.role) {
    case 'admin':
      return <Navigate to="/admin" />; // Cette route existe
    case 'manager':
      return <Navigate to="/manager" />; // Cette route existe
    case 'directeur':
      return <Navigate to="/directeur" />; // Cette route existe
    case 'backoffice':
      return <Navigate to="/backoffice" />; // Cette route existe
    case 'commercial':
      return <Navigate to="/commercial" />; // Cette route existe
    default:
      return <Navigate to="/login" />;
  }
  //
};

export default RoleBasedRedirect;


# --- layout/CommercialLayout.tsx ---
// src/layout/CommercialLayout.tsx
import { useState } from 'react';
import { Outlet } from 'react-router-dom';
import { CommercialSidebar } from './CommercialSidebar';
import CommercialHeader from './CommercialHeader';

const CommercialLayout = () => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div className="flex h-screen bg-muted/40">
      <CommercialSidebar isCollapsed={isCollapsed} toggleSidebar={toggleSidebar} />
      <div className="flex-1 flex flex-col overflow-hidden">
        <CommercialHeader />
        <main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default CommercialLayout;


# --- pages/admin/suivi/types.ts ---
// src/pages/admin/suivi/types.ts

// Type pour un commercial, peut être enrichi
export interface Commercial {
    id: string;
    name: string;
    avatarFallback: string;
    position: [number, number]; // [latitude, longitude]
    equipe: string;
  }
  
  // Type pour une entrée de l'historique des transcriptions
  export interface Transcription {
    id: string;
    commercialId: string;
    commercialName: string;
    date: Date;
    snippet: string; // Un extrait de la transcription
    fullText: string; // La transcription complète
  }
  
  // Type pour une zone géographique
  export interface Zone {
    id: string;
    name: string;
    color: string;
    latlng: [number, number];
    radius: number;
  }


# --- App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



# --- pages/admin/Dashboard/TableSkeleton.tsx ---
// frontend-shadcn/src/pages/admin/TableSkeleton.tsx
import { Skeleton } from "@/components/ui-admin/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui-admin/card";

export const TableSkeleton = () => (
  <Card className="animate-in fade-in-0 duration-500">
    <CardHeader>
      <Skeleton className="h-6 w-1/2" />
    </CardHeader>
    <CardContent className="space-y-3">
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-10 w-full" />
      <Skeleton className="h-10 w-full" />
    </CardContent>
  </Card>
);


# --- routes/PrivateRoute.tsx ---
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const PrivateRoute = () => {
  const { isAuthenticated } = useAuth();
  // Si l'utilisateur est authentifié, on affiche le contenu de la route (via Outlet)
  // Sinon, on le redirige vers la page de login
  return isAuthenticated ? <Outlet /> : <Navigate to="/login" replace />;
};

export default PrivateRoute;


# --- main.tsx ---
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { AuthProvider } from './contexts/AuthContext.tsx' // <-- Importer

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <AuthProvider> {/* <-- Envelopper App */}
      <App />
    </AuthProvider>
  </React.StrictMode>,
)


# --- components/ui-admin/skeleton.tsx ---
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


# --- lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



# --- types/assignment-type.ts ---
export enum AssignmentType {
  COMMERCIAL = 'COMMERCIAL',
  MANAGER = 'MANAGER',
}

